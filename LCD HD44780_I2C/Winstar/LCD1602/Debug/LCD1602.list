
LCD1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08008c90  08008c90  00018c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c8  080090c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080090c8  080090c8  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090c8  080090c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c8  080090c8  000190c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080090d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001e8  080092b8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080092b8  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3b4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d38  00000000  00000000  0002d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00030030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017fda  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a960  00000000  00000000  00048c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ac80  00000000  00000000  000535da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  000de2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c74 	.word	0x08008c74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008c74 	.word	0x08008c74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <lcd1602_Send_init_Data+0x80>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d007      	beq.n	8000da4 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e006      	b.n	8000db2 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	f023 0308 	bic.w	r3, r3, #8
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	214e      	movs	r1, #78	; 0x4e
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <lcd1602_Send_init_Data+0x84>)
 8000dcc:	f001 fac8 	bl	8002360 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f000 fe81 	bl	8001ad8 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	f023 0304 	bic.w	r3, r3, #4
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000de4:	230a      	movs	r3, #10
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	214e      	movs	r1, #78	; 0x4e
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <lcd1602_Send_init_Data+0x84>)
 8000df0:	f001 fab6 	bl	8002360 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f000 fe6f 	bl	8001ad8 <HAL_Delay>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000248 	.word	0x20000248

08000e0c <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <lcd1602_Send_data+0x74>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e006      	b.n	8000e3a <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f023 0308 	bic.w	r3, r3, #8
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000e48:	230a      	movs	r3, #10
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	214e      	movs	r1, #78	; 0x4e
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <lcd1602_Send_data+0x78>)
 8000e54:	f001 fa84 	bl	8002360 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000e66:	230a      	movs	r3, #10
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	214e      	movs	r1, #78	; 0x4e
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <lcd1602_Send_data+0x78>)
 8000e72:	f001 fa75 	bl	8002360 <HAL_I2C_Master_Transmit>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000248 	.word	0x20000248

08000e88 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000e8e:	2330      	movs	r3, #48	; 0x30
 8000e90:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 fe20 	bl	8001ad8 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff72 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000ea0:	2005      	movs	r0, #5
 8000ea2:	f000 fe19 	bl	8001ad8 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff6b 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 fe12 	bl	8001ad8 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff64 	bl	8000d84 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff5e 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х11======*/
	tx_buffer = 0x20;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff58 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff52 	bl	8000d84 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х11======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff4c 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff46 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff40 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000f04:	2310      	movs	r3, #16
 8000f06:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff3a 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff34 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000f1c:	2330      	movs	r3, #48	; 0x30
 8000f1e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff2e 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff28 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000f34:	23c0      	movs	r3, #192	; 0xc0
 8000f36:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff22 	bl	8000d84 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	f023 030f 	bic.w	r3, r3, #15
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	f043 0309 	orr.w	r3, r3, #9
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000f66:	f107 030f 	add.w	r3, r7, #15
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff4e 	bl	8000e0c <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	f043 0309 	orr.w	r3, r3, #9
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000f80:	f107 030f 	add.w	r3, r7, #15
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff41 	bl	8000e0c <lcd1602_Send_data>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e009      	b.n	8000fb4 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffcd 	bl	8000f48 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff f8cb 	bl	8000150 <strlen>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d8ee      	bhi.n	8000fa0 <lcd1602_Print_text+0xe>
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d901      	bls.n	8000fe4 <lcd1602_SetCursor+0x1a>
		y = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b27      	cmp	r3, #39	; 0x27
 8000fe8:	d901      	bls.n	8000fee <lcd1602_SetCursor+0x24>
		x = 39;
 8000fea:	2327      	movs	r3, #39	; 0x27
 8000fec:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <lcd1602_SetCursor+0x2e>
		adr = x;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3340      	adds	r3, #64	; 0x40
 8001002:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d102      	bne.n	8001010 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3314      	adds	r3, #20
 800100e:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d102      	bne.n	800101c <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	3354      	adds	r3, #84	; 0x54
 800101a:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102a:	b25b      	sxtb	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001030:	f107 030e 	add.w	r3, r7, #14
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fee9 	bl	8000e0c <lcd1602_Send_data>

	command = (adr << 4);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	b2db      	uxtb	r3, r3
 8001040:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001042:	f107 030e 	add.w	r3, r7, #14
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fee0 	bl	8000e0c <lcd1602_Send_data>

}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <lcd1602_Move_to_the_left>:
/*-------------------Функция установки курсора для вывода текста----------------*/

/*------------------------Функция перемещения текста влево-----------------------*/
/// Функция перемещения текста влево
/// Если ее повторять с периодичностью, получится бегущая строка
void lcd1602_Move_to_the_left(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	uint8_t command;
	command = 0x18;
 800105a:	2318      	movs	r3, #24
 800105c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_data(&command);
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fed3 	bl	8000e0c <lcd1602_Send_data>

	command = 0x88;
 8001066:	2388      	movs	r3, #136	; 0x88
 8001068:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_data(&command);
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fecd 	bl	8000e0c <lcd1602_Send_data>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <lcd1602_Move_to_the_right>:
/*------------------------Функция перемещения текста влево-----------------------*/

/*------------------------Функция перемещения текста вправо----------------------*/
/// Функция перемещения текста вправо
/// Если ее повторять с периодичностью, получится бегущая строка
void lcd1602_Move_to_the_right(void) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
	uint8_t command;
	command = 0x18;
 8001080:	2318      	movs	r3, #24
 8001082:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_data(&command);
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fec0 	bl	8000e0c <lcd1602_Send_data>

	command = 0xC8;
 800108c:	23c8      	movs	r3, #200	; 0xc8
 800108e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_data(&command);
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff feba 	bl	8000e0c <lcd1602_Send_data>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd1602_Backlight>:

/*---------------------Функция включения/выключения подсветки--------------------*/
/// Булевая функция включения/выключения подсветки
/// \param state - состояние подсветки.
/// 1 - вкл. 0 - выкл.
void lcd1602_Backlight(bool state) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <lcd1602_Backlight+0x18>
		backlight = true;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <lcd1602_Backlight+0x28>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
	} else {
		backlight = false;
	}
}
 80010b6:	e002      	b.n	80010be <lcd1602_Backlight+0x1e>
		backlight = false;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <lcd1602_Backlight+0x28>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <lcd1602_Clean>:
}
/*---------------------Функция создания своего символа-------------------------- */

/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clean(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
/// Аппаратная функция очистки дисплея.
/// Удаляет весь текст, возвращает курсор в начальное положение.
	uint8_t tx_buffer = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe53 	bl	8000d84 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80010de:	2310      	movs	r3, #16
 80010e0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe4d 	bl	8000d84 <lcd1602_Send_init_Data>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010fa:	f000 fc8b 	bl	8001a14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010fe:	f000 fa21 	bl	8001544 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001102:	f000 faeb 	bl	80016dc <MX_GPIO_Init>
	MX_I2C1_Init();
 8001106:	f000 fa63 	bl	80015d0 <MX_I2C1_Init>
	MX_TIM2_Init();
 800110a:	f000 fa8f 	bl	800162c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fce2 	bl	8001ad8 <HAL_Delay>
	lcd1602_Init();
 8001114:	f7ff feb8 	bl	8000e88 <lcd1602_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (HAL_GetTick() - T1 >= Delay) {
 8001118:	f000 fcd4 	bl	8001ac4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <main+0x2ac>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	4b9f      	ldr	r3, [pc, #636]	; (80013a4 <main+0x2b0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	f0c0 81d7 	bcc.w	80014dc <main+0x3e8>
			T1 = HAL_GetTick();
 800112e:	f000 fcc9 	bl	8001ac4 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	4b9a      	ldr	r3, [pc, #616]	; (80013a0 <main+0x2ac>)
 8001136:	601a      	str	r2, [r3, #0]
			if (flag == 0) {
 8001138:	4b9b      	ldr	r3, [pc, #620]	; (80013a8 <main+0x2b4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	f040 8081 	bne.w	8001244 <main+0x150>
				lcd1602_SetCursor(0, 0);
 8001142:	2100      	movs	r1, #0
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff ff40 	bl	8000fca <lcd1602_SetCursor>
				if (procent < 25) {
 800114a:	4b98      	ldr	r3, [pc, #608]	; (80013ac <main+0x2b8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b18      	cmp	r3, #24
 8001150:	d80d      	bhi.n	800116e <main+0x7a>
					sprintf(lcd1602_tx_buffer, "%ca%cpy%c%ca                          ", RU_Z, RU_g, RU_z, RU_k);
 8001152:	23ba      	movs	r3, #186	; 0xba
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	23b7      	movs	r3, #183	; 0xb7
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	23b4      	movs	r3, #180	; 0xb4
 800115c:	22a4      	movs	r2, #164	; 0xa4
 800115e:	4994      	ldr	r1, [pc, #592]	; (80013b0 <main+0x2bc>)
 8001160:	4894      	ldr	r0, [pc, #592]	; (80013b4 <main+0x2c0>)
 8001162:	f004 fe7f 	bl	8005e64 <siprintf>
					lcd1602_Print_text(lcd1602_tx_buffer);
 8001166:	4893      	ldr	r0, [pc, #588]	; (80013b4 <main+0x2c0>)
 8001168:	f7ff ff13 	bl	8000f92 <lcd1602_Print_text>
 800116c:	e03c      	b.n	80011e8 <main+0xf4>
				} else if (procent >= 25 && procent <= 50) {
 800116e:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <main+0x2b8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b18      	cmp	r3, #24
 8001174:	d911      	bls.n	800119a <main+0xa6>
 8001176:	4b8d      	ldr	r3, [pc, #564]	; (80013ac <main+0x2b8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b32      	cmp	r3, #50	; 0x32
 800117c:	d80d      	bhi.n	800119a <main+0xa6>
					sprintf(lcd1602_tx_buffer, "%ca%cpy%c%ca.                         ", RU_Z, RU_g, RU_z, RU_k);
 800117e:	23ba      	movs	r3, #186	; 0xba
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	23b7      	movs	r3, #183	; 0xb7
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	23b4      	movs	r3, #180	; 0xb4
 8001188:	22a4      	movs	r2, #164	; 0xa4
 800118a:	498b      	ldr	r1, [pc, #556]	; (80013b8 <main+0x2c4>)
 800118c:	4889      	ldr	r0, [pc, #548]	; (80013b4 <main+0x2c0>)
 800118e:	f004 fe69 	bl	8005e64 <siprintf>
					lcd1602_Print_text(lcd1602_tx_buffer);
 8001192:	4888      	ldr	r0, [pc, #544]	; (80013b4 <main+0x2c0>)
 8001194:	f7ff fefd 	bl	8000f92 <lcd1602_Print_text>
 8001198:	e026      	b.n	80011e8 <main+0xf4>
				} else if (procent >= 50 && procent <= 75) {
 800119a:	4b84      	ldr	r3, [pc, #528]	; (80013ac <main+0x2b8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b31      	cmp	r3, #49	; 0x31
 80011a0:	d911      	bls.n	80011c6 <main+0xd2>
 80011a2:	4b82      	ldr	r3, [pc, #520]	; (80013ac <main+0x2b8>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b4b      	cmp	r3, #75	; 0x4b
 80011a8:	d80d      	bhi.n	80011c6 <main+0xd2>
					sprintf(lcd1602_tx_buffer, "%ca%cpy%c%ca..                        ", RU_Z, RU_g, RU_z, RU_k);
 80011aa:	23ba      	movs	r3, #186	; 0xba
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	23b7      	movs	r3, #183	; 0xb7
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	23b4      	movs	r3, #180	; 0xb4
 80011b4:	22a4      	movs	r2, #164	; 0xa4
 80011b6:	4981      	ldr	r1, [pc, #516]	; (80013bc <main+0x2c8>)
 80011b8:	487e      	ldr	r0, [pc, #504]	; (80013b4 <main+0x2c0>)
 80011ba:	f004 fe53 	bl	8005e64 <siprintf>
					lcd1602_Print_text(lcd1602_tx_buffer);
 80011be:	487d      	ldr	r0, [pc, #500]	; (80013b4 <main+0x2c0>)
 80011c0:	f7ff fee7 	bl	8000f92 <lcd1602_Print_text>
 80011c4:	e010      	b.n	80011e8 <main+0xf4>
				} else if (procent >= 75) {
 80011c6:	4b79      	ldr	r3, [pc, #484]	; (80013ac <main+0x2b8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b4a      	cmp	r3, #74	; 0x4a
 80011cc:	d90c      	bls.n	80011e8 <main+0xf4>
					sprintf(lcd1602_tx_buffer, "%ca%cpy%c%ca...                       ", RU_Z, RU_g, RU_z, RU_k);
 80011ce:	23ba      	movs	r3, #186	; 0xba
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	23b7      	movs	r3, #183	; 0xb7
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	23b4      	movs	r3, #180	; 0xb4
 80011d8:	22a4      	movs	r2, #164	; 0xa4
 80011da:	4979      	ldr	r1, [pc, #484]	; (80013c0 <main+0x2cc>)
 80011dc:	4875      	ldr	r0, [pc, #468]	; (80013b4 <main+0x2c0>)
 80011de:	f004 fe41 	bl	8005e64 <siprintf>
					lcd1602_Print_text(lcd1602_tx_buffer);
 80011e2:	4874      	ldr	r0, [pc, #464]	; (80013b4 <main+0x2c0>)
 80011e4:	f7ff fed5 	bl	8000f92 <lcd1602_Print_text>
				}

				procent = procent + 4;
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <main+0x2b8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3304      	adds	r3, #4
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <main+0x2b8>)
 80011f2:	701a      	strb	r2, [r3, #0]
				sprintf(lcd1602_tx_buffer, "%d%c", procent, 0x25);
 80011f4:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <main+0x2b8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2325      	movs	r3, #37	; 0x25
 80011fc:	4971      	ldr	r1, [pc, #452]	; (80013c4 <main+0x2d0>)
 80011fe:	486d      	ldr	r0, [pc, #436]	; (80013b4 <main+0x2c0>)
 8001200:	f004 fe30 	bl	8005e64 <siprintf>
				lcd1602_SetCursor(10, 1);
 8001204:	2101      	movs	r1, #1
 8001206:	200a      	movs	r0, #10
 8001208:	f7ff fedf 	bl	8000fca <lcd1602_SetCursor>
				lcd1602_Print_text(lcd1602_tx_buffer);
 800120c:	4869      	ldr	r0, [pc, #420]	; (80013b4 <main+0x2c0>)
 800120e:	f7ff fec0 	bl	8000f92 <lcd1602_Print_text>
				i++;
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <main+0x2d4>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <main+0x2d4>)
 800121c:	801a      	strh	r2, [r3, #0]
				if (i == 25) {
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <main+0x2d4>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b19      	cmp	r3, #25
 8001224:	d10e      	bne.n	8001244 <main+0x150>
					Delay = 300;
 8001226:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <main+0x2b0>)
 8001228:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800122c:	601a      	str	r2, [r3, #0]
					flag = 1;
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <main+0x2b4>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
					i = 0;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <main+0x2d4>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
					lcd1602_Clean();
 800123a:	f7ff ff47 	bl	80010cc <lcd1602_Clean>
					lcd1602_Backlight(0);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff2e 	bl	80010a0 <lcd1602_Backlight>
				}
			}
			if (flag == 1) {
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <main+0x2b4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d12d      	bne.n	80012a8 <main+0x1b4>
				lcd1602_SetCursor(0, 0);
 800124c:	2100      	movs	r1, #0
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff febb 	bl	8000fca <lcd1602_SetCursor>
				sprintf(lcd1602_tx_buffer, "Tec%c %c%cc%c%ce%c", RU_t, RU_d, RU_i, RU_p, RU_l, RU_ya);
 8001254:	23c7      	movs	r3, #199	; 0xc7
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	23bb      	movs	r3, #187	; 0xbb
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	23be      	movs	r3, #190	; 0xbe
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	23b8      	movs	r3, #184	; 0xb8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	23e3      	movs	r3, #227	; 0xe3
 8001266:	22bf      	movs	r2, #191	; 0xbf
 8001268:	4958      	ldr	r1, [pc, #352]	; (80013cc <main+0x2d8>)
 800126a:	4852      	ldr	r0, [pc, #328]	; (80013b4 <main+0x2c0>)
 800126c:	f004 fdfa 	bl	8005e64 <siprintf>
				lcd1602_Print_text(lcd1602_tx_buffer);
 8001270:	4850      	ldr	r0, [pc, #320]	; (80013b4 <main+0x2c0>)
 8001272:	f7ff fe8e 	bl	8000f92 <lcd1602_Print_text>
				i++;
 8001276:	4b54      	ldr	r3, [pc, #336]	; (80013c8 <main+0x2d4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <main+0x2d4>)
 8001280:	801a      	strh	r2, [r3, #0]
				if (i > 5) {
 8001282:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <main+0x2d4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d90e      	bls.n	80012a8 <main+0x1b4>
					lcd1602_Backlight(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff ff08 	bl	80010a0 <lcd1602_Backlight>
					if (i == 10) {
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <main+0x2d4>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d107      	bne.n	80012a8 <main+0x1b4>
						flag = 2;
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <main+0x2b4>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
						i = 0;
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <main+0x2d4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	801a      	strh	r2, [r3, #0]
						lcd1602_Clean();
 80012a4:	f7ff ff12 	bl	80010cc <lcd1602_Clean>
					}
				}
			}

			if (flag == 2) {
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <main+0x2b4>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d145      	bne.n	800133c <main+0x248>
				lcd1602_SetCursor(0, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fe89 	bl	8000fca <lcd1602_SetCursor>
				sprintf(lcd1602_tx_buffer, "                Soldering iron");
 80012b8:	4a3e      	ldr	r2, [pc, #248]	; (80013b4 <main+0x2c0>)
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <main+0x2dc>)
 80012bc:	4615      	mov	r5, r2
 80012be:	461c      	mov	r4, r3
 80012c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c2:	6028      	str	r0, [r5, #0]
 80012c4:	6069      	str	r1, [r5, #4]
 80012c6:	60aa      	str	r2, [r5, #8]
 80012c8:	60eb      	str	r3, [r5, #12]
 80012ca:	cc07      	ldmia	r4!, {r0, r1, r2}
 80012cc:	6128      	str	r0, [r5, #16]
 80012ce:	6169      	str	r1, [r5, #20]
 80012d0:	61aa      	str	r2, [r5, #24]
 80012d2:	8823      	ldrh	r3, [r4, #0]
 80012d4:	78a2      	ldrb	r2, [r4, #2]
 80012d6:	83ab      	strh	r3, [r5, #28]
 80012d8:	4613      	mov	r3, r2
 80012da:	77ab      	strb	r3, [r5, #30]
				lcd1602_Print_text(lcd1602_tx_buffer);
 80012dc:	4835      	ldr	r0, [pc, #212]	; (80013b4 <main+0x2c0>)
 80012de:	f7ff fe58 	bl	8000f92 <lcd1602_Print_text>

				lcd1602_SetCursor(0, 1);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fe70 	bl	8000fca <lcd1602_SetCursor>
				sprintf(lcd1602_tx_buffer, "                %cp%c%ce%c, %ca%c %ce%ca?)", RU_P, RU_i, RU_v, RU_t, RU_k, RU_k, RU_d, RU_l);
 80012ea:	23bb      	movs	r3, #187	; 0xbb
 80012ec:	9305      	str	r3, [sp, #20]
 80012ee:	23e3      	movs	r3, #227	; 0xe3
 80012f0:	9304      	str	r3, [sp, #16]
 80012f2:	23ba      	movs	r3, #186	; 0xba
 80012f4:	9303      	str	r3, [sp, #12]
 80012f6:	23ba      	movs	r3, #186	; 0xba
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	23bf      	movs	r3, #191	; 0xbf
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	23b3      	movs	r3, #179	; 0xb3
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	23b8      	movs	r3, #184	; 0xb8
 8001304:	22a8      	movs	r2, #168	; 0xa8
 8001306:	4933      	ldr	r1, [pc, #204]	; (80013d4 <main+0x2e0>)
 8001308:	482a      	ldr	r0, [pc, #168]	; (80013b4 <main+0x2c0>)
 800130a:	f004 fdab 	bl	8005e64 <siprintf>
				lcd1602_Print_text(lcd1602_tx_buffer);
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <main+0x2c0>)
 8001310:	f7ff fe3f 	bl	8000f92 <lcd1602_Print_text>
				lcd1602_Move_to_the_left();
 8001314:	f7ff fe9e 	bl	8001054 <lcd1602_Move_to_the_left>
				i++;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <main+0x2d4>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <main+0x2d4>)
 8001322:	801a      	strh	r2, [r3, #0]
				if (i == 35) {
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <main+0x2d4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b23      	cmp	r3, #35	; 0x23
 800132a:	d107      	bne.n	800133c <main+0x248>
					flag = 3;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <main+0x2b4>)
 800132e:	2203      	movs	r2, #3
 8001330:	701a      	strb	r2, [r3, #0]
					i = 0;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <main+0x2d4>)
 8001334:	2200      	movs	r2, #0
 8001336:	801a      	strh	r2, [r3, #0]
					lcd1602_Clean();
 8001338:	f7ff fec8 	bl	80010cc <lcd1602_Clean>
				}
			}
			if (flag == 3) {
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <main+0x2b4>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d15e      	bne.n	8001402 <main+0x30e>
				i++;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <main+0x2d4>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <main+0x2d4>)
 800134e:	801a      	strh	r2, [r3, #0]
				if (i < 5) {
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <main+0x2d4>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d810      	bhi.n	800137a <main+0x286>
					lcd1602_SetCursor(0, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fe35 	bl	8000fca <lcd1602_SetCursor>
					sprintf(lcd1602_tx_buffer, "Hy %cpo%ce %cop%c :)", RU_v, RU_d, RU_n, RU_m);
 8001360:	23bc      	movs	r3, #188	; 0xbc
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	23bd      	movs	r3, #189	; 0xbd
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	23e3      	movs	r3, #227	; 0xe3
 800136a:	22b3      	movs	r2, #179	; 0xb3
 800136c:	491a      	ldr	r1, [pc, #104]	; (80013d8 <main+0x2e4>)
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <main+0x2c0>)
 8001370:	f004 fd78 	bl	8005e64 <siprintf>
					lcd1602_Print_text(lcd1602_tx_buffer);
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <main+0x2c0>)
 8001376:	f7ff fe0c 	bl	8000f92 <lcd1602_Print_text>
				}
				if (i >= 5 && i < 10) {
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <main+0x2d4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d92c      	bls.n	80013dc <main+0x2e8>
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <main+0x2d4>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d828      	bhi.n	80013dc <main+0x2e8>
					lcd1602_Clean();
 800138a:	f7ff fe9f 	bl	80010cc <lcd1602_Clean>
					lcd1602_SetCursor(0, 1);
 800138e:	2101      	movs	r1, #1
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fe1a 	bl	8000fca <lcd1602_SetCursor>
					lcd1602_Print_text(lcd1602_tx_buffer);
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <main+0x2c0>)
 8001398:	f7ff fdfb 	bl	8000f92 <lcd1602_Print_text>
 800139c:	e031      	b.n	8001402 <main+0x30e>
 800139e:	bf00      	nop
 80013a0:	2000029c 	.word	0x2000029c
 80013a4:	20000008 	.word	0x20000008
 80013a8:	2000022c 	.word	0x2000022c
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	08008c90 	.word	0x08008c90
 80013b4:	20000204 	.word	0x20000204
 80013b8:	08008cb8 	.word	0x08008cb8
 80013bc:	08008ce0 	.word	0x08008ce0
 80013c0:	08008d08 	.word	0x08008d08
 80013c4:	08008d30 	.word	0x08008d30
 80013c8:	20000234 	.word	0x20000234
 80013cc:	08008d38 	.word	0x08008d38
 80013d0:	08008d4c 	.word	0x08008d4c
 80013d4:	08008d6c 	.word	0x08008d6c
 80013d8:	08008d98 	.word	0x08008d98

				} else if (i >= 10 && i < 15) {
 80013dc:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <main+0x424>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d90e      	bls.n	8001402 <main+0x30e>
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <main+0x424>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b0e      	cmp	r3, #14
 80013ea:	d80a      	bhi.n	8001402 <main+0x30e>
					flag = 4;
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <main+0x428>)
 80013ee:	2204      	movs	r2, #4
 80013f0:	701a      	strb	r2, [r3, #0]
					i = 0;
 80013f2:	4b49      	ldr	r3, [pc, #292]	; (8001518 <main+0x424>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
					lcd1602_Clean();
 80013f8:	f7ff fe68 	bl	80010cc <lcd1602_Clean>
					Delay = 200;
 80013fc:	4b48      	ldr	r3, [pc, #288]	; (8001520 <main+0x42c>)
 80013fe:	22c8      	movs	r2, #200	; 0xc8
 8001400:	601a      	str	r2, [r3, #0]
				}
			}
			if (flag == 4) {
 8001402:	4b46      	ldr	r3, [pc, #280]	; (800151c <main+0x428>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b04      	cmp	r3, #4
 8001408:	d142      	bne.n	8001490 <main+0x39c>
				if (i < 14) {
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <main+0x424>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	2b0d      	cmp	r3, #13
 8001410:	d80f      	bhi.n	8001432 <main+0x33e>
					lcd1602_SetCursor(0, 0);
 8001412:	2100      	movs	r1, #0
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fdd8 	bl	8000fca <lcd1602_SetCursor>
					lcd1602_Print_text(":)");
 800141a:	4842      	ldr	r0, [pc, #264]	; (8001524 <main+0x430>)
 800141c:	f7ff fdb9 	bl	8000f92 <lcd1602_Print_text>
					lcd1602_Move_to_the_right();
 8001420:	f7ff fe2b 	bl	800107a <lcd1602_Move_to_the_right>
					i++;
 8001424:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <main+0x424>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <main+0x424>)
 800142e:	801a      	strh	r2, [r3, #0]
 8001430:	e02e      	b.n	8001490 <main+0x39c>
				} else if (i == 14) {
 8001432:	4b39      	ldr	r3, [pc, #228]	; (8001518 <main+0x424>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	2b0e      	cmp	r3, #14
 8001438:	d10f      	bne.n	800145a <main+0x366>
					lcd1602_Clean();
 800143a:	f7ff fe47 	bl	80010cc <lcd1602_Clean>
					lcd1602_SetCursor(14, 1);
 800143e:	2101      	movs	r1, #1
 8001440:	200e      	movs	r0, #14
 8001442:	f7ff fdc2 	bl	8000fca <lcd1602_SetCursor>
					lcd1602_Print_text(":)");
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <main+0x430>)
 8001448:	f7ff fda3 	bl	8000f92 <lcd1602_Print_text>
					i++;
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <main+0x424>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <main+0x424>)
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	e01a      	b.n	8001490 <main+0x39c>
				} else if (i > 14) {
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <main+0x424>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b0e      	cmp	r3, #14
 8001460:	d916      	bls.n	8001490 <main+0x39c>
					lcd1602_Move_to_the_left();
 8001462:	f7ff fdf7 	bl	8001054 <lcd1602_Move_to_the_left>
					i++;
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <main+0x424>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <main+0x424>)
 8001470:	801a      	strh	r2, [r3, #0]
					if (i == 30) {
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <main+0x424>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2b1e      	cmp	r3, #30
 8001478:	d10a      	bne.n	8001490 <main+0x39c>
						flag = 5;
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <main+0x428>)
 800147c:	2205      	movs	r2, #5
 800147e:	701a      	strb	r2, [r3, #0]
						i = 0;
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <main+0x424>)
 8001482:	2200      	movs	r2, #0
 8001484:	801a      	strh	r2, [r3, #0]
						lcd1602_Clean();
 8001486:	f7ff fe21 	bl	80010cc <lcd1602_Clean>
						Delay = 100;
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <main+0x42c>)
 800148c:	2264      	movs	r2, #100	; 0x64
 800148e:	601a      	str	r2, [r3, #0]
					}
				}

			}
			if (flag == 5) {
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <main+0x428>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d121      	bne.n	80014dc <main+0x3e8>
				lcd1602_SetCursor(0, 0);
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fd95 	bl	8000fca <lcd1602_SetCursor>
				sprintf(lcd1602_tx_buffer, "int = %d            ", counter);
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <main+0x434>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4921      	ldr	r1, [pc, #132]	; (800152c <main+0x438>)
 80014a8:	4821      	ldr	r0, [pc, #132]	; (8001530 <main+0x43c>)
 80014aa:	f004 fcdb 	bl	8005e64 <siprintf>
				lcd1602_Print_text(lcd1602_tx_buffer);
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <main+0x43c>)
 80014b0:	f7ff fd6f 	bl	8000f92 <lcd1602_Print_text>

				lcd1602_SetCursor(0, 1);
 80014b4:	2101      	movs	r1, #1
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fd87 	bl	8000fca <lcd1602_SetCursor>
				sprintf(lcd1602_tx_buffer, "float = %.3f        ", counter_float);
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <main+0x440>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffb1 	bl	8000428 <__aeabi_f2d>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	461a      	mov	r2, r3
 80014cc:	4623      	mov	r3, r4
 80014ce:	491a      	ldr	r1, [pc, #104]	; (8001538 <main+0x444>)
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <main+0x43c>)
 80014d2:	f004 fcc7 	bl	8005e64 <siprintf>
				lcd1602_Print_text(lcd1602_tx_buffer);
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <main+0x43c>)
 80014d8:	f7ff fd5b 	bl	8000f92 <lcd1602_Print_text>

			}

		}

		if (HAL_GetTick() - T2 >= 10) {
 80014dc:	f000 faf2 	bl	8001ac4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <main+0x448>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	f67f ae15 	bls.w	8001118 <main+0x24>
			T2 = HAL_GetTick();
 80014ee:	f000 fae9 	bl	8001ac4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <main+0x448>)
 80014f6:	601a      	str	r2, [r3, #0]
			counter++;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <main+0x434>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <main+0x434>)
 8001500:	6013      	str	r3, [r2, #0]
			counter_float = counter_float + 0.264f;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <main+0x440>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <main+0x44c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fb33 	bl	8000b74 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <main+0x440>)
 8001514:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - T1 >= Delay) {
 8001516:	e5ff      	b.n	8001118 <main+0x24>
 8001518:	20000234 	.word	0x20000234
 800151c:	2000022c 	.word	0x2000022c
 8001520:	20000008 	.word	0x20000008
 8001524:	08008db0 	.word	0x08008db0
 8001528:	20000004 	.word	0x20000004
 800152c:	08008db4 	.word	0x08008db4
 8001530:	20000204 	.word	0x20000204
 8001534:	20000230 	.word	0x20000230
 8001538:	08008dcc 	.word	0x08008dcc
 800153c:	20000244 	.word	0x20000244
 8001540:	3e872b02 	.word	0x3e872b02

08001544 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	2228      	movs	r2, #40	; 0x28
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fe4a 	bl	80051ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800156a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001578:	2302      	movs	r3, #2
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001582:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fea5 	bl	80042dc <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x58>
		Error_Handler();
 8001598:	f000 f8ce 	bl	8001738 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800159c:	230f      	movs	r3, #15
 800159e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2102      	movs	r1, #2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f910 	bl	80047dc <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x82>
		Error_Handler();
 80015c2:	f000 f8b9 	bl	8001738 <Error_Handler>
	}
}
 80015c6:	bf00      	nop
 80015c8:	3740      	adds	r7, #64	; 0x40
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f000 fd6f 	bl	80020f0 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001618:	f000 f88e 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000248 	.word	0x20000248
 8001624:	40005400 	.word	0x40005400
 8001628:	00061a80 	.word	0x00061a80

0800162c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001654:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <MX_TIM2_Init+0xac>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_TIM2_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001674:	4818      	ldr	r0, [pc, #96]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001676:	f003 fa39 	bl	8004aec <HAL_TIM_PWM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x58>
		Error_Handler();
 8001680:	f000 f85a 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4619      	mov	r1, r3
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MX_TIM2_Init+0xac>)
 8001694:	f003 fd22 	bl	80050dc <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM2_Init+0x76>
		Error_Handler();
 800169e:	f000 f84b 	bl	8001738 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	; 0x60
 80016a4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2204      	movs	r2, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM2_Init+0xac>)
 80016ba:	f003 fa67 	bl	8004b8c <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM2_Init+0x9c>
		Error_Handler();
 80016c4:	f000 f838 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM2_Init+0xac>)
 80016ca:	f000 f8d5 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002a4 	.word	0x200002a4

080016dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_GPIO_Init+0x58>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_GPIO_Init+0x58>)
 80016e8:	f043 0320 	orr.w	r3, r3, #32
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_GPIO_Init+0x58>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_GPIO_Init+0x58>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <MX_GPIO_Init+0x58>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_GPIO_Init+0x58>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_GPIO_Init+0x58>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <MX_GPIO_Init+0x58>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <MX_GPIO_Init+0x58>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800173e:	e7fe      	b.n	800173e <Error_Handler+0x6>

08001740 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
	if (hi2c->Instance == I2C1) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <HAL_I2C_MspInit+0x90>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d133      	bne.n	800182c <HAL_I2C_MspInit+0x88>
		/* USER CODE BEGIN I2C1_MspInit 0 */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ce:	61d3      	str	r3, [r2, #28]
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a15      	ldr	r2, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_I2C_MspInit+0x94>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80017f4:	23c0      	movs	r3, #192	; 0xc0
 80017f6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f8:	2312      	movs	r3, #18
 80017fa:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <HAL_I2C_MspInit+0x98>)
 8001808:	f000 fb18 	bl	8001e3c <HAL_GPIO_Init>

		/* Peripheral clock enable */
		//__HAL_RCC_I2C1_CLK_ENABLE();
		/* I2C1 interrupt Init */
		HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	201f      	movs	r0, #31
 8001812:	f000 fa5a 	bl	8001cca <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001816:	201f      	movs	r0, #31
 8001818:	f000 fa73 	bl	8001d02 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2020      	movs	r0, #32
 8001822:	f000 fa52 	bl	8001cca <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001826:	2020      	movs	r0, #32
 8001828:	f000 fa6b 	bl	8001d02 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00

08001840 <HAL_TIM_PWM_MspInit>:
 * @brief TIM_PWM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_pwm: TIM_PWM handle pointer
 * @retval None
 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim_pwm) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	if (htim_pwm->Instance == TIM2) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d10b      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x2a>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
	if (htim->Instance == TIM2) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001896:	d117      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x50>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_TIM_MspPostInit+0x58>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_TIM_MspPostInit+0x58>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_TIM_MspPostInit+0x58>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
		 PA1     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4804      	ldr	r0, [pc, #16]	; (80018d4 <HAL_TIM_MspPostInit+0x5c>)
 80018c4:	f000 faba 	bl	8001e3c <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191e:	f000 f8bf 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <I2C1_EV_IRQHandler+0x10>)
 800192e:	f000 fe15 	bl	800255c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000248 	.word	0x20000248

0800193c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <I2C1_ER_IRQHandler+0x10>)
 8001942:	f000 ff78 	bl	8002836 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000248 	.word	0x20000248

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f003 fc0a 	bl	8005198 <__errno>
 8001984:	4602      	mov	r2, r0
 8001986:	230c      	movs	r3, #12
 8001988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20005000 	.word	0x20005000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000238 	.word	0x20000238
 80019b8:	200002f8 	.word	0x200002f8

080019bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019ca:	e003      	b.n	80019d4 <LoopCopyDataInit>

080019cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019d2:	3104      	adds	r1, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019dc:	d3f6      	bcc.n	80019cc <CopyDataInit>
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019e0:	e002      	b.n	80019e8 <LoopFillZerobss>

080019e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019e4:	f842 3b04 	str.w	r3, [r2], #4

080019e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019ec:	d3f9      	bcc.n	80019e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ee:	f7ff ffe5 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f003 fbd7 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f6:	f7ff fb7d 	bl	80010f4 <main>
  bx lr
 80019fa:	4770      	bx	lr
  ldr r3, =_sidata
 80019fc:	080090d0 	.word	0x080090d0
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a04:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001a08:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001a0c:	200002f4 	.word	0x200002f4

08001a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_2_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_Init+0x28>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_Init+0x28>)
 8001a1e:	f043 0310 	orr.w	r3, r3, #16
 8001a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f945 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fe86 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f95d 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f925 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	20000014 	.word	0x20000014
 8001a9c:	20000010 	.word	0x20000010

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x1c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_IncTick+0x20>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000014 	.word	0x20000014
 8001ac0:	200002ec 	.word	0x200002ec

08001ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <HAL_GetTick+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	200002ec 	.word	0x200002ec

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_Delay+0x40>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffe0 	bl	8001ac4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
  {
  }
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000014 	.word	0x20000014

08001b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <__NVIC_EnableIRQ+0x34>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff90 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff2d 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff42 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff35 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d005      	beq.n	8001d5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e051      	b.n	8001dfe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 020e 	bic.w	r2, r2, #14
 8001d68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_DMA_Abort_IT+0xd0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d029      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xa0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <HAL_DMA_Abort_IT+0xd4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d022      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x9c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_DMA_Abort_IT+0xd8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d01a      	beq.n	8001dce <HAL_DMA_Abort_IT+0x96>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_DMA_Abort_IT+0xdc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d012      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x90>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_DMA_Abort_IT+0xe0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00a      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x8a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_DMA_Abort_IT+0xe4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d102      	bne.n	8001dbc <HAL_DMA_Abort_IT+0x84>
 8001db6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dba:	e00e      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc0:	e00b      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dc6:	e008      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dcc:	e005      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd2:	e002      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	e000      	b.n	8001dda <HAL_DMA_Abort_IT+0xa2>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_DMA_Abort_IT+0xe8>)
 8001ddc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
    } 
  }
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40020008 	.word	0x40020008
 8001e0c:	4002001c 	.word	0x4002001c
 8001e10:	40020030 	.word	0x40020030
 8001e14:	40020044 	.word	0x40020044
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	4002006c 	.word	0x4002006c
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	; 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e127      	b.n	80020a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8116 	bne.w	800209a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d034      	beq.n	8001ee0 <HAL_GPIO_Init+0xa4>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d80d      	bhi.n	8001e96 <HAL_GPIO_Init+0x5a>
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_GPIO_Init+0x9a>
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d804      	bhi.n	8001e8c <HAL_GPIO_Init+0x50>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d031      	beq.n	8001eea <HAL_GPIO_Init+0xae>
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d01c      	beq.n	8001ec4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8a:	e048      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d043      	beq.n	8001f18 <HAL_GPIO_Init+0xdc>
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d01b      	beq.n	8001ecc <HAL_GPIO_Init+0x90>
          break;
 8001e94:	e043      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e96:	4a89      	ldr	r2, [pc, #548]	; (80020bc <HAL_GPIO_Init+0x280>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d026      	beq.n	8001eea <HAL_GPIO_Init+0xae>
 8001e9c:	4a87      	ldr	r2, [pc, #540]	; (80020bc <HAL_GPIO_Init+0x280>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d806      	bhi.n	8001eb0 <HAL_GPIO_Init+0x74>
 8001ea2:	4a87      	ldr	r2, [pc, #540]	; (80020c0 <HAL_GPIO_Init+0x284>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d020      	beq.n	8001eea <HAL_GPIO_Init+0xae>
 8001ea8:	4a86      	ldr	r2, [pc, #536]	; (80020c4 <HAL_GPIO_Init+0x288>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01d      	beq.n	8001eea <HAL_GPIO_Init+0xae>
          break;
 8001eae:	e036      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eb0:	4a85      	ldr	r2, [pc, #532]	; (80020c8 <HAL_GPIO_Init+0x28c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0xae>
 8001eb6:	4a85      	ldr	r2, [pc, #532]	; (80020cc <HAL_GPIO_Init+0x290>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d016      	beq.n	8001eea <HAL_GPIO_Init+0xae>
 8001ebc:	4a84      	ldr	r2, [pc, #528]	; (80020d0 <HAL_GPIO_Init+0x294>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xae>
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e028      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e023      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01e      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e019      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e012      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e008      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2bff      	cmp	r3, #255	; 0xff
 8001f22:	d801      	bhi.n	8001f28 <HAL_GPIO_Init+0xec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	e001      	b.n	8001f2c <HAL_GPIO_Init+0xf0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	d802      	bhi.n	8001f3a <HAL_GPIO_Init+0xfe>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x104>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	210f      	movs	r1, #15
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8096 	beq.w	800209a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6e:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_GPIO_Init+0x298>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_GPIO_Init+0x298>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <HAL_GPIO_Init+0x298>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f86:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_GPIO_Init+0x29c>)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_GPIO_Init+0x2a0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x19e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x19a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x196>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x192>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x1a0>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x1a0>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x1a0>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x1a0>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fec:	493a      	ldr	r1, [pc, #232]	; (80020d8 <HAL_GPIO_Init+0x29c>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4938      	ldr	r1, [pc, #224]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002014:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	43db      	mvns	r3, r3
 800201c:	4933      	ldr	r1, [pc, #204]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800201e:	4013      	ands	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	492e      	ldr	r1, [pc, #184]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4929      	ldr	r1, [pc, #164]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002046:	4013      	ands	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4924      	ldr	r1, [pc, #144]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	43db      	mvns	r3, r3
 800206c:	491f      	ldr	r1, [pc, #124]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800206e:	4013      	ands	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	491a      	ldr	r1, [pc, #104]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	60cb      	str	r3, [r1, #12]
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	43db      	mvns	r3, r3
 8002094:	4915      	ldr	r1, [pc, #84]	; (80020ec <HAL_GPIO_Init+0x2b0>)
 8002096:	4013      	ands	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	3301      	adds	r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f aed0 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 80020b0:	bf00      	nop
 80020b2:	372c      	adds	r7, #44	; 0x2c
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	10210000 	.word	0x10210000
 80020c0:	10110000 	.word	0x10110000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10310000 	.word	0x10310000
 80020cc:	10320000 	.word	0x10320000
 80020d0:	10220000 	.word	0x10220000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40010800 	.word	0x40010800
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40011400 	.word	0x40011400
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e11f      	b.n	8002342 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fb44 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	; 0x24
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002154:	f002 fc98 	bl	8004a88 <HAL_RCC_GetPCLK1Freq>
 8002158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_I2C_Init+0x25c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d807      	bhi.n	8002174 <HAL_I2C_Init+0x84>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_I2C_Init+0x260>)
 8002168:	4293      	cmp	r3, r2
 800216a:	bf94      	ite	ls
 800216c:	2301      	movls	r3, #1
 800216e:	2300      	movhi	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e006      	b.n	8002182 <HAL_I2C_Init+0x92>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a77      	ldr	r2, [pc, #476]	; (8002354 <HAL_I2C_Init+0x264>)
 8002178:	4293      	cmp	r3, r2
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0db      	b.n	8002342 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a72      	ldr	r2, [pc, #456]	; (8002358 <HAL_I2C_Init+0x268>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a64      	ldr	r2, [pc, #400]	; (800234c <HAL_I2C_Init+0x25c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d802      	bhi.n	80021c4 <HAL_I2C_Init+0xd4>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	e009      	b.n	80021d8 <HAL_I2C_Init+0xe8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_I2C_Init+0x26c>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	3301      	adds	r3, #1
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4956      	ldr	r1, [pc, #344]	; (800234c <HAL_I2C_Init+0x25c>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d80d      	bhi.n	8002214 <HAL_I2C_Init+0x124>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e59      	subs	r1, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fbb1 f3f3 	udiv	r3, r1, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	bf38      	it	cc
 8002210:	2304      	movcc	r3, #4
 8002212:	e04f      	b.n	80022b4 <HAL_I2C_Init+0x1c4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_I2C_Init+0x150>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e012      	b.n	8002266 <HAL_I2C_Init+0x176>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x17e>
 800226a:	2301      	movs	r3, #1
 800226c:	e022      	b.n	80022b4 <HAL_I2C_Init+0x1c4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_I2C_Init+0x1a4>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e58      	subs	r0, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	440b      	add	r3, r1
 8002284:	fbb0 f3f3 	udiv	r3, r0, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Init+0x1c4>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6911      	ldr	r1, [r2, #16]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	000186a0 	.word	0x000186a0
 8002350:	001e847f 	.word	0x001e847f
 8002354:	003d08ff 	.word	0x003d08ff
 8002358:	431bde83 	.word	0x431bde83
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	461a      	mov	r2, r3
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
 8002370:	4613      	mov	r3, r2
 8002372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fba6 	bl	8001ac4 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80e0 	bne.w	8002548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	4970      	ldr	r1, [pc, #448]	; (8002554 <HAL_I2C_Master_Transmit+0x1f4>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f001 fdd0 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	e0d3      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x50>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e0cc      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d007      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	; 0x21
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2210      	movs	r2, #16
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	893a      	ldrh	r2, [r7, #8]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_I2C_Master_Transmit+0x1f8>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002418:	8979      	ldrh	r1, [r7, #10]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f001 fc60 	bl	8003ce4 <I2C_MasterRequestWrite>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e08d      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002444:	e066      	b.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f001 fe4a 	bl	80040e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b04      	cmp	r3, #4
 800245c:	d107      	bne.n	800246e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f001 fe3a 	bl	8004166 <I2C_WaitOnBTFFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01a      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d194      	bne.n	8002446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	00100002 	.word	0x00100002
 8002558:	ffff0000 	.word	0xffff0000

0800255c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b10      	cmp	r3, #16
 800258a:	d003      	beq.n	8002594 <HAL_I2C_EV_IRQHandler+0x38>
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	f040 80bd 	bne.w	800270e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <HAL_I2C_EV_IRQHandler+0x6e>
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80025b4:	d003      	beq.n	80025be <HAL_I2C_EV_IRQHandler+0x62>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_EV_IRQHandler+0x66>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x68>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f000 812e 	beq.w	8002826 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x92>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	0a5b      	lsrs	r3, r3, #9
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f001 fe61 	bl	80042a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fd60 	bl	80030ac <I2C_Master_SB>
 80025ec:	e08e      	b.n	800270c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_I2C_EV_IRQHandler+0xb2>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	0a5b      	lsrs	r3, r3, #9
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fdd5 	bl	80031b6 <I2C_Master_ADD10>
 800260c:	e07e      	b.n	800270c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_I2C_EV_IRQHandler+0xd2>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	0a5b      	lsrs	r3, r3, #9
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fdee 	bl	8003208 <I2C_Master_ADDR>
 800262c:	e06e      	b.n	800270c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d037      	beq.n	80026aa <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002648:	f000 80ef 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	09db      	lsrs	r3, r3, #7
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00f      	beq.n	8002678 <HAL_I2C_EV_IRQHandler+0x11c>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	0a9b      	lsrs	r3, r3, #10
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_I2C_EV_IRQHandler+0x11c>
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9ed 	bl	8002a50 <I2C_MasterTransmit_TXE>
 8002676:	e049      	b.n	800270c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80d2 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	0a5b      	lsrs	r3, r3, #9
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80cb 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d103      	bne.n	80026a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fa74 	bl	8002b88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a0:	e0c3      	b.n	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fad8 	bl	8002c58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a8:	e0bf      	b.n	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b8:	f000 80b7 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00f      	beq.n	80026e8 <HAL_I2C_EV_IRQHandler+0x18c>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	0a9b      	lsrs	r3, r3, #10
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_I2C_EV_IRQHandler+0x18c>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 fb48 	bl	8002d76 <I2C_MasterReceive_RXNE>
 80026e6:	e011      	b.n	800270c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 809a 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	0a5b      	lsrs	r3, r3, #9
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8093 	beq.w	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fbe7 	bl	8002ed8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800270a:	e08e      	b.n	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
 800270c:	e08d      	b.n	800282a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e007      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_I2C_EV_IRQHandler+0x206>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002758:	69b9      	ldr	r1, [r7, #24]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 ffab 	bl	80036b6 <I2C_Slave_ADDR>
 8002760:	e066      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x226>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	0a5b      	lsrs	r3, r3, #9
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 ffe0 	bl	8003740 <I2C_Slave_STOPF>
 8002780:	e056      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	2b21      	cmp	r3, #33	; 0x21
 8002786:	d002      	beq.n	800278e <HAL_I2C_EV_IRQHandler+0x232>
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	2b29      	cmp	r3, #41	; 0x29
 800278c:	d125      	bne.n	80027da <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	09db      	lsrs	r3, r3, #7
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00f      	beq.n	80027ba <HAL_I2C_EV_IRQHandler+0x25e>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	0a9b      	lsrs	r3, r3, #10
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_I2C_EV_IRQHandler+0x25e>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fec3 	bl	800353e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b8:	e039      	b.n	800282e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d033      	beq.n	800282e <HAL_I2C_EV_IRQHandler+0x2d2>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	0a5b      	lsrs	r3, r3, #9
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02d      	beq.n	800282e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fef0 	bl	80035b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027d8:	e029      	b.n	800282e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00f      	beq.n	8002806 <HAL_I2C_EV_IRQHandler+0x2aa>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	0a9b      	lsrs	r3, r3, #10
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <HAL_I2C_EV_IRQHandler+0x2aa>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fefa 	bl	80035f8 <I2C_SlaveReceive_RXNE>
 8002804:	e014      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00e      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	0a5b      	lsrs	r3, r3, #9
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 ff28 	bl	8003674 <I2C_SlaveReceive_BTF>
 8002824:	e004      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800282e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	; 0x28
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002858:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_I2C_ER_IRQHandler+0x5e>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002882:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_I2C_ER_IRQHandler+0x88>
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80028bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	0a9b      	lsrs	r3, r3, #10
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03f      	beq.n	800294a <HAL_I2C_ER_IRQHandler+0x114>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d039      	beq.n	800294a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80028d6:	7efb      	ldrb	r3, [r7, #27]
 80028d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028f0:	7ebb      	ldrb	r3, [r7, #26]
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d112      	bne.n	800291c <HAL_I2C_ER_IRQHandler+0xe6>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_I2C_ER_IRQHandler+0xe6>
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b21      	cmp	r3, #33	; 0x21
 8002900:	d008      	beq.n	8002914 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b29      	cmp	r3, #41	; 0x29
 8002906:	d005      	beq.n	8002914 <HAL_I2C_ER_IRQHandler+0xde>
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b28      	cmp	r3, #40	; 0x28
 800290c:	d106      	bne.n	800291c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b21      	cmp	r3, #33	; 0x21
 8002912:	d103      	bne.n	800291c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f001 f843 	bl	80039a0 <I2C_Slave_AF>
 800291a:	e016      	b.n	800294a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002924:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800292e:	7efb      	ldrb	r3, [r7, #27]
 8002930:	2b10      	cmp	r3, #16
 8002932:	d002      	beq.n	800293a <HAL_I2C_ER_IRQHandler+0x104>
 8002934:	7efb      	ldrb	r3, [r7, #27]
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d107      	bne.n	800294a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002948:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	0adb      	lsrs	r3, r3, #11
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00e      	beq.n	8002974 <HAL_I2C_ER_IRQHandler+0x13e>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002972:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f001 f87a 	bl	8003a80 <I2C_ITError>
  }
}
 800298c:	bf00      	nop
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	4613      	mov	r3, r2
 80029ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d150      	bne.n	8002b18 <I2C_MasterTransmit_TXE+0xc8>
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b21      	cmp	r3, #33	; 0x21
 8002a7a:	d14d      	bne.n	8002b18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d01d      	beq.n	8002abe <I2C_MasterTransmit_TXE+0x6e>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d01a      	beq.n	8002abe <I2C_MasterTransmit_TXE+0x6e>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a8e:	d016      	beq.n	8002abe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2211      	movs	r2, #17
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff6c 	bl	8002994 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002abc:	e060      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002acc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002adc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d107      	bne.n	8002b08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ff81 	bl	8002a08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b06:	e03b      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff3f 	bl	8002994 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b16:	e033      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b21      	cmp	r3, #33	; 0x21
 8002b1c:	d005      	beq.n	8002b2a <I2C_MasterTransmit_TXE+0xda>
 8002b1e:	7bbb      	ldrb	r3, [r7, #14]
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d12d      	bne.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b22      	cmp	r3, #34	; 0x22
 8002b28:	d12a      	bne.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b44:	e01c      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d103      	bne.n	8002b5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f880 	bl	8002c58 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b58:	e012      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	781a      	ldrb	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b7e:	e7ff      	b.n	8002b80 <I2C_MasterTransmit_TXE+0x130>
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b21      	cmp	r3, #33	; 0x21
 8002ba0:	d156      	bne.n	8002c50 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bd0:	e03e      	b.n	8002c50 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d01d      	beq.n	8002c14 <I2C_MasterTransmit_BTF+0x8c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d01a      	beq.n	8002c14 <I2C_MasterTransmit_BTF+0x8c>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be4:	d016      	beq.n	8002c14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bf4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2211      	movs	r2, #17
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fec1 	bl	8002994 <HAL_I2C_MasterTxCpltCallback>
}
 8002c12:	e01d      	b.n	8002c50 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fea2 	bl	8002994 <HAL_I2C_MasterTxCpltCallback>
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11d      	bne.n	8002cac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10b      	bne.n	8002c90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c8e:	e06e      	b.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	121b      	asrs	r3, r3, #8
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002caa:	e060      	b.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10b      	bne.n	8002ccc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cca:	e050      	b.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d14c      	bne.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b22      	cmp	r3, #34	; 0x22
 8002cd8:	d108      	bne.n	8002cec <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	e040      	b.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d015      	beq.n	8002d22 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b21      	cmp	r3, #33	; 0x21
 8002cfa:	d112      	bne.n	8002d22 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d20:	e025      	b.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d120      	bne.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b21      	cmp	r3, #33	; 0x21
 8002d30:	d11d      	bne.n	8002d6e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d40:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fe4d 	bl	8002a08 <HAL_I2C_MemTxCpltCallback>
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b22      	cmp	r3, #34	; 0x22
 8002d88:	f040 80a2 	bne.w	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d921      	bls.n	8002dde <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	f040 8082 	bne.w	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dda:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002ddc:	e078      	b.n	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d074      	beq.n	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d002      	beq.n	8002df2 <I2C_MasterReceive_RXNE+0x7c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d16e      	bne.n	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f001 f9f8 	bl	80041e8 <I2C_WaitOnSTOPRequestThroughIT>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d142      	bne.n	8002e84 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d10a      	bne.n	8002e6e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fdd7 	bl	8002a1a <HAL_I2C_MemRxCpltCallback>
}
 8002e6c:	e030      	b.n	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2212      	movs	r2, #18
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fd92 	bl	80029a6 <HAL_I2C_MasterRxCpltCallback>
}
 8002e82:	e025      	b.n	8002ed0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e92:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fdae 	bl	8002a2c <HAL_I2C_ErrorCallback>
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11b      	bne.n	8002f28 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f26:	e0bd      	b.n	80030a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d129      	bne.n	8002f86 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d00a      	beq.n	8002f5e <I2C_MasterReceive_BTF+0x86>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d007      	beq.n	8002f5e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f84:	e08e      	b.n	80030a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d176      	bne.n	800307e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d002      	beq.n	8002f9c <I2C_MasterReceive_BTF+0xc4>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d108      	bne.n	8002fae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e019      	b.n	8002fe2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d002      	beq.n	8002fba <I2C_MasterReceive_BTF+0xe2>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d108      	bne.n	8002fcc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e00a      	b.n	8002fe2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d007      	beq.n	8002fe2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800303c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d10a      	bne.n	8003068 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fcda 	bl	8002a1a <HAL_I2C_MemRxCpltCallback>
}
 8003066:	e01d      	b.n	80030a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2212      	movs	r2, #18
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fc95 	bl	80029a6 <HAL_I2C_MasterRxCpltCallback>
}
 800307c:	e012      	b.n	80030a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d117      	bne.n	80030f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030da:	e067      	b.n	80031ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]
}
 80030ee:	e05d      	b.n	80031ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d133      	bne.n	8003162 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b21      	cmp	r3, #33	; 0x21
 8003104:	d109      	bne.n	800311a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	e008      	b.n	800312c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <I2C_Master_SB+0x92>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d032      	beq.n	80031ac <I2C_Master_SB+0x100>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02d      	beq.n	80031ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315e:	605a      	str	r2, [r3, #4]
}
 8003160:	e024      	b.n	80031ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10e      	bne.n	8003188 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	b29b      	uxth	r3, r3
 8003170:	11db      	asrs	r3, r3, #7
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0306 	and.w	r3, r3, #6
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f063 030f 	orn	r3, r3, #15
 800317e:	b2da      	uxtb	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	611a      	str	r2, [r3, #16]
}
 8003186:	e011      	b.n	80031ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10d      	bne.n	80031ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	b29b      	uxth	r3, r3
 8003196:	11db      	asrs	r3, r3, #7
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f003 0306 	and.w	r3, r3, #6
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f063 030e 	orn	r3, r3, #14
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <I2C_Master_ADD10+0x24>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <I2C_Master_ADD10+0x38>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fc:	605a      	str	r2, [r3, #4]
    }
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b091      	sub	sp, #68	; 0x44
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003216:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b22      	cmp	r3, #34	; 0x22
 8003230:	f040 8174 	bne.w	800351c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <I2C_Master_ADDR+0x54>
 800323c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d10b      	bne.n	800325c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003244:	2300      	movs	r3, #0
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	e16b      	b.n	8003534 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11d      	bne.n	80032a0 <I2C_Master_ADDR+0x98>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800326c:	d118      	bne.n	80032a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003292:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	651a      	str	r2, [r3, #80]	; 0x50
 800329e:	e149      	b.n	8003534 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d113      	bne.n	80032d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e120      	b.n	8003514 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 808a 	bne.w	80033f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e4:	d137      	bne.n	8003356 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	d113      	bne.n	800332e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	e0f2      	b.n	8003514 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e0de      	b.n	8003514 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	2b08      	cmp	r3, #8
 800335a:	d02e      	beq.n	80033ba <I2C_Master_ADDR+0x1b2>
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	2b20      	cmp	r3, #32
 8003360:	d02b      	beq.n	80033ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003364:	2b12      	cmp	r3, #18
 8003366:	d102      	bne.n	800336e <I2C_Master_ADDR+0x166>
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	2b01      	cmp	r3, #1
 800336c:	d125      	bne.n	80033ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00e      	beq.n	8003392 <I2C_Master_ADDR+0x18a>
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2b02      	cmp	r3, #2
 8003378:	d00b      	beq.n	8003392 <I2C_Master_ADDR+0x18a>
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b10      	cmp	r3, #16
 800337e:	d008      	beq.n	8003392 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e007      	b.n	80033a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	e0ac      	b.n	8003514 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e090      	b.n	8003514 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d158      	bne.n	80034ae <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d021      	beq.n	8003446 <I2C_Master_ADDR+0x23e>
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2b02      	cmp	r3, #2
 8003406:	d01e      	beq.n	8003446 <I2C_Master_ADDR+0x23e>
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b10      	cmp	r3, #16
 800340c:	d01b      	beq.n	8003446 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e012      	b.n	800346c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003454:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	d14b      	bne.n	8003514 <I2C_Master_ADDR+0x30c>
 800347c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003482:	d00b      	beq.n	800349c <I2C_Master_ADDR+0x294>
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	2b01      	cmp	r3, #1
 8003488:	d008      	beq.n	800349c <I2C_Master_ADDR+0x294>
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2b08      	cmp	r3, #8
 800348e:	d005      	beq.n	800349c <I2C_Master_ADDR+0x294>
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	2b10      	cmp	r3, #16
 8003494:	d002      	beq.n	800349c <I2C_Master_ADDR+0x294>
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b20      	cmp	r3, #32
 800349a:	d13b      	bne.n	8003514 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e032      	b.n	8003514 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034cc:	d117      	bne.n	80034fe <I2C_Master_ADDR+0x2f6>
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d4:	d00b      	beq.n	80034ee <I2C_Master_ADDR+0x2e6>
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d008      	beq.n	80034ee <I2C_Master_ADDR+0x2e6>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d005      	beq.n	80034ee <I2C_Master_ADDR+0x2e6>
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d002      	beq.n	80034ee <I2C_Master_ADDR+0x2e6>
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d107      	bne.n	80034fe <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800351a:	e00b      	b.n	8003534 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
}
 8003532:	e7ff      	b.n	8003534 <I2C_Master_ADDR+0x32c>
 8003534:	bf00      	nop
 8003536:	3744      	adds	r7, #68	; 0x44
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02b      	beq.n	80035b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d114      	bne.n	80035b0 <I2C_SlaveTransmit_TXE+0x72>
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b29      	cmp	r3, #41	; 0x29
 800358a:	d111      	bne.n	80035b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2228      	movs	r2, #40	; 0x28
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fa04 	bl	80029b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02c      	beq.n	800366c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d114      	bne.n	800366c <I2C_SlaveReceive_RXNE+0x74>
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b2a      	cmp	r3, #42	; 0x2a
 8003646:	d111      	bne.n	800366c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003656:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2222      	movs	r2, #34	; 0x22
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2228      	movs	r2, #40	; 0x28
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff f9af 	bl	80029ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d012      	beq.n	80036ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d127      	bne.n	8003724 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	09db      	lsrs	r3, r3, #7
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	81bb      	strh	r3, [r7, #12]
 8003706:	e002      	b.n	800370e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003716:	89ba      	ldrh	r2, [r7, #12]
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f95d 	bl	80029dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003722:	e008      	b.n	8003736 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800375e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379c:	d172      	bne.n	8003884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b22      	cmp	r3, #34	; 0x22
 80037a2:	d002      	beq.n	80037aa <I2C_Slave_STOPF+0x6a>
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b2a      	cmp	r3, #42	; 0x2a
 80037a8:	d135      	bne.n	8003816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0204 	orr.w	r2, r3, #4
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fb1e 	bl	8001e24 <HAL_DMA_GetState>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d049      	beq.n	8003882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a69      	ldr	r2, [pc, #420]	; (8003998 <I2C_Slave_STOPF+0x258>)
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fa9c 	bl	8001d38 <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03d      	beq.n	8003882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003810:	4610      	mov	r0, r2
 8003812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003814:	e035      	b.n	8003882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fae8 	bl	8001e24 <HAL_DMA_GetState>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d014      	beq.n	8003884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <I2C_Slave_STOPF+0x258>)
 8003860:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fa66 	bl	8001d38 <HAL_DMA_Abort_IT>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387c:	4610      	mov	r0, r2
 800387e:	4798      	blx	r3
 8003880:	e000      	b.n	8003884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d03e      	beq.n	800390c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b04      	cmp	r3, #4
 800389a:	d112      	bne.n	80038c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d112      	bne.n	80038f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8b3 	bl	8003a80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800391a:	e039      	b.n	8003990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b2a      	cmp	r3, #42	; 0x2a
 8003920:	d109      	bne.n	8003936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2228      	movs	r2, #40	; 0x28
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff f84a 	bl	80029ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b28      	cmp	r3, #40	; 0x28
 8003940:	d111      	bne.n	8003966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <I2C_Slave_STOPF+0x25c>)
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff f849 	bl	80029f6 <HAL_I2C_ListenCpltCallback>
}
 8003964:	e014      	b.n	8003990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	2b22      	cmp	r3, #34	; 0x22
 800396c:	d002      	beq.n	8003974 <I2C_Slave_STOPF+0x234>
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b22      	cmp	r3, #34	; 0x22
 8003972:	d10d      	bne.n	8003990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff f81d 	bl	80029ca <HAL_I2C_SlaveRxCpltCallback>
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	08003de9 	.word	0x08003de9
 800399c:	ffff0000 	.word	0xffff0000

080039a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d002      	beq.n	80039c2 <I2C_Slave_AF+0x22>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d129      	bne.n	8003a16 <I2C_Slave_AF+0x76>
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b28      	cmp	r3, #40	; 0x28
 80039c6:	d126      	bne.n	8003a16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <I2C_Slave_AF+0xdc>)
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fff1 	bl	80029f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a14:	e02e      	b.n	8003a74 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b21      	cmp	r3, #33	; 0x21
 8003a1a:	d126      	bne.n	8003a6a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <I2C_Slave_AF+0xdc>)
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a60:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe ffa8 	bl	80029b8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a68:	e004      	b.n	8003a74 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a72:	615a      	str	r2, [r3, #20]
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	ffff0000 	.word	0xffff0000

08003a80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d002      	beq.n	8003aa4 <I2C_ITError+0x24>
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d10a      	bne.n	8003aba <I2C_ITError+0x3a>
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b22      	cmp	r3, #34	; 0x22
 8003aa8:	d107      	bne.n	8003aba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac0:	2b28      	cmp	r3, #40	; 0x28
 8003ac2:	d107      	bne.n	8003ad4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2228      	movs	r2, #40	; 0x28
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ad2:	e015      	b.n	8003b00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d00a      	beq.n	8003afa <I2C_ITError+0x7a>
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b60      	cmp	r3, #96	; 0x60
 8003ae8:	d007      	beq.n	8003afa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0e:	d161      	bne.n	8003bd4 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d020      	beq.n	8003b6e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	4a6a      	ldr	r2, [pc, #424]	; (8003cdc <I2C_ITError+0x25c>)
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe f8fd 	bl	8001d38 <HAL_DMA_Abort_IT>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8089 	beq.w	8003c58 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
 8003b6c:	e074      	b.n	8003c58 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	4a5a      	ldr	r2, [pc, #360]	; (8003cdc <I2C_ITError+0x25c>)
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe f8dc 	bl	8001d38 <HAL_DMA_Abort_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d068      	beq.n	8003c58 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d10b      	bne.n	8003bac <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4798      	blx	r3
 8003bd2:	e041      	b.n	8003c58 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d125      	bne.n	8003c2c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d10b      	bne.n	8003c14 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe ff0a 	bl	8002a3e <HAL_I2C_AbortCpltCallback>
 8003c2a:	e015      	b.n	8003c58 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10b      	bne.n	8003c52 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe feea 	bl	8002a2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10e      	bne.n	8003c86 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d113      	bne.n	8003cd2 <I2C_ITError+0x252>
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b28      	cmp	r3, #40	; 0x28
 8003cae:	d110      	bne.n	8003cd2 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <I2C_ITError+0x260>)
 8003cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fe fe92 	bl	80029f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	08003de9 	.word	0x08003de9
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d006      	beq.n	8003d0e <I2C_MasterRequestWrite+0x2a>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d003      	beq.n	8003d0e <I2C_MasterRequestWrite+0x2a>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d0c:	d108      	bne.n	8003d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e00b      	b.n	8003d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b12      	cmp	r3, #18
 8003d26:	d107      	bne.n	8003d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f8f7 	bl	8003f38 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d103      	bne.n	8003d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e035      	b.n	8003dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d74:	d108      	bne.n	8003d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e01b      	b.n	8003dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d88:	897b      	ldrh	r3, [r7, #10]
 8003d8a:	11db      	asrs	r3, r3, #7
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0306 	and.w	r3, r3, #6
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f063 030f 	orn	r3, r3, #15
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	490e      	ldr	r1, [pc, #56]	; (8003de0 <I2C_MasterRequestWrite+0xfc>)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f91d 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e010      	b.n	8003dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <I2C_MasterRequestWrite+0x100>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f90d 	bl	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00010008 	.word	0x00010008
 8003de4:	00010002 	.word	0x00010002

08003de8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e02:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <I2C_DMAAbort+0x148>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	4a4a      	ldr	r2, [pc, #296]	; (8003f34 <I2C_DMAAbort+0x14c>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0a1a      	lsrs	r2, r3, #8
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00da      	lsls	r2, r3, #3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e2e:	e00a      	b.n	8003e46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d0ea      	beq.n	8003e1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	2200      	movs	r2, #0
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	2200      	movs	r2, #0
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	2200      	movs	r2, #0
 8003e8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d10e      	bne.n	8003ed6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7fe fdb5 	bl	8002a3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ed4:	e027      	b.n	8003f26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003edc:	2b28      	cmp	r3, #40	; 0x28
 8003ede:	d117      	bne.n	8003f10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2228      	movs	r2, #40	; 0x28
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f0e:	e007      	b.n	8003f20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f20:	6978      	ldr	r0, [r7, #20]
 8003f22:	f7fe fd83 	bl	8002a2c <HAL_I2C_ErrorCallback>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	14f8b589 	.word	0x14f8b589

08003f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f48:	e025      	b.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d021      	beq.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fd fdb7 	bl	8001ac4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d116      	bne.n	8003f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e023      	b.n	8003fde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	e00c      	b.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf0c      	ite	eq
 8003fce:	2301      	moveq	r3, #1
 8003fd0:	2300      	movne	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0b6      	beq.n	8003f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff4:	e051      	b.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d123      	bne.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800401e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e046      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004054:	d021      	beq.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004056:	f7fd fd35 	bl	8001ac4 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d302      	bcc.n	800406c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d116      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e020      	b.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10c      	bne.n	80040be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e00b      	b.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	43da      	mvns	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d18d      	bne.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f0:	e02d      	b.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f8aa 	bl	800424c <I2C_IsAcknowledgeFailed>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e02d      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d021      	beq.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fd fcdb 	bl	8001ac4 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e007      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d1ca      	bne.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004172:	e02d      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f869 	bl	800424c <I2C_IsAcknowledgeFailed>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e02d      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d021      	beq.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418c:	f7fd fc9a 	bl	8001ac4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e007      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d1ca      	bne.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	0a1a      	lsrs	r2, r3, #8
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e008      	b.n	8004238 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004234:	d0e9      	beq.n	800420a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	14f8b589 	.word	0x14f8b589

0800424c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d11b      	bne.n	800429c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800426c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042b8:	d103      	bne.n	80042c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042c0:	e007      	b.n	80042d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042ca:	d102      	bne.n	80042d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2208      	movs	r2, #8
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e26c      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8087 	beq.w	800440a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042fc:	4b92      	ldr	r3, [pc, #584]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b04      	cmp	r3, #4
 8004306:	d00c      	beq.n	8004322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004308:	4b8f      	ldr	r3, [pc, #572]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b08      	cmp	r3, #8
 8004312:	d112      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
 8004314:	4b8c      	ldr	r3, [pc, #560]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d10b      	bne.n	800433a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004322:	4b89      	ldr	r3, [pc, #548]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d06c      	beq.n	8004408 <HAL_RCC_OscConfig+0x12c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d168      	bne.n	8004408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e246      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x76>
 8004344:	4b80      	ldr	r3, [pc, #512]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a7f      	ldr	r2, [pc, #508]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800434a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e02e      	b.n	80043b0 <HAL_RCC_OscConfig+0xd4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x98>
 800435a:	4b7b      	ldr	r3, [pc, #492]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7a      	ldr	r2, [pc, #488]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b78      	ldr	r3, [pc, #480]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a77      	ldr	r2, [pc, #476]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800436c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e01d      	b.n	80043b0 <HAL_RCC_OscConfig+0xd4>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0xbc>
 800437e:	4b72      	ldr	r3, [pc, #456]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a71      	ldr	r2, [pc, #452]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b6f      	ldr	r3, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6e      	ldr	r2, [pc, #440]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e00b      	b.n	80043b0 <HAL_RCC_OscConfig+0xd4>
 8004398:	4b6b      	ldr	r3, [pc, #428]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6a      	ldr	r2, [pc, #424]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800439e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b68      	ldr	r3, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a67      	ldr	r2, [pc, #412]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80043aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd fb84 	bl	8001ac4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c0:	f7fd fb80 	bl	8001ac4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1fa      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b5d      	ldr	r3, [pc, #372]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe4>
 80043de:	e014      	b.n	800440a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fb70 	bl	8001ac4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd fb6c 	bl	8001ac4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e1e6      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	4b53      	ldr	r3, [pc, #332]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x10c>
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004416:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004422:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b08      	cmp	r3, #8
 800442c:	d11c      	bne.n	8004468 <HAL_RCC_OscConfig+0x18c>
 800442e:	4b46      	ldr	r3, [pc, #280]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d116      	bne.n	8004468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800443a:	4b43      	ldr	r3, [pc, #268]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d005      	beq.n	8004452 <HAL_RCC_OscConfig+0x176>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d001      	beq.n	8004452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1ba      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4939      	ldr	r1, [pc, #228]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	e03a      	b.n	80044de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <HAL_RCC_OscConfig+0x270>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fd fb25 	bl	8001ac4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd fb21 	bl	8001ac4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e19b      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	4927      	ldr	r1, [pc, #156]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
 80044b0:	e015      	b.n	80044de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_RCC_OscConfig+0x270>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fd fb04 	bl	8001ac4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fd fb00 	bl	8001ac4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e17a      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d03a      	beq.n	8004560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d019      	beq.n	8004526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f2:	4b17      	ldr	r3, [pc, #92]	; (8004550 <HAL_RCC_OscConfig+0x274>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fd fae4 	bl	8001ac4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004500:	f7fd fae0 	bl	8001ac4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e15a      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_RCC_OscConfig+0x26c>)
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800451e:	2001      	movs	r0, #1
 8004520:	f000 fac6 	bl	8004ab0 <RCC_Delay>
 8004524:	e01c      	b.n	8004560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_OscConfig+0x274>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452c:	f7fd faca 	bl	8001ac4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004532:	e00f      	b.n	8004554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004534:	f7fd fac6 	bl	8001ac4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d908      	bls.n	8004554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e140      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	42420000 	.word	0x42420000
 8004550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b9e      	ldr	r3, [pc, #632]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e9      	bne.n	8004534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a6 	beq.w	80046ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b97      	ldr	r3, [pc, #604]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4b94      	ldr	r3, [pc, #592]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4a93      	ldr	r2, [pc, #588]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	61d3      	str	r3, [r2, #28]
 800458a:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b8e      	ldr	r3, [pc, #568]	; (80047d4 <HAL_RCC_OscConfig+0x4f8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a6:	4b8b      	ldr	r3, [pc, #556]	; (80047d4 <HAL_RCC_OscConfig+0x4f8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a8a      	ldr	r2, [pc, #552]	; (80047d4 <HAL_RCC_OscConfig+0x4f8>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b2:	f7fd fa87 	bl	8001ac4 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fd fa83 	bl	8001ac4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b64      	cmp	r3, #100	; 0x64
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0fd      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	4b81      	ldr	r3, [pc, #516]	; (80047d4 <HAL_RCC_OscConfig+0x4f8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x312>
 80045e0:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a7a      	ldr	r2, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	e02d      	b.n	800464a <HAL_RCC_OscConfig+0x36e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x334>
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a75      	ldr	r2, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6213      	str	r3, [r2, #32]
 800460e:	e01c      	b.n	800464a <HAL_RCC_OscConfig+0x36e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b05      	cmp	r3, #5
 8004616:	d10c      	bne.n	8004632 <HAL_RCC_OscConfig+0x356>
 8004618:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	4a6c      	ldr	r2, [pc, #432]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6213      	str	r3, [r2, #32]
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4a69      	ldr	r2, [pc, #420]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6213      	str	r3, [r2, #32]
 8004630:	e00b      	b.n	800464a <HAL_RCC_OscConfig+0x36e>
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4a66      	ldr	r2, [pc, #408]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6213      	str	r3, [r2, #32]
 800463e:	4b64      	ldr	r3, [pc, #400]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd fa37 	bl	8001ac4 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fd fa33 	bl	8001ac4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0ab      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004670:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ee      	beq.n	800465a <HAL_RCC_OscConfig+0x37e>
 800467c:	e014      	b.n	80046a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467e:	f7fd fa21 	bl	8001ac4 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fa1d 	bl	8001ac4 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e095      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469c:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ee      	bne.n	8004686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4a47      	ldr	r2, [pc, #284]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8081 	beq.w	80047c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d061      	beq.n	8004794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d146      	bne.n	8004766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <HAL_RCC_OscConfig+0x4fc>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fd f9f1 	bl	8001ac4 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fd f9ed 	bl	8001ac4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e067      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f8:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d108      	bne.n	8004720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	492d      	ldr	r1, [pc, #180]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004720:	4b2b      	ldr	r3, [pc, #172]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a19      	ldr	r1, [r3, #32]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	430b      	orrs	r3, r1
 8004732:	4927      	ldr	r1, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x4fc>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fd f9c1 	bl	8001ac4 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004746:	f7fd f9bd 	bl	8001ac4 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e037      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x46a>
 8004764:	e02f      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004766:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_RCC_OscConfig+0x4fc>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fd f9aa 	bl	8001ac4 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fd f9a6 	bl	8001ac4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e020      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x498>
 8004792:	e018      	b.n	80047c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e013      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_OscConfig+0x4f4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42420060 	.word	0x42420060

080047dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0d0      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d910      	bls.n	8004820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b67      	ldr	r3, [pc, #412]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	4965      	ldr	r1, [pc, #404]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0b8      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004838:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a58      	ldr	r2, [pc, #352]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004850:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a52      	ldr	r2, [pc, #328]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800485a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b50      	ldr	r3, [pc, #320]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	494d      	ldr	r1, [pc, #308]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d040      	beq.n	80048fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d115      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e07f      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e073      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e06b      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f023 0203 	bic.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4936      	ldr	r1, [pc, #216]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048cc:	f7fd f8fa 	bl	8001ac4 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d4:	f7fd f8f6 	bl	8001ac4 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e053      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 020c 	and.w	r2, r3, #12
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d1eb      	bne.n	80048d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d210      	bcs.n	800492c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 0207 	bic.w	r2, r3, #7
 8004912:	4922      	ldr	r1, [pc, #136]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b20      	ldr	r3, [pc, #128]	; (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e032      	b.n	8004992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4916      	ldr	r1, [pc, #88]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	490e      	ldr	r1, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800496a:	f000 f821 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 800496e:	4601      	mov	r1, r0
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	fa21 f303 	lsr.w	r3, r1, r3
 8004982:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_ClockConfig+0x1d0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd f858 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40022000 	.word	0x40022000
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08008df8 	.word	0x08008df8
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	20000010 	.word	0x20000010

080049b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b490      	push	{r4, r7}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049b8:	1d3c      	adds	r4, r7, #4
 80049ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d002      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x40>
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x46>
 80049ee:	e02d      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f2:	623b      	str	r3, [r7, #32]
      break;
 80049f4:	e02d      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	0c9b      	lsrs	r3, r3, #18
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a02:	4413      	add	r3, r2
 8004a04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d013      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	0c5b      	lsrs	r3, r3, #17
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a22:	4413      	add	r3, r2
 8004a24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a2e:	fb02 f203 	mul.w	r2, r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e004      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	623b      	str	r3, [r7, #32]
      break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a4e:	623b      	str	r3, [r7, #32]
      break;
 8004a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a52:	6a3b      	ldr	r3, [r7, #32]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc90      	pop	{r4, r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	08008de4 	.word	0x08008de4
 8004a64:	08008df4 	.word	0x08008df4
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	003d0900 	.word	0x003d0900

08004a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	2000000c 	.word	0x2000000c

08004a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a8c:	f7ff fff2 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004a90:	4601      	mov	r1, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4a03      	ldr	r2, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9e:	5cd3      	ldrb	r3, [r2, r3]
 8004aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	08008e08 	.word	0x08008e08

08004ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <RCC_Delay+0x34>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <RCC_Delay+0x38>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0a5b      	lsrs	r3, r3, #9
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004acc:	bf00      	nop
  }
  while (Delay --);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	60fa      	str	r2, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f9      	bne.n	8004acc <RCC_Delay+0x1c>
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c
 8004ae8:	10624dd3 	.word	0x10624dd3

08004aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e041      	b.n	8004b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fe94 	bl	8001840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 f8ec 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0ac      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	f200 809f 	bhi.w	8004cf4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bf1 	.word	0x08004bf1
 8004bc0:	08004cf5 	.word	0x08004cf5
 8004bc4:	08004cf5 	.word	0x08004cf5
 8004bc8:	08004cf5 	.word	0x08004cf5
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004cf5 	.word	0x08004cf5
 8004bd4:	08004cf5 	.word	0x08004cf5
 8004bd8:	08004cf5 	.word	0x08004cf5
 8004bdc:	08004c73 	.word	0x08004c73
 8004be0:	08004cf5 	.word	0x08004cf5
 8004be4:	08004cf5 	.word	0x08004cf5
 8004be8:	08004cf5 	.word	0x08004cf5
 8004bec:	08004cb3 	.word	0x08004cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f8e8 	bl	8004dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0204 	bic.w	r2, r2, #4
 8004c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6999      	ldr	r1, [r3, #24]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	619a      	str	r2, [r3, #24]
      break;
 8004c2e:	e062      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f92e 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6999      	ldr	r1, [r3, #24]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	021a      	lsls	r2, r3, #8
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	619a      	str	r2, [r3, #24]
      break;
 8004c70:	e041      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f977 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0208 	orr.w	r2, r2, #8
 8004c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0204 	bic.w	r2, r2, #4
 8004c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69d9      	ldr	r1, [r3, #28]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	61da      	str	r2, [r3, #28]
      break;
 8004cb0:	e021      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f9c1 	bl	8005040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	021a      	lsls	r2, r3, #8
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	61da      	str	r2, [r3, #28]
      break;
 8004cf2:	e000      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <TIM_Base_SetConfig+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x30>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <TIM_Base_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00b      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d007      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <TIM_Base_SetConfig+0xbc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <TIM_Base_SetConfig+0x62>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <TIM_Base_SetConfig+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d108      	bne.n	8004d7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <TIM_Base_SetConfig+0xb8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d103      	bne.n	8004db0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	615a      	str	r2, [r3, #20]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800

08004dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0302 	bic.w	r3, r3, #2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_OC1_SetConfig+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10c      	bne.n	8004e42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0308 	bic.w	r3, r3, #8
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <TIM_OC1_SetConfig+0xc8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d111      	bne.n	8004e6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <TIM_OC2_SetConfig+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <TIM_OC2_SetConfig+0xd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40012c00 	.word	0x40012c00

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <TIM_OC3_SetConfig+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10d      	bne.n	8004fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC3_SetConfig+0xd0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d113      	bne.n	8005016 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40012c00 	.word	0x40012c00

08005040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <TIM_OC4_SetConfig+0x98>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d109      	bne.n	80050b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00

080050dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e046      	b.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a16      	ldr	r2, [pc, #88]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005140:	d009      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a10      	ldr	r2, [pc, #64]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10c      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800

08005198 <__errno>:
 8005198:	4b01      	ldr	r3, [pc, #4]	; (80051a0 <__errno+0x8>)
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000018 	.word	0x20000018

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	2500      	movs	r5, #0
 80051a8:	4e0c      	ldr	r6, [pc, #48]	; (80051dc <__libc_init_array+0x38>)
 80051aa:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051ac:	1ba4      	subs	r4, r4, r6
 80051ae:	10a4      	asrs	r4, r4, #2
 80051b0:	42a5      	cmp	r5, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	f003 fd5e 	bl	8008c74 <_init>
 80051b8:	2500      	movs	r5, #0
 80051ba:	4e0a      	ldr	r6, [pc, #40]	; (80051e4 <__libc_init_array+0x40>)
 80051bc:	4c0a      	ldr	r4, [pc, #40]	; (80051e8 <__libc_init_array+0x44>)
 80051be:	1ba4      	subs	r4, r4, r6
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	42a5      	cmp	r5, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051cc:	4798      	blx	r3
 80051ce:	3501      	adds	r5, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051d6:	4798      	blx	r3
 80051d8:	3501      	adds	r5, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	080090c8 	.word	0x080090c8
 80051e0:	080090c8 	.word	0x080090c8
 80051e4:	080090c8 	.word	0x080090c8
 80051e8:	080090cc 	.word	0x080090cc

080051ec <memset>:
 80051ec:	4603      	mov	r3, r0
 80051ee:	4402      	add	r2, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	f803 1b01 	strb.w	r1, [r3], #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <__cvt>:
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005202:	461e      	mov	r6, r3
 8005204:	bfbb      	ittet	lt
 8005206:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800520a:	461e      	movlt	r6, r3
 800520c:	2300      	movge	r3, #0
 800520e:	232d      	movlt	r3, #45	; 0x2d
 8005210:	b088      	sub	sp, #32
 8005212:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005214:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005218:	f027 0720 	bic.w	r7, r7, #32
 800521c:	2f46      	cmp	r7, #70	; 0x46
 800521e:	4614      	mov	r4, r2
 8005220:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005222:	700b      	strb	r3, [r1, #0]
 8005224:	d004      	beq.n	8005230 <__cvt+0x34>
 8005226:	2f45      	cmp	r7, #69	; 0x45
 8005228:	d100      	bne.n	800522c <__cvt+0x30>
 800522a:	3501      	adds	r5, #1
 800522c:	2302      	movs	r3, #2
 800522e:	e000      	b.n	8005232 <__cvt+0x36>
 8005230:	2303      	movs	r3, #3
 8005232:	aa07      	add	r2, sp, #28
 8005234:	9204      	str	r2, [sp, #16]
 8005236:	aa06      	add	r2, sp, #24
 8005238:	e9cd a202 	strd	sl, r2, [sp, #8]
 800523c:	e9cd 3500 	strd	r3, r5, [sp]
 8005240:	4622      	mov	r2, r4
 8005242:	4633      	mov	r3, r6
 8005244:	f001 fd7c 	bl	8006d40 <_dtoa_r>
 8005248:	2f47      	cmp	r7, #71	; 0x47
 800524a:	4680      	mov	r8, r0
 800524c:	d102      	bne.n	8005254 <__cvt+0x58>
 800524e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005250:	07db      	lsls	r3, r3, #31
 8005252:	d526      	bpl.n	80052a2 <__cvt+0xa6>
 8005254:	2f46      	cmp	r7, #70	; 0x46
 8005256:	eb08 0905 	add.w	r9, r8, r5
 800525a:	d111      	bne.n	8005280 <__cvt+0x84>
 800525c:	f898 3000 	ldrb.w	r3, [r8]
 8005260:	2b30      	cmp	r3, #48	; 0x30
 8005262:	d10a      	bne.n	800527a <__cvt+0x7e>
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	4620      	mov	r0, r4
 800526a:	4631      	mov	r1, r6
 800526c:	f7fb fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005270:	b918      	cbnz	r0, 800527a <__cvt+0x7e>
 8005272:	f1c5 0501 	rsb	r5, r5, #1
 8005276:	f8ca 5000 	str.w	r5, [sl]
 800527a:	f8da 3000 	ldr.w	r3, [sl]
 800527e:	4499      	add	r9, r3
 8005280:	2200      	movs	r2, #0
 8005282:	2300      	movs	r3, #0
 8005284:	4620      	mov	r0, r4
 8005286:	4631      	mov	r1, r6
 8005288:	f7fb fb8e 	bl	80009a8 <__aeabi_dcmpeq>
 800528c:	b938      	cbnz	r0, 800529e <__cvt+0xa2>
 800528e:	2230      	movs	r2, #48	; 0x30
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	454b      	cmp	r3, r9
 8005294:	d205      	bcs.n	80052a2 <__cvt+0xa6>
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	9107      	str	r1, [sp, #28]
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e7f8      	b.n	8005290 <__cvt+0x94>
 800529e:	f8cd 901c 	str.w	r9, [sp, #28]
 80052a2:	4640      	mov	r0, r8
 80052a4:	9b07      	ldr	r3, [sp, #28]
 80052a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80052a8:	eba3 0308 	sub.w	r3, r3, r8
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	b008      	add	sp, #32
 80052b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052b4 <__exponent>:
 80052b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052b6:	2900      	cmp	r1, #0
 80052b8:	bfb4      	ite	lt
 80052ba:	232d      	movlt	r3, #45	; 0x2d
 80052bc:	232b      	movge	r3, #43	; 0x2b
 80052be:	4604      	mov	r4, r0
 80052c0:	bfb8      	it	lt
 80052c2:	4249      	neglt	r1, r1
 80052c4:	2909      	cmp	r1, #9
 80052c6:	f804 2b02 	strb.w	r2, [r4], #2
 80052ca:	7043      	strb	r3, [r0, #1]
 80052cc:	dd21      	ble.n	8005312 <__exponent+0x5e>
 80052ce:	f10d 0307 	add.w	r3, sp, #7
 80052d2:	461f      	mov	r7, r3
 80052d4:	260a      	movs	r6, #10
 80052d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80052da:	fb06 1115 	mls	r1, r6, r5, r1
 80052de:	2d09      	cmp	r5, #9
 80052e0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80052e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80052ec:	4629      	mov	r1, r5
 80052ee:	dc09      	bgt.n	8005304 <__exponent+0x50>
 80052f0:	3130      	adds	r1, #48	; 0x30
 80052f2:	3b02      	subs	r3, #2
 80052f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052f8:	42bb      	cmp	r3, r7
 80052fa:	4622      	mov	r2, r4
 80052fc:	d304      	bcc.n	8005308 <__exponent+0x54>
 80052fe:	1a10      	subs	r0, r2, r0
 8005300:	b003      	add	sp, #12
 8005302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005304:	4613      	mov	r3, r2
 8005306:	e7e6      	b.n	80052d6 <__exponent+0x22>
 8005308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800530c:	f804 2b01 	strb.w	r2, [r4], #1
 8005310:	e7f2      	b.n	80052f8 <__exponent+0x44>
 8005312:	2330      	movs	r3, #48	; 0x30
 8005314:	4419      	add	r1, r3
 8005316:	7083      	strb	r3, [r0, #2]
 8005318:	1d02      	adds	r2, r0, #4
 800531a:	70c1      	strb	r1, [r0, #3]
 800531c:	e7ef      	b.n	80052fe <__exponent+0x4a>
	...

08005320 <_printf_float>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b091      	sub	sp, #68	; 0x44
 8005326:	460c      	mov	r4, r1
 8005328:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800532a:	4693      	mov	fp, r2
 800532c:	461e      	mov	r6, r3
 800532e:	4605      	mov	r5, r0
 8005330:	f002 fde8 	bl	8007f04 <_localeconv_r>
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	9309      	str	r3, [sp, #36]	; 0x24
 800533a:	f7fa ff09 	bl	8000150 <strlen>
 800533e:	2300      	movs	r3, #0
 8005340:	930e      	str	r3, [sp, #56]	; 0x38
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	900a      	str	r0, [sp, #40]	; 0x28
 8005346:	3307      	adds	r3, #7
 8005348:	f023 0307 	bic.w	r3, r3, #7
 800534c:	f103 0208 	add.w	r2, r3, #8
 8005350:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005354:	f8d4 a000 	ldr.w	sl, [r4]
 8005358:	603a      	str	r2, [r7, #0]
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005362:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800536a:	930b      	str	r3, [sp, #44]	; 0x2c
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	4ba6      	ldr	r3, [pc, #664]	; (800560c <_printf_float+0x2ec>)
 8005372:	4638      	mov	r0, r7
 8005374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005376:	f7fb fb49 	bl	8000a0c <__aeabi_dcmpun>
 800537a:	bb68      	cbnz	r0, 80053d8 <_printf_float+0xb8>
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	4ba2      	ldr	r3, [pc, #648]	; (800560c <_printf_float+0x2ec>)
 8005382:	4638      	mov	r0, r7
 8005384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005386:	f7fb fb23 	bl	80009d0 <__aeabi_dcmple>
 800538a:	bb28      	cbnz	r0, 80053d8 <_printf_float+0xb8>
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	4638      	mov	r0, r7
 8005392:	4649      	mov	r1, r9
 8005394:	f7fb fb12 	bl	80009bc <__aeabi_dcmplt>
 8005398:	b110      	cbz	r0, 80053a0 <_printf_float+0x80>
 800539a:	232d      	movs	r3, #45	; 0x2d
 800539c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a0:	4f9b      	ldr	r7, [pc, #620]	; (8005610 <_printf_float+0x2f0>)
 80053a2:	4b9c      	ldr	r3, [pc, #624]	; (8005614 <_printf_float+0x2f4>)
 80053a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053a8:	bf98      	it	ls
 80053aa:	461f      	movls	r7, r3
 80053ac:	2303      	movs	r3, #3
 80053ae:	f04f 0900 	mov.w	r9, #0
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	f02a 0304 	bic.w	r3, sl, #4
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	9600      	str	r6, [sp, #0]
 80053bc:	465b      	mov	r3, fp
 80053be:	aa0f      	add	r2, sp, #60	; 0x3c
 80053c0:	4621      	mov	r1, r4
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f9e2 	bl	800578c <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	f040 8090 	bne.w	80054ee <_printf_float+0x1ce>
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	b011      	add	sp, #68	; 0x44
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d8:	463a      	mov	r2, r7
 80053da:	464b      	mov	r3, r9
 80053dc:	4638      	mov	r0, r7
 80053de:	4649      	mov	r1, r9
 80053e0:	f7fb fb14 	bl	8000a0c <__aeabi_dcmpun>
 80053e4:	b110      	cbz	r0, 80053ec <_printf_float+0xcc>
 80053e6:	4f8c      	ldr	r7, [pc, #560]	; (8005618 <_printf_float+0x2f8>)
 80053e8:	4b8c      	ldr	r3, [pc, #560]	; (800561c <_printf_float+0x2fc>)
 80053ea:	e7db      	b.n	80053a4 <_printf_float+0x84>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	a80d      	add	r0, sp, #52	; 0x34
 80053f6:	a90e      	add	r1, sp, #56	; 0x38
 80053f8:	d140      	bne.n	800547c <_printf_float+0x15c>
 80053fa:	2306      	movs	r3, #6
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	f04f 0c00 	mov.w	ip, #0
 8005402:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005406:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	6022      	str	r2, [r4, #0]
 800540e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	463a      	mov	r2, r7
 8005416:	464b      	mov	r3, r9
 8005418:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800541c:	4628      	mov	r0, r5
 800541e:	f7ff feed 	bl	80051fc <__cvt>
 8005422:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005426:	2b47      	cmp	r3, #71	; 0x47
 8005428:	4607      	mov	r7, r0
 800542a:	d109      	bne.n	8005440 <_printf_float+0x120>
 800542c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800542e:	1cd8      	adds	r0, r3, #3
 8005430:	db02      	blt.n	8005438 <_printf_float+0x118>
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	4293      	cmp	r3, r2
 8005436:	dd47      	ble.n	80054c8 <_printf_float+0x1a8>
 8005438:	f1a8 0802 	sub.w	r8, r8, #2
 800543c:	fa5f f888 	uxtb.w	r8, r8
 8005440:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005444:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005446:	d824      	bhi.n	8005492 <_printf_float+0x172>
 8005448:	3901      	subs	r1, #1
 800544a:	4642      	mov	r2, r8
 800544c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005450:	910d      	str	r1, [sp, #52]	; 0x34
 8005452:	f7ff ff2f 	bl	80052b4 <__exponent>
 8005456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005458:	4681      	mov	r9, r0
 800545a:	1813      	adds	r3, r2, r0
 800545c:	2a01      	cmp	r2, #1
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	dc02      	bgt.n	8005468 <_printf_float+0x148>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	07d1      	lsls	r1, r2, #31
 8005466:	d501      	bpl.n	800546c <_printf_float+0x14c>
 8005468:	3301      	adds	r3, #1
 800546a:	6123      	str	r3, [r4, #16]
 800546c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0a2      	beq.n	80053ba <_printf_float+0x9a>
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547a:	e79e      	b.n	80053ba <_printf_float+0x9a>
 800547c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005480:	f000 816e 	beq.w	8005760 <_printf_float+0x440>
 8005484:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005488:	d1b9      	bne.n	80053fe <_printf_float+0xde>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1b7      	bne.n	80053fe <_printf_float+0xde>
 800548e:	2301      	movs	r3, #1
 8005490:	e7b4      	b.n	80053fc <_printf_float+0xdc>
 8005492:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005496:	d119      	bne.n	80054cc <_printf_float+0x1ac>
 8005498:	2900      	cmp	r1, #0
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	dd0c      	ble.n	80054b8 <_printf_float+0x198>
 800549e:	6121      	str	r1, [r4, #16]
 80054a0:	b913      	cbnz	r3, 80054a8 <_printf_float+0x188>
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	07d2      	lsls	r2, r2, #31
 80054a6:	d502      	bpl.n	80054ae <_printf_float+0x18e>
 80054a8:	3301      	adds	r3, #1
 80054aa:	440b      	add	r3, r1
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054b0:	f04f 0900 	mov.w	r9, #0
 80054b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80054b6:	e7d9      	b.n	800546c <_printf_float+0x14c>
 80054b8:	b913      	cbnz	r3, 80054c0 <_printf_float+0x1a0>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d501      	bpl.n	80054c4 <_printf_float+0x1a4>
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7f3      	b.n	80054ac <_printf_float+0x18c>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e7f1      	b.n	80054ac <_printf_float+0x18c>
 80054c8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80054cc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054d0:	4293      	cmp	r3, r2
 80054d2:	db05      	blt.n	80054e0 <_printf_float+0x1c0>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	07d1      	lsls	r1, r2, #31
 80054da:	d5e8      	bpl.n	80054ae <_printf_float+0x18e>
 80054dc:	3301      	adds	r3, #1
 80054de:	e7e5      	b.n	80054ac <_printf_float+0x18c>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bfcc      	ite	gt
 80054e4:	2301      	movgt	r3, #1
 80054e6:	f1c3 0302 	rsble	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	e7de      	b.n	80054ac <_printf_float+0x18c>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	055a      	lsls	r2, r3, #21
 80054f2:	d407      	bmi.n	8005504 <_printf_float+0x1e4>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	463a      	mov	r2, r7
 80054f8:	4659      	mov	r1, fp
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b0      	blx	r6
 80054fe:	3001      	adds	r0, #1
 8005500:	d129      	bne.n	8005556 <_printf_float+0x236>
 8005502:	e764      	b.n	80053ce <_printf_float+0xae>
 8005504:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005508:	f240 80d7 	bls.w	80056ba <_printf_float+0x39a>
 800550c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	f7fb fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8005518:	b388      	cbz	r0, 800557e <_printf_float+0x25e>
 800551a:	2301      	movs	r3, #1
 800551c:	4a40      	ldr	r2, [pc, #256]	; (8005620 <_printf_float+0x300>)
 800551e:	4659      	mov	r1, fp
 8005520:	4628      	mov	r0, r5
 8005522:	47b0      	blx	r6
 8005524:	3001      	adds	r0, #1
 8005526:	f43f af52 	beq.w	80053ce <_printf_float+0xae>
 800552a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800552e:	429a      	cmp	r2, r3
 8005530:	db02      	blt.n	8005538 <_printf_float+0x218>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	07d8      	lsls	r0, r3, #31
 8005536:	d50e      	bpl.n	8005556 <_printf_float+0x236>
 8005538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800553c:	4659      	mov	r1, fp
 800553e:	4628      	mov	r0, r5
 8005540:	47b0      	blx	r6
 8005542:	3001      	adds	r0, #1
 8005544:	f43f af43 	beq.w	80053ce <_printf_float+0xae>
 8005548:	2700      	movs	r7, #0
 800554a:	f104 081a 	add.w	r8, r4, #26
 800554e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005550:	3b01      	subs	r3, #1
 8005552:	42bb      	cmp	r3, r7
 8005554:	dc09      	bgt.n	800556a <_printf_float+0x24a>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	079f      	lsls	r7, r3, #30
 800555a:	f100 80fd 	bmi.w	8005758 <_printf_float+0x438>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005562:	4298      	cmp	r0, r3
 8005564:	bfb8      	it	lt
 8005566:	4618      	movlt	r0, r3
 8005568:	e733      	b.n	80053d2 <_printf_float+0xb2>
 800556a:	2301      	movs	r3, #1
 800556c:	4642      	mov	r2, r8
 800556e:	4659      	mov	r1, fp
 8005570:	4628      	mov	r0, r5
 8005572:	47b0      	blx	r6
 8005574:	3001      	adds	r0, #1
 8005576:	f43f af2a 	beq.w	80053ce <_printf_float+0xae>
 800557a:	3701      	adds	r7, #1
 800557c:	e7e7      	b.n	800554e <_printf_float+0x22e>
 800557e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	dc2b      	bgt.n	80055dc <_printf_float+0x2bc>
 8005584:	2301      	movs	r3, #1
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <_printf_float+0x300>)
 8005588:	4659      	mov	r1, fp
 800558a:	4628      	mov	r0, r5
 800558c:	47b0      	blx	r6
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af1d 	beq.w	80053ce <_printf_float+0xae>
 8005594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005596:	b923      	cbnz	r3, 80055a2 <_printf_float+0x282>
 8005598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800559a:	b913      	cbnz	r3, 80055a2 <_printf_float+0x282>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	07d9      	lsls	r1, r3, #31
 80055a0:	d5d9      	bpl.n	8005556 <_printf_float+0x236>
 80055a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a6:	4659      	mov	r1, fp
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f af0e 	beq.w	80053ce <_printf_float+0xae>
 80055b2:	f04f 0800 	mov.w	r8, #0
 80055b6:	f104 091a 	add.w	r9, r4, #26
 80055ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055bc:	425b      	negs	r3, r3
 80055be:	4543      	cmp	r3, r8
 80055c0:	dc01      	bgt.n	80055c6 <_printf_float+0x2a6>
 80055c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c4:	e797      	b.n	80054f6 <_printf_float+0x1d6>
 80055c6:	2301      	movs	r3, #1
 80055c8:	464a      	mov	r2, r9
 80055ca:	4659      	mov	r1, fp
 80055cc:	4628      	mov	r0, r5
 80055ce:	47b0      	blx	r6
 80055d0:	3001      	adds	r0, #1
 80055d2:	f43f aefc 	beq.w	80053ce <_printf_float+0xae>
 80055d6:	f108 0801 	add.w	r8, r8, #1
 80055da:	e7ee      	b.n	80055ba <_printf_float+0x29a>
 80055dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bfa8      	it	ge
 80055e4:	461a      	movge	r2, r3
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	4690      	mov	r8, r2
 80055ea:	dd07      	ble.n	80055fc <_printf_float+0x2dc>
 80055ec:	4613      	mov	r3, r2
 80055ee:	4659      	mov	r1, fp
 80055f0:	463a      	mov	r2, r7
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b0      	blx	r6
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f aee9 	beq.w	80053ce <_printf_float+0xae>
 80055fc:	f104 031a 	add.w	r3, r4, #26
 8005600:	f04f 0a00 	mov.w	sl, #0
 8005604:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005608:	930b      	str	r3, [sp, #44]	; 0x2c
 800560a:	e015      	b.n	8005638 <_printf_float+0x318>
 800560c:	7fefffff 	.word	0x7fefffff
 8005610:	08008e14 	.word	0x08008e14
 8005614:	08008e10 	.word	0x08008e10
 8005618:	08008e1c 	.word	0x08008e1c
 800561c:	08008e18 	.word	0x08008e18
 8005620:	08008e20 	.word	0x08008e20
 8005624:	2301      	movs	r3, #1
 8005626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005628:	4659      	mov	r1, fp
 800562a:	4628      	mov	r0, r5
 800562c:	47b0      	blx	r6
 800562e:	3001      	adds	r0, #1
 8005630:	f43f aecd 	beq.w	80053ce <_printf_float+0xae>
 8005634:	f10a 0a01 	add.w	sl, sl, #1
 8005638:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800563c:	eba9 0308 	sub.w	r3, r9, r8
 8005640:	4553      	cmp	r3, sl
 8005642:	dcef      	bgt.n	8005624 <_printf_float+0x304>
 8005644:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005648:	429a      	cmp	r2, r3
 800564a:	444f      	add	r7, r9
 800564c:	db14      	blt.n	8005678 <_printf_float+0x358>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	07da      	lsls	r2, r3, #31
 8005652:	d411      	bmi.n	8005678 <_printf_float+0x358>
 8005654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005656:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005658:	eba3 0209 	sub.w	r2, r3, r9
 800565c:	eba3 0901 	sub.w	r9, r3, r1
 8005660:	4591      	cmp	r9, r2
 8005662:	bfa8      	it	ge
 8005664:	4691      	movge	r9, r2
 8005666:	f1b9 0f00 	cmp.w	r9, #0
 800566a:	dc0d      	bgt.n	8005688 <_printf_float+0x368>
 800566c:	2700      	movs	r7, #0
 800566e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005672:	f104 081a 	add.w	r8, r4, #26
 8005676:	e018      	b.n	80056aa <_printf_float+0x38a>
 8005678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800567c:	4659      	mov	r1, fp
 800567e:	4628      	mov	r0, r5
 8005680:	47b0      	blx	r6
 8005682:	3001      	adds	r0, #1
 8005684:	d1e6      	bne.n	8005654 <_printf_float+0x334>
 8005686:	e6a2      	b.n	80053ce <_printf_float+0xae>
 8005688:	464b      	mov	r3, r9
 800568a:	463a      	mov	r2, r7
 800568c:	4659      	mov	r1, fp
 800568e:	4628      	mov	r0, r5
 8005690:	47b0      	blx	r6
 8005692:	3001      	adds	r0, #1
 8005694:	d1ea      	bne.n	800566c <_printf_float+0x34c>
 8005696:	e69a      	b.n	80053ce <_printf_float+0xae>
 8005698:	2301      	movs	r3, #1
 800569a:	4642      	mov	r2, r8
 800569c:	4659      	mov	r1, fp
 800569e:	4628      	mov	r0, r5
 80056a0:	47b0      	blx	r6
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f ae93 	beq.w	80053ce <_printf_float+0xae>
 80056a8:	3701      	adds	r7, #1
 80056aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	eba3 0309 	sub.w	r3, r3, r9
 80056b4:	42bb      	cmp	r3, r7
 80056b6:	dcef      	bgt.n	8005698 <_printf_float+0x378>
 80056b8:	e74d      	b.n	8005556 <_printf_float+0x236>
 80056ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056bc:	2a01      	cmp	r2, #1
 80056be:	dc01      	bgt.n	80056c4 <_printf_float+0x3a4>
 80056c0:	07db      	lsls	r3, r3, #31
 80056c2:	d538      	bpl.n	8005736 <_printf_float+0x416>
 80056c4:	2301      	movs	r3, #1
 80056c6:	463a      	mov	r2, r7
 80056c8:	4659      	mov	r1, fp
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b0      	blx	r6
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f ae7d 	beq.w	80053ce <_printf_float+0xae>
 80056d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056d8:	4659      	mov	r1, fp
 80056da:	4628      	mov	r0, r5
 80056dc:	47b0      	blx	r6
 80056de:	3001      	adds	r0, #1
 80056e0:	f107 0701 	add.w	r7, r7, #1
 80056e4:	f43f ae73 	beq.w	80053ce <_printf_float+0xae>
 80056e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ee:	2200      	movs	r2, #0
 80056f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80056f4:	2300      	movs	r3, #0
 80056f6:	f7fb f957 	bl	80009a8 <__aeabi_dcmpeq>
 80056fa:	b9c0      	cbnz	r0, 800572e <_printf_float+0x40e>
 80056fc:	4643      	mov	r3, r8
 80056fe:	463a      	mov	r2, r7
 8005700:	4659      	mov	r1, fp
 8005702:	4628      	mov	r0, r5
 8005704:	47b0      	blx	r6
 8005706:	3001      	adds	r0, #1
 8005708:	d10d      	bne.n	8005726 <_printf_float+0x406>
 800570a:	e660      	b.n	80053ce <_printf_float+0xae>
 800570c:	2301      	movs	r3, #1
 800570e:	4642      	mov	r2, r8
 8005710:	4659      	mov	r1, fp
 8005712:	4628      	mov	r0, r5
 8005714:	47b0      	blx	r6
 8005716:	3001      	adds	r0, #1
 8005718:	f43f ae59 	beq.w	80053ce <_printf_float+0xae>
 800571c:	3701      	adds	r7, #1
 800571e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005720:	3b01      	subs	r3, #1
 8005722:	42bb      	cmp	r3, r7
 8005724:	dcf2      	bgt.n	800570c <_printf_float+0x3ec>
 8005726:	464b      	mov	r3, r9
 8005728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800572c:	e6e4      	b.n	80054f8 <_printf_float+0x1d8>
 800572e:	2700      	movs	r7, #0
 8005730:	f104 081a 	add.w	r8, r4, #26
 8005734:	e7f3      	b.n	800571e <_printf_float+0x3fe>
 8005736:	2301      	movs	r3, #1
 8005738:	e7e1      	b.n	80056fe <_printf_float+0x3de>
 800573a:	2301      	movs	r3, #1
 800573c:	4642      	mov	r2, r8
 800573e:	4659      	mov	r1, fp
 8005740:	4628      	mov	r0, r5
 8005742:	47b0      	blx	r6
 8005744:	3001      	adds	r0, #1
 8005746:	f43f ae42 	beq.w	80053ce <_printf_float+0xae>
 800574a:	3701      	adds	r7, #1
 800574c:	68e3      	ldr	r3, [r4, #12]
 800574e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	42bb      	cmp	r3, r7
 8005754:	dcf1      	bgt.n	800573a <_printf_float+0x41a>
 8005756:	e702      	b.n	800555e <_printf_float+0x23e>
 8005758:	2700      	movs	r7, #0
 800575a:	f104 0819 	add.w	r8, r4, #25
 800575e:	e7f5      	b.n	800574c <_printf_float+0x42c>
 8005760:	2b00      	cmp	r3, #0
 8005762:	f43f ae94 	beq.w	800548e <_printf_float+0x16e>
 8005766:	f04f 0c00 	mov.w	ip, #0
 800576a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800576e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005772:	6022      	str	r2, [r4, #0]
 8005774:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005778:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	463a      	mov	r2, r7
 8005780:	464b      	mov	r3, r9
 8005782:	4628      	mov	r0, r5
 8005784:	f7ff fd3a 	bl	80051fc <__cvt>
 8005788:	4607      	mov	r7, r0
 800578a:	e64f      	b.n	800542c <_printf_float+0x10c>

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4691      	mov	r9, r2
 8005792:	461f      	mov	r7, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	4606      	mov	r6, r0
 800579a:	4293      	cmp	r3, r2
 800579c:	bfb8      	it	lt
 800579e:	4613      	movlt	r3, r2
 80057a0:	f8c9 3000 	str.w	r3, [r9]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a8:	460c      	mov	r4, r1
 80057aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057ae:	b112      	cbz	r2, 80057b6 <_printf_common+0x2a>
 80057b0:	3301      	adds	r3, #1
 80057b2:	f8c9 3000 	str.w	r3, [r9]
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	0699      	lsls	r1, r3, #26
 80057ba:	bf42      	ittt	mi
 80057bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057c0:	3302      	addmi	r3, #2
 80057c2:	f8c9 3000 	strmi.w	r3, [r9]
 80057c6:	6825      	ldr	r5, [r4, #0]
 80057c8:	f015 0506 	ands.w	r5, r5, #6
 80057cc:	d107      	bne.n	80057de <_printf_common+0x52>
 80057ce:	f104 0a19 	add.w	sl, r4, #25
 80057d2:	68e3      	ldr	r3, [r4, #12]
 80057d4:	f8d9 2000 	ldr.w	r2, [r9]
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	42ab      	cmp	r3, r5
 80057dc:	dc29      	bgt.n	8005832 <_printf_common+0xa6>
 80057de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	3300      	adds	r3, #0
 80057e6:	bf18      	it	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	0692      	lsls	r2, r2, #26
 80057ec:	d42e      	bmi.n	800584c <_printf_common+0xc0>
 80057ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057f2:	4639      	mov	r1, r7
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	3001      	adds	r0, #1
 80057fa:	d021      	beq.n	8005840 <_printf_common+0xb4>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	68e5      	ldr	r5, [r4, #12]
 8005800:	f003 0306 	and.w	r3, r3, #6
 8005804:	2b04      	cmp	r3, #4
 8005806:	bf18      	it	ne
 8005808:	2500      	movne	r5, #0
 800580a:	f8d9 2000 	ldr.w	r2, [r9]
 800580e:	f04f 0900 	mov.w	r9, #0
 8005812:	bf08      	it	eq
 8005814:	1aad      	subeq	r5, r5, r2
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	6922      	ldr	r2, [r4, #16]
 800581a:	bf08      	it	eq
 800581c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005820:	4293      	cmp	r3, r2
 8005822:	bfc4      	itt	gt
 8005824:	1a9b      	subgt	r3, r3, r2
 8005826:	18ed      	addgt	r5, r5, r3
 8005828:	341a      	adds	r4, #26
 800582a:	454d      	cmp	r5, r9
 800582c:	d11a      	bne.n	8005864 <_printf_common+0xd8>
 800582e:	2000      	movs	r0, #0
 8005830:	e008      	b.n	8005844 <_printf_common+0xb8>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4639      	mov	r1, r7
 8005838:	4630      	mov	r0, r6
 800583a:	47c0      	blx	r8
 800583c:	3001      	adds	r0, #1
 800583e:	d103      	bne.n	8005848 <_printf_common+0xbc>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	3501      	adds	r5, #1
 800584a:	e7c2      	b.n	80057d2 <_printf_common+0x46>
 800584c:	2030      	movs	r0, #48	; 0x30
 800584e:	18e1      	adds	r1, r4, r3
 8005850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800585a:	4422      	add	r2, r4
 800585c:	3302      	adds	r3, #2
 800585e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005862:	e7c4      	b.n	80057ee <_printf_common+0x62>
 8005864:	2301      	movs	r3, #1
 8005866:	4622      	mov	r2, r4
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	47c0      	blx	r8
 800586e:	3001      	adds	r0, #1
 8005870:	d0e6      	beq.n	8005840 <_printf_common+0xb4>
 8005872:	f109 0901 	add.w	r9, r9, #1
 8005876:	e7d8      	b.n	800582a <_printf_common+0x9e>

08005878 <_printf_i>:
 8005878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800587c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005880:	460c      	mov	r4, r1
 8005882:	7e09      	ldrb	r1, [r1, #24]
 8005884:	b085      	sub	sp, #20
 8005886:	296e      	cmp	r1, #110	; 0x6e
 8005888:	4617      	mov	r7, r2
 800588a:	4606      	mov	r6, r0
 800588c:	4698      	mov	r8, r3
 800588e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005890:	f000 80b3 	beq.w	80059fa <_printf_i+0x182>
 8005894:	d822      	bhi.n	80058dc <_printf_i+0x64>
 8005896:	2963      	cmp	r1, #99	; 0x63
 8005898:	d036      	beq.n	8005908 <_printf_i+0x90>
 800589a:	d80a      	bhi.n	80058b2 <_printf_i+0x3a>
 800589c:	2900      	cmp	r1, #0
 800589e:	f000 80b9 	beq.w	8005a14 <_printf_i+0x19c>
 80058a2:	2958      	cmp	r1, #88	; 0x58
 80058a4:	f000 8083 	beq.w	80059ae <_printf_i+0x136>
 80058a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058b0:	e032      	b.n	8005918 <_printf_i+0xa0>
 80058b2:	2964      	cmp	r1, #100	; 0x64
 80058b4:	d001      	beq.n	80058ba <_printf_i+0x42>
 80058b6:	2969      	cmp	r1, #105	; 0x69
 80058b8:	d1f6      	bne.n	80058a8 <_printf_i+0x30>
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	6813      	ldr	r3, [r2, #0]
 80058be:	0605      	lsls	r5, r0, #24
 80058c0:	f103 0104 	add.w	r1, r3, #4
 80058c4:	d52a      	bpl.n	800591c <_printf_i+0xa4>
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da03      	bge.n	80058d6 <_printf_i+0x5e>
 80058ce:	222d      	movs	r2, #45	; 0x2d
 80058d0:	425b      	negs	r3, r3
 80058d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058d6:	486f      	ldr	r0, [pc, #444]	; (8005a94 <_printf_i+0x21c>)
 80058d8:	220a      	movs	r2, #10
 80058da:	e039      	b.n	8005950 <_printf_i+0xd8>
 80058dc:	2973      	cmp	r1, #115	; 0x73
 80058de:	f000 809d 	beq.w	8005a1c <_printf_i+0x1a4>
 80058e2:	d808      	bhi.n	80058f6 <_printf_i+0x7e>
 80058e4:	296f      	cmp	r1, #111	; 0x6f
 80058e6:	d020      	beq.n	800592a <_printf_i+0xb2>
 80058e8:	2970      	cmp	r1, #112	; 0x70
 80058ea:	d1dd      	bne.n	80058a8 <_printf_i+0x30>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	e003      	b.n	80058fe <_printf_i+0x86>
 80058f6:	2975      	cmp	r1, #117	; 0x75
 80058f8:	d017      	beq.n	800592a <_printf_i+0xb2>
 80058fa:	2978      	cmp	r1, #120	; 0x78
 80058fc:	d1d4      	bne.n	80058a8 <_printf_i+0x30>
 80058fe:	2378      	movs	r3, #120	; 0x78
 8005900:	4865      	ldr	r0, [pc, #404]	; (8005a98 <_printf_i+0x220>)
 8005902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005906:	e055      	b.n	80059b4 <_printf_i+0x13c>
 8005908:	6813      	ldr	r3, [r2, #0]
 800590a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800590e:	1d19      	adds	r1, r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6011      	str	r1, [r2, #0]
 8005914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005918:	2301      	movs	r3, #1
 800591a:	e08c      	b.n	8005a36 <_printf_i+0x1be>
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005922:	6011      	str	r1, [r2, #0]
 8005924:	bf18      	it	ne
 8005926:	b21b      	sxthne	r3, r3
 8005928:	e7cf      	b.n	80058ca <_printf_i+0x52>
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	6825      	ldr	r5, [r4, #0]
 800592e:	1d18      	adds	r0, r3, #4
 8005930:	6010      	str	r0, [r2, #0]
 8005932:	0628      	lsls	r0, r5, #24
 8005934:	d501      	bpl.n	800593a <_printf_i+0xc2>
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	e002      	b.n	8005940 <_printf_i+0xc8>
 800593a:	0668      	lsls	r0, r5, #25
 800593c:	d5fb      	bpl.n	8005936 <_printf_i+0xbe>
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	296f      	cmp	r1, #111	; 0x6f
 8005942:	bf14      	ite	ne
 8005944:	220a      	movne	r2, #10
 8005946:	2208      	moveq	r2, #8
 8005948:	4852      	ldr	r0, [pc, #328]	; (8005a94 <_printf_i+0x21c>)
 800594a:	2100      	movs	r1, #0
 800594c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005950:	6865      	ldr	r5, [r4, #4]
 8005952:	2d00      	cmp	r5, #0
 8005954:	60a5      	str	r5, [r4, #8]
 8005956:	f2c0 8095 	blt.w	8005a84 <_printf_i+0x20c>
 800595a:	6821      	ldr	r1, [r4, #0]
 800595c:	f021 0104 	bic.w	r1, r1, #4
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d13d      	bne.n	80059e2 <_printf_i+0x16a>
 8005966:	2d00      	cmp	r5, #0
 8005968:	f040 808e 	bne.w	8005a88 <_printf_i+0x210>
 800596c:	4665      	mov	r5, ip
 800596e:	2a08      	cmp	r2, #8
 8005970:	d10b      	bne.n	800598a <_printf_i+0x112>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	07db      	lsls	r3, r3, #31
 8005976:	d508      	bpl.n	800598a <_printf_i+0x112>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	bfde      	ittt	le
 8005980:	2330      	movle	r3, #48	; 0x30
 8005982:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005986:	f105 35ff 	addle.w	r5, r5, #4294967295
 800598a:	ebac 0305 	sub.w	r3, ip, r5
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	f8cd 8000 	str.w	r8, [sp]
 8005994:	463b      	mov	r3, r7
 8005996:	aa03      	add	r2, sp, #12
 8005998:	4621      	mov	r1, r4
 800599a:	4630      	mov	r0, r6
 800599c:	f7ff fef6 	bl	800578c <_printf_common>
 80059a0:	3001      	adds	r0, #1
 80059a2:	d14d      	bne.n	8005a40 <_printf_i+0x1c8>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b005      	add	sp, #20
 80059aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ae:	4839      	ldr	r0, [pc, #228]	; (8005a94 <_printf_i+0x21c>)
 80059b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059b4:	6813      	ldr	r3, [r2, #0]
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	1d1d      	adds	r5, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6015      	str	r5, [r2, #0]
 80059be:	060a      	lsls	r2, r1, #24
 80059c0:	d50b      	bpl.n	80059da <_printf_i+0x162>
 80059c2:	07ca      	lsls	r2, r1, #31
 80059c4:	bf44      	itt	mi
 80059c6:	f041 0120 	orrmi.w	r1, r1, #32
 80059ca:	6021      	strmi	r1, [r4, #0]
 80059cc:	b91b      	cbnz	r3, 80059d6 <_printf_i+0x15e>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	f022 0220 	bic.w	r2, r2, #32
 80059d4:	6022      	str	r2, [r4, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	e7b7      	b.n	800594a <_printf_i+0xd2>
 80059da:	064d      	lsls	r5, r1, #25
 80059dc:	bf48      	it	mi
 80059de:	b29b      	uxthmi	r3, r3
 80059e0:	e7ef      	b.n	80059c2 <_printf_i+0x14a>
 80059e2:	4665      	mov	r5, ip
 80059e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059e8:	fb02 3311 	mls	r3, r2, r1, r3
 80059ec:	5cc3      	ldrb	r3, [r0, r3]
 80059ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059f2:	460b      	mov	r3, r1
 80059f4:	2900      	cmp	r1, #0
 80059f6:	d1f5      	bne.n	80059e4 <_printf_i+0x16c>
 80059f8:	e7b9      	b.n	800596e <_printf_i+0xf6>
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	6825      	ldr	r5, [r4, #0]
 80059fe:	1d18      	adds	r0, r3, #4
 8005a00:	6961      	ldr	r1, [r4, #20]
 8005a02:	6010      	str	r0, [r2, #0]
 8005a04:	0628      	lsls	r0, r5, #24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	d501      	bpl.n	8005a0e <_printf_i+0x196>
 8005a0a:	6019      	str	r1, [r3, #0]
 8005a0c:	e002      	b.n	8005a14 <_printf_i+0x19c>
 8005a0e:	066a      	lsls	r2, r5, #25
 8005a10:	d5fb      	bpl.n	8005a0a <_printf_i+0x192>
 8005a12:	8019      	strh	r1, [r3, #0]
 8005a14:	2300      	movs	r3, #0
 8005a16:	4665      	mov	r5, ip
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	e7b9      	b.n	8005990 <_printf_i+0x118>
 8005a1c:	6813      	ldr	r3, [r2, #0]
 8005a1e:	1d19      	adds	r1, r3, #4
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	681d      	ldr	r5, [r3, #0]
 8005a24:	6862      	ldr	r2, [r4, #4]
 8005a26:	2100      	movs	r1, #0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f002 fa93 	bl	8007f54 <memchr>
 8005a2e:	b108      	cbz	r0, 8005a34 <_printf_i+0x1bc>
 8005a30:	1b40      	subs	r0, r0, r5
 8005a32:	6060      	str	r0, [r4, #4]
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	6123      	str	r3, [r4, #16]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a3e:	e7a7      	b.n	8005990 <_printf_i+0x118>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	462a      	mov	r2, r5
 8005a44:	4639      	mov	r1, r7
 8005a46:	4630      	mov	r0, r6
 8005a48:	47c0      	blx	r8
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d0aa      	beq.n	80059a4 <_printf_i+0x12c>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	079b      	lsls	r3, r3, #30
 8005a52:	d413      	bmi.n	8005a7c <_printf_i+0x204>
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	4298      	cmp	r0, r3
 8005a5a:	bfb8      	it	lt
 8005a5c:	4618      	movlt	r0, r3
 8005a5e:	e7a3      	b.n	80059a8 <_printf_i+0x130>
 8005a60:	2301      	movs	r3, #1
 8005a62:	464a      	mov	r2, r9
 8005a64:	4639      	mov	r1, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d09a      	beq.n	80059a4 <_printf_i+0x12c>
 8005a6e:	3501      	adds	r5, #1
 8005a70:	68e3      	ldr	r3, [r4, #12]
 8005a72:	9a03      	ldr	r2, [sp, #12]
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	42ab      	cmp	r3, r5
 8005a78:	dcf2      	bgt.n	8005a60 <_printf_i+0x1e8>
 8005a7a:	e7eb      	b.n	8005a54 <_printf_i+0x1dc>
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	f104 0919 	add.w	r9, r4, #25
 8005a82:	e7f5      	b.n	8005a70 <_printf_i+0x1f8>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ac      	bne.n	80059e2 <_printf_i+0x16a>
 8005a88:	7803      	ldrb	r3, [r0, #0]
 8005a8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a92:	e76c      	b.n	800596e <_printf_i+0xf6>
 8005a94:	08008e22 	.word	0x08008e22
 8005a98:	08008e33 	.word	0x08008e33

08005a9c <_scanf_float>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	469a      	mov	sl, r3
 8005aa2:	688b      	ldr	r3, [r1, #8]
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005aac:	bf88      	it	hi
 8005aae:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	bf85      	ittet	hi
 8005ab6:	189b      	addhi	r3, r3, r2
 8005ab8:	9301      	strhi	r3, [sp, #4]
 8005aba:	2300      	movls	r3, #0
 8005abc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ac0:	4688      	mov	r8, r1
 8005ac2:	f04f 0b00 	mov.w	fp, #0
 8005ac6:	bf8c      	ite	hi
 8005ac8:	608b      	strhi	r3, [r1, #8]
 8005aca:	9301      	strls	r3, [sp, #4]
 8005acc:	680b      	ldr	r3, [r1, #0]
 8005ace:	4607      	mov	r7, r0
 8005ad0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ad4:	f848 3b1c 	str.w	r3, [r8], #28
 8005ad8:	460c      	mov	r4, r1
 8005ada:	4645      	mov	r5, r8
 8005adc:	465a      	mov	r2, fp
 8005ade:	46d9      	mov	r9, fp
 8005ae0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005ae4:	f8cd b008 	str.w	fp, [sp, #8]
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	b181      	cbz	r1, 8005b0e <_scanf_float+0x72>
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b49      	cmp	r3, #73	; 0x49
 8005af2:	d071      	beq.n	8005bd8 <_scanf_float+0x13c>
 8005af4:	d84d      	bhi.n	8005b92 <_scanf_float+0xf6>
 8005af6:	2b39      	cmp	r3, #57	; 0x39
 8005af8:	d840      	bhi.n	8005b7c <_scanf_float+0xe0>
 8005afa:	2b31      	cmp	r3, #49	; 0x31
 8005afc:	f080 8088 	bcs.w	8005c10 <_scanf_float+0x174>
 8005b00:	2b2d      	cmp	r3, #45	; 0x2d
 8005b02:	f000 8090 	beq.w	8005c26 <_scanf_float+0x18a>
 8005b06:	d815      	bhi.n	8005b34 <_scanf_float+0x98>
 8005b08:	2b2b      	cmp	r3, #43	; 0x2b
 8005b0a:	f000 808c 	beq.w	8005c26 <_scanf_float+0x18a>
 8005b0e:	f1b9 0f00 	cmp.w	r9, #0
 8005b12:	d003      	beq.n	8005b1c <_scanf_float+0x80>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	2a01      	cmp	r2, #1
 8005b20:	f200 80ea 	bhi.w	8005cf8 <_scanf_float+0x25c>
 8005b24:	4545      	cmp	r5, r8
 8005b26:	f200 80dc 	bhi.w	8005ce2 <_scanf_float+0x246>
 8005b2a:	2601      	movs	r6, #1
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	b007      	add	sp, #28
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	2b2e      	cmp	r3, #46	; 0x2e
 8005b36:	f000 809f 	beq.w	8005c78 <_scanf_float+0x1dc>
 8005b3a:	2b30      	cmp	r3, #48	; 0x30
 8005b3c:	d1e7      	bne.n	8005b0e <_scanf_float+0x72>
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b44:	d064      	beq.n	8005c10 <_scanf_float+0x174>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005b4c:	6020      	str	r0, [r4, #0]
 8005b4e:	f109 0901 	add.w	r9, r9, #1
 8005b52:	b11b      	cbz	r3, 8005b5c <_scanf_float+0xc0>
 8005b54:	3b01      	subs	r3, #1
 8005b56:	3101      	adds	r1, #1
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	60a1      	str	r1, [r4, #8]
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	60a3      	str	r3, [r4, #8]
 8005b62:	6923      	ldr	r3, [r4, #16]
 8005b64:	3301      	adds	r3, #1
 8005b66:	6123      	str	r3, [r4, #16]
 8005b68:	6873      	ldr	r3, [r6, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	6073      	str	r3, [r6, #4]
 8005b70:	f340 80ac 	ble.w	8005ccc <_scanf_float+0x230>
 8005b74:	6833      	ldr	r3, [r6, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	e7b5      	b.n	8005ae8 <_scanf_float+0x4c>
 8005b7c:	2b45      	cmp	r3, #69	; 0x45
 8005b7e:	f000 8085 	beq.w	8005c8c <_scanf_float+0x1f0>
 8005b82:	2b46      	cmp	r3, #70	; 0x46
 8005b84:	d06a      	beq.n	8005c5c <_scanf_float+0x1c0>
 8005b86:	2b41      	cmp	r3, #65	; 0x41
 8005b88:	d1c1      	bne.n	8005b0e <_scanf_float+0x72>
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	d1bf      	bne.n	8005b0e <_scanf_float+0x72>
 8005b8e:	2202      	movs	r2, #2
 8005b90:	e046      	b.n	8005c20 <_scanf_float+0x184>
 8005b92:	2b65      	cmp	r3, #101	; 0x65
 8005b94:	d07a      	beq.n	8005c8c <_scanf_float+0x1f0>
 8005b96:	d818      	bhi.n	8005bca <_scanf_float+0x12e>
 8005b98:	2b54      	cmp	r3, #84	; 0x54
 8005b9a:	d066      	beq.n	8005c6a <_scanf_float+0x1ce>
 8005b9c:	d811      	bhi.n	8005bc2 <_scanf_float+0x126>
 8005b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8005ba0:	d1b5      	bne.n	8005b0e <_scanf_float+0x72>
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d146      	bne.n	8005c34 <_scanf_float+0x198>
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	d145      	bne.n	8005c38 <_scanf_float+0x19c>
 8005bac:	6821      	ldr	r1, [r4, #0]
 8005bae:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005bb2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005bb6:	d13f      	bne.n	8005c38 <_scanf_float+0x19c>
 8005bb8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005bbc:	6021      	str	r1, [r4, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	e02e      	b.n	8005c20 <_scanf_float+0x184>
 8005bc2:	2b59      	cmp	r3, #89	; 0x59
 8005bc4:	d01e      	beq.n	8005c04 <_scanf_float+0x168>
 8005bc6:	2b61      	cmp	r3, #97	; 0x61
 8005bc8:	e7de      	b.n	8005b88 <_scanf_float+0xec>
 8005bca:	2b6e      	cmp	r3, #110	; 0x6e
 8005bcc:	d0e9      	beq.n	8005ba2 <_scanf_float+0x106>
 8005bce:	d815      	bhi.n	8005bfc <_scanf_float+0x160>
 8005bd0:	2b66      	cmp	r3, #102	; 0x66
 8005bd2:	d043      	beq.n	8005c5c <_scanf_float+0x1c0>
 8005bd4:	2b69      	cmp	r3, #105	; 0x69
 8005bd6:	d19a      	bne.n	8005b0e <_scanf_float+0x72>
 8005bd8:	f1bb 0f00 	cmp.w	fp, #0
 8005bdc:	d138      	bne.n	8005c50 <_scanf_float+0x1b4>
 8005bde:	f1b9 0f00 	cmp.w	r9, #0
 8005be2:	d197      	bne.n	8005b14 <_scanf_float+0x78>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005bea:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005bee:	d195      	bne.n	8005b1c <_scanf_float+0x80>
 8005bf0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005bf4:	6021      	str	r1, [r4, #0]
 8005bf6:	f04f 0b01 	mov.w	fp, #1
 8005bfa:	e011      	b.n	8005c20 <_scanf_float+0x184>
 8005bfc:	2b74      	cmp	r3, #116	; 0x74
 8005bfe:	d034      	beq.n	8005c6a <_scanf_float+0x1ce>
 8005c00:	2b79      	cmp	r3, #121	; 0x79
 8005c02:	d184      	bne.n	8005b0e <_scanf_float+0x72>
 8005c04:	f1bb 0f07 	cmp.w	fp, #7
 8005c08:	d181      	bne.n	8005b0e <_scanf_float+0x72>
 8005c0a:	f04f 0b08 	mov.w	fp, #8
 8005c0e:	e007      	b.n	8005c20 <_scanf_float+0x184>
 8005c10:	eb12 0f0b 	cmn.w	r2, fp
 8005c14:	f47f af7b 	bne.w	8005b0e <_scanf_float+0x72>
 8005c18:	6821      	ldr	r1, [r4, #0]
 8005c1a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005c1e:	6021      	str	r1, [r4, #0]
 8005c20:	702b      	strb	r3, [r5, #0]
 8005c22:	3501      	adds	r5, #1
 8005c24:	e79a      	b.n	8005b5c <_scanf_float+0xc0>
 8005c26:	6821      	ldr	r1, [r4, #0]
 8005c28:	0608      	lsls	r0, r1, #24
 8005c2a:	f57f af70 	bpl.w	8005b0e <_scanf_float+0x72>
 8005c2e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c32:	e7f4      	b.n	8005c1e <_scanf_float+0x182>
 8005c34:	2a02      	cmp	r2, #2
 8005c36:	d047      	beq.n	8005cc8 <_scanf_float+0x22c>
 8005c38:	f1bb 0f01 	cmp.w	fp, #1
 8005c3c:	d003      	beq.n	8005c46 <_scanf_float+0x1aa>
 8005c3e:	f1bb 0f04 	cmp.w	fp, #4
 8005c42:	f47f af64 	bne.w	8005b0e <_scanf_float+0x72>
 8005c46:	f10b 0b01 	add.w	fp, fp, #1
 8005c4a:	fa5f fb8b 	uxtb.w	fp, fp
 8005c4e:	e7e7      	b.n	8005c20 <_scanf_float+0x184>
 8005c50:	f1bb 0f03 	cmp.w	fp, #3
 8005c54:	d0f7      	beq.n	8005c46 <_scanf_float+0x1aa>
 8005c56:	f1bb 0f05 	cmp.w	fp, #5
 8005c5a:	e7f2      	b.n	8005c42 <_scanf_float+0x1a6>
 8005c5c:	f1bb 0f02 	cmp.w	fp, #2
 8005c60:	f47f af55 	bne.w	8005b0e <_scanf_float+0x72>
 8005c64:	f04f 0b03 	mov.w	fp, #3
 8005c68:	e7da      	b.n	8005c20 <_scanf_float+0x184>
 8005c6a:	f1bb 0f06 	cmp.w	fp, #6
 8005c6e:	f47f af4e 	bne.w	8005b0e <_scanf_float+0x72>
 8005c72:	f04f 0b07 	mov.w	fp, #7
 8005c76:	e7d3      	b.n	8005c20 <_scanf_float+0x184>
 8005c78:	6821      	ldr	r1, [r4, #0]
 8005c7a:	0588      	lsls	r0, r1, #22
 8005c7c:	f57f af47 	bpl.w	8005b0e <_scanf_float+0x72>
 8005c80:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005c84:	6021      	str	r1, [r4, #0]
 8005c86:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c8a:	e7c9      	b.n	8005c20 <_scanf_float+0x184>
 8005c8c:	6821      	ldr	r1, [r4, #0]
 8005c8e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005c92:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005c96:	d006      	beq.n	8005ca6 <_scanf_float+0x20a>
 8005c98:	0548      	lsls	r0, r1, #21
 8005c9a:	f57f af38 	bpl.w	8005b0e <_scanf_float+0x72>
 8005c9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ca2:	f43f af3b 	beq.w	8005b1c <_scanf_float+0x80>
 8005ca6:	0588      	lsls	r0, r1, #22
 8005ca8:	bf58      	it	pl
 8005caa:	9802      	ldrpl	r0, [sp, #8]
 8005cac:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005cb0:	bf58      	it	pl
 8005cb2:	eba9 0000 	subpl.w	r0, r9, r0
 8005cb6:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005cba:	bf58      	it	pl
 8005cbc:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005cc0:	6021      	str	r1, [r4, #0]
 8005cc2:	f04f 0900 	mov.w	r9, #0
 8005cc6:	e7ab      	b.n	8005c20 <_scanf_float+0x184>
 8005cc8:	2203      	movs	r2, #3
 8005cca:	e7a9      	b.n	8005c20 <_scanf_float+0x184>
 8005ccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	9205      	str	r2, [sp, #20]
 8005cd6:	4798      	blx	r3
 8005cd8:	9a05      	ldr	r2, [sp, #20]
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	f43f af04 	beq.w	8005ae8 <_scanf_float+0x4c>
 8005ce0:	e715      	b.n	8005b0e <_scanf_float+0x72>
 8005ce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cec:	4638      	mov	r0, r7
 8005cee:	4798      	blx	r3
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	e715      	b.n	8005b24 <_scanf_float+0x88>
 8005cf8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d80a      	bhi.n	8005d16 <_scanf_float+0x27a>
 8005d00:	f1bb 0f02 	cmp.w	fp, #2
 8005d04:	d967      	bls.n	8005dd6 <_scanf_float+0x33a>
 8005d06:	f1ab 0b03 	sub.w	fp, fp, #3
 8005d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8005d0e:	eba5 0b0b 	sub.w	fp, r5, fp
 8005d12:	455d      	cmp	r5, fp
 8005d14:	d14a      	bne.n	8005dac <_scanf_float+0x310>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	05da      	lsls	r2, r3, #23
 8005d1a:	d51f      	bpl.n	8005d5c <_scanf_float+0x2c0>
 8005d1c:	055b      	lsls	r3, r3, #21
 8005d1e:	d467      	bmi.n	8005df0 <_scanf_float+0x354>
 8005d20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	2965      	cmp	r1, #101	; 0x65
 8005d28:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d2c:	f105 3bff 	add.w	fp, r5, #4294967295
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	d00d      	beq.n	8005d50 <_scanf_float+0x2b4>
 8005d34:	2945      	cmp	r1, #69	; 0x45
 8005d36:	d00b      	beq.n	8005d50 <_scanf_float+0x2b4>
 8005d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4638      	mov	r0, r7
 8005d40:	4798      	blx	r3
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f1a5 0b02 	sub.w	fp, r5, #2
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d54:	4632      	mov	r2, r6
 8005d56:	4638      	mov	r0, r7
 8005d58:	4798      	blx	r3
 8005d5a:	465d      	mov	r5, fp
 8005d5c:	6826      	ldr	r6, [r4, #0]
 8005d5e:	f016 0610 	ands.w	r6, r6, #16
 8005d62:	d176      	bne.n	8005e52 <_scanf_float+0x3b6>
 8005d64:	702e      	strb	r6, [r5, #0]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d70:	d141      	bne.n	8005df6 <_scanf_float+0x35a>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	eba9 0303 	sub.w	r3, r9, r3
 8005d78:	425a      	negs	r2, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d148      	bne.n	8005e10 <_scanf_float+0x374>
 8005d7e:	4641      	mov	r1, r8
 8005d80:	2200      	movs	r2, #0
 8005d82:	4638      	mov	r0, r7
 8005d84:	f000 feb0 	bl	8006ae8 <_strtod_r>
 8005d88:	6825      	ldr	r5, [r4, #0]
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	f015 0f02 	tst.w	r5, #2
 8005d90:	4689      	mov	r9, r1
 8005d92:	f8da 3000 	ldr.w	r3, [sl]
 8005d96:	d046      	beq.n	8005e26 <_scanf_float+0x38a>
 8005d98:	1d1a      	adds	r2, r3, #4
 8005d9a:	f8ca 2000 	str.w	r2, [sl]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	e9c3 8900 	strd	r8, r9, [r3]
 8005da4:	68e3      	ldr	r3, [r4, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60e3      	str	r3, [r4, #12]
 8005daa:	e6bf      	b.n	8005b2c <_scanf_float+0x90>
 8005dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005db0:	4632      	mov	r2, r6
 8005db2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005db6:	4638      	mov	r0, r7
 8005db8:	4798      	blx	r3
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	e7a7      	b.n	8005d12 <_scanf_float+0x276>
 8005dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005dcc:	4638      	mov	r0, r7
 8005dce:	4798      	blx	r3
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	4545      	cmp	r5, r8
 8005dd8:	d8f3      	bhi.n	8005dc2 <_scanf_float+0x326>
 8005dda:	e6a6      	b.n	8005b2a <_scanf_float+0x8e>
 8005ddc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005de0:	4632      	mov	r2, r6
 8005de2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005de6:	4638      	mov	r0, r7
 8005de8:	4798      	blx	r3
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	4545      	cmp	r5, r8
 8005df2:	d8f3      	bhi.n	8005ddc <_scanf_float+0x340>
 8005df4:	e699      	b.n	8005b2a <_scanf_float+0x8e>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0c0      	beq.n	8005d7e <_scanf_float+0x2e2>
 8005dfc:	9904      	ldr	r1, [sp, #16]
 8005dfe:	230a      	movs	r3, #10
 8005e00:	4632      	mov	r2, r6
 8005e02:	3101      	adds	r1, #1
 8005e04:	4638      	mov	r0, r7
 8005e06:	f000 fefb 	bl	8006c00 <_strtol_r>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	9d04      	ldr	r5, [sp, #16]
 8005e0e:	1ac2      	subs	r2, r0, r3
 8005e10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e14:	429d      	cmp	r5, r3
 8005e16:	bf28      	it	cs
 8005e18:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005e1c:	490e      	ldr	r1, [pc, #56]	; (8005e58 <_scanf_float+0x3bc>)
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 f820 	bl	8005e64 <siprintf>
 8005e24:	e7ab      	b.n	8005d7e <_scanf_float+0x2e2>
 8005e26:	1d1f      	adds	r7, r3, #4
 8005e28:	f015 0504 	ands.w	r5, r5, #4
 8005e2c:	f8ca 7000 	str.w	r7, [sl]
 8005e30:	d1b5      	bne.n	8005d9e <_scanf_float+0x302>
 8005e32:	681f      	ldr	r7, [r3, #0]
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	f7fa fde8 	bl	8000a0c <__aeabi_dcmpun>
 8005e3c:	b120      	cbz	r0, 8005e48 <_scanf_float+0x3ac>
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f80c 	bl	8005e5c <nanf>
 8005e44:	6038      	str	r0, [r7, #0]
 8005e46:	e7ad      	b.n	8005da4 <_scanf_float+0x308>
 8005e48:	4640      	mov	r0, r8
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	f7fa fe3c 	bl	8000ac8 <__aeabi_d2f>
 8005e50:	e7f8      	b.n	8005e44 <_scanf_float+0x3a8>
 8005e52:	2600      	movs	r6, #0
 8005e54:	e66a      	b.n	8005b2c <_scanf_float+0x90>
 8005e56:	bf00      	nop
 8005e58:	08008e44 	.word	0x08008e44

08005e5c <nanf>:
 8005e5c:	4800      	ldr	r0, [pc, #0]	; (8005e60 <nanf+0x4>)
 8005e5e:	4770      	bx	lr
 8005e60:	7fc00000 	.word	0x7fc00000

08005e64 <siprintf>:
 8005e64:	b40e      	push	{r1, r2, r3}
 8005e66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e6a:	b500      	push	{lr}
 8005e6c:	b09c      	sub	sp, #112	; 0x70
 8005e6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e70:	9002      	str	r0, [sp, #8]
 8005e72:	9006      	str	r0, [sp, #24]
 8005e74:	9107      	str	r1, [sp, #28]
 8005e76:	9104      	str	r1, [sp, #16]
 8005e78:	4808      	ldr	r0, [pc, #32]	; (8005e9c <siprintf+0x38>)
 8005e7a:	4909      	ldr	r1, [pc, #36]	; (8005ea0 <siprintf+0x3c>)
 8005e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e80:	9105      	str	r1, [sp, #20]
 8005e82:	6800      	ldr	r0, [r0, #0]
 8005e84:	a902      	add	r1, sp, #8
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	f002 fd84 	bl	8008994 <_svfiprintf_r>
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	b01c      	add	sp, #112	; 0x70
 8005e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e98:	b003      	add	sp, #12
 8005e9a:	4770      	bx	lr
 8005e9c:	20000018 	.word	0x20000018
 8005ea0:	ffff0208 	.word	0xffff0208

08005ea4 <sulp>:
 8005ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	460f      	mov	r7, r1
 8005eaa:	4690      	mov	r8, r2
 8005eac:	f002 fb36 	bl	800851c <__ulp>
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	460d      	mov	r5, r1
 8005eb4:	f1b8 0f00 	cmp.w	r8, #0
 8005eb8:	d011      	beq.n	8005ede <sulp+0x3a>
 8005eba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005ebe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	dd0b      	ble.n	8005ede <sulp+0x3a>
 8005ec6:	2400      	movs	r4, #0
 8005ec8:	051b      	lsls	r3, r3, #20
 8005eca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ece:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	f7fa faff 	bl	80004d8 <__aeabi_dmul>
 8005eda:	4604      	mov	r4, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005ee8 <_strtod_l>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	461f      	mov	r7, r3
 8005eee:	2300      	movs	r3, #0
 8005ef0:	b0a1      	sub	sp, #132	; 0x84
 8005ef2:	4683      	mov	fp, r0
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005efa:	931c      	str	r3, [sp, #112]	; 0x70
 8005efc:	f001 ffff 	bl	8007efe <__localeconv_l>
 8005f00:	4680      	mov	r8, r0
 8005f02:	6800      	ldr	r0, [r0, #0]
 8005f04:	f7fa f924 	bl	8000150 <strlen>
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	f04f 0a00 	mov.w	sl, #0
 8005f12:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	2a0d      	cmp	r2, #13
 8005f1a:	d832      	bhi.n	8005f82 <_strtod_l+0x9a>
 8005f1c:	2a09      	cmp	r2, #9
 8005f1e:	d236      	bcs.n	8005f8e <_strtod_l+0xa6>
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	d03e      	beq.n	8005fa2 <_strtod_l+0xba>
 8005f24:	2300      	movs	r3, #0
 8005f26:	930d      	str	r3, [sp, #52]	; 0x34
 8005f28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005f2a:	782b      	ldrb	r3, [r5, #0]
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	f040 80ac 	bne.w	800608a <_strtod_l+0x1a2>
 8005f32:	786b      	ldrb	r3, [r5, #1]
 8005f34:	2b58      	cmp	r3, #88	; 0x58
 8005f36:	d001      	beq.n	8005f3c <_strtod_l+0x54>
 8005f38:	2b78      	cmp	r3, #120	; 0x78
 8005f3a:	d167      	bne.n	800600c <_strtod_l+0x124>
 8005f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f3e:	9702      	str	r7, [sp, #8]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	ab1c      	add	r3, sp, #112	; 0x70
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4a89      	ldr	r2, [pc, #548]	; (800616c <_strtod_l+0x284>)
 8005f48:	ab1d      	add	r3, sp, #116	; 0x74
 8005f4a:	a91b      	add	r1, sp, #108	; 0x6c
 8005f4c:	4658      	mov	r0, fp
 8005f4e:	f001 fcfb 	bl	8007948 <__gethex>
 8005f52:	f010 0407 	ands.w	r4, r0, #7
 8005f56:	4606      	mov	r6, r0
 8005f58:	d005      	beq.n	8005f66 <_strtod_l+0x7e>
 8005f5a:	2c06      	cmp	r4, #6
 8005f5c:	d12b      	bne.n	8005fb6 <_strtod_l+0xce>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	3501      	adds	r5, #1
 8005f62:	951b      	str	r5, [sp, #108]	; 0x6c
 8005f64:	930d      	str	r3, [sp, #52]	; 0x34
 8005f66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 85a6 	bne.w	8006aba <_strtod_l+0xbd2>
 8005f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f70:	b1e3      	cbz	r3, 8005fac <_strtod_l+0xc4>
 8005f72:	464a      	mov	r2, r9
 8005f74:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	b021      	add	sp, #132	; 0x84
 8005f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f82:	2a2b      	cmp	r2, #43	; 0x2b
 8005f84:	d015      	beq.n	8005fb2 <_strtod_l+0xca>
 8005f86:	2a2d      	cmp	r2, #45	; 0x2d
 8005f88:	d004      	beq.n	8005f94 <_strtod_l+0xac>
 8005f8a:	2a20      	cmp	r2, #32
 8005f8c:	d1ca      	bne.n	8005f24 <_strtod_l+0x3c>
 8005f8e:	3301      	adds	r3, #1
 8005f90:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f92:	e7bf      	b.n	8005f14 <_strtod_l+0x2c>
 8005f94:	2201      	movs	r2, #1
 8005f96:	920d      	str	r2, [sp, #52]	; 0x34
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1c2      	bne.n	8005f28 <_strtod_l+0x40>
 8005fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fa4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 8585 	bne.w	8006ab6 <_strtod_l+0xbce>
 8005fac:	464a      	mov	r2, r9
 8005fae:	4653      	mov	r3, sl
 8005fb0:	e7e2      	b.n	8005f78 <_strtod_l+0x90>
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	e7ef      	b.n	8005f96 <_strtod_l+0xae>
 8005fb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fb8:	b13a      	cbz	r2, 8005fca <_strtod_l+0xe2>
 8005fba:	2135      	movs	r1, #53	; 0x35
 8005fbc:	a81e      	add	r0, sp, #120	; 0x78
 8005fbe:	f002 fba0 	bl	8008702 <__copybits>
 8005fc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fc4:	4658      	mov	r0, fp
 8005fc6:	f002 f812 	bl	8007fee <_Bfree>
 8005fca:	3c01      	subs	r4, #1
 8005fcc:	2c04      	cmp	r4, #4
 8005fce:	d806      	bhi.n	8005fde <_strtod_l+0xf6>
 8005fd0:	e8df f004 	tbb	[pc, r4]
 8005fd4:	1714030a 	.word	0x1714030a
 8005fd8:	0a          	.byte	0x0a
 8005fd9:	00          	.byte	0x00
 8005fda:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005fde:	0731      	lsls	r1, r6, #28
 8005fe0:	d5c1      	bpl.n	8005f66 <_strtod_l+0x7e>
 8005fe2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005fe6:	e7be      	b.n	8005f66 <_strtod_l+0x7e>
 8005fe8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005fea:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005fee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005ff2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ff6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005ffa:	e7f0      	b.n	8005fde <_strtod_l+0xf6>
 8005ffc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006170 <_strtod_l+0x288>
 8006000:	e7ed      	b.n	8005fde <_strtod_l+0xf6>
 8006002:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006006:	f04f 39ff 	mov.w	r9, #4294967295
 800600a:	e7e8      	b.n	8005fde <_strtod_l+0xf6>
 800600c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	921b      	str	r2, [sp, #108]	; 0x6c
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b30      	cmp	r3, #48	; 0x30
 8006016:	d0f9      	beq.n	800600c <_strtod_l+0x124>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0a4      	beq.n	8005f66 <_strtod_l+0x7e>
 800601c:	2301      	movs	r3, #1
 800601e:	2500      	movs	r5, #0
 8006020:	220a      	movs	r2, #10
 8006022:	9307      	str	r3, [sp, #28]
 8006024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006026:	9506      	str	r5, [sp, #24]
 8006028:	9308      	str	r3, [sp, #32]
 800602a:	9504      	str	r5, [sp, #16]
 800602c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800602e:	7807      	ldrb	r7, [r0, #0]
 8006030:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006034:	b2d9      	uxtb	r1, r3
 8006036:	2909      	cmp	r1, #9
 8006038:	d929      	bls.n	800608e <_strtod_l+0x1a6>
 800603a:	4622      	mov	r2, r4
 800603c:	f8d8 1000 	ldr.w	r1, [r8]
 8006040:	f002 fdb0 	bl	8008ba4 <strncmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	d031      	beq.n	80060ac <_strtod_l+0x1c4>
 8006048:	2000      	movs	r0, #0
 800604a:	463b      	mov	r3, r7
 800604c:	4602      	mov	r2, r0
 800604e:	9c04      	ldr	r4, [sp, #16]
 8006050:	9005      	str	r0, [sp, #20]
 8006052:	2b65      	cmp	r3, #101	; 0x65
 8006054:	d001      	beq.n	800605a <_strtod_l+0x172>
 8006056:	2b45      	cmp	r3, #69	; 0x45
 8006058:	d114      	bne.n	8006084 <_strtod_l+0x19c>
 800605a:	b924      	cbnz	r4, 8006066 <_strtod_l+0x17e>
 800605c:	b910      	cbnz	r0, 8006064 <_strtod_l+0x17c>
 800605e:	9b07      	ldr	r3, [sp, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d09e      	beq.n	8005fa2 <_strtod_l+0xba>
 8006064:	2400      	movs	r4, #0
 8006066:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006068:	1c73      	adds	r3, r6, #1
 800606a:	931b      	str	r3, [sp, #108]	; 0x6c
 800606c:	7873      	ldrb	r3, [r6, #1]
 800606e:	2b2b      	cmp	r3, #43	; 0x2b
 8006070:	d078      	beq.n	8006164 <_strtod_l+0x27c>
 8006072:	2b2d      	cmp	r3, #45	; 0x2d
 8006074:	d070      	beq.n	8006158 <_strtod_l+0x270>
 8006076:	f04f 0c00 	mov.w	ip, #0
 800607a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800607e:	2f09      	cmp	r7, #9
 8006080:	d97c      	bls.n	800617c <_strtod_l+0x294>
 8006082:	961b      	str	r6, [sp, #108]	; 0x6c
 8006084:	f04f 0e00 	mov.w	lr, #0
 8006088:	e09a      	b.n	80061c0 <_strtod_l+0x2d8>
 800608a:	2300      	movs	r3, #0
 800608c:	e7c7      	b.n	800601e <_strtod_l+0x136>
 800608e:	9904      	ldr	r1, [sp, #16]
 8006090:	3001      	adds	r0, #1
 8006092:	2908      	cmp	r1, #8
 8006094:	bfd7      	itett	le
 8006096:	9906      	ldrle	r1, [sp, #24]
 8006098:	fb02 3505 	mlagt	r5, r2, r5, r3
 800609c:	fb02 3301 	mlale	r3, r2, r1, r3
 80060a0:	9306      	strle	r3, [sp, #24]
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80060a6:	3301      	adds	r3, #1
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	e7bf      	b.n	800602c <_strtod_l+0x144>
 80060ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060ae:	191a      	adds	r2, r3, r4
 80060b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80060b2:	9a04      	ldr	r2, [sp, #16]
 80060b4:	5d1b      	ldrb	r3, [r3, r4]
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	d037      	beq.n	800612a <_strtod_l+0x242>
 80060ba:	4602      	mov	r2, r0
 80060bc:	9c04      	ldr	r4, [sp, #16]
 80060be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80060c2:	2909      	cmp	r1, #9
 80060c4:	d913      	bls.n	80060ee <_strtod_l+0x206>
 80060c6:	2101      	movs	r1, #1
 80060c8:	9105      	str	r1, [sp, #20]
 80060ca:	e7c2      	b.n	8006052 <_strtod_l+0x16a>
 80060cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060ce:	3001      	adds	r0, #1
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d0f8      	beq.n	80060cc <_strtod_l+0x1e4>
 80060da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80060de:	2a08      	cmp	r2, #8
 80060e0:	f200 84f0 	bhi.w	8006ac4 <_strtod_l+0xbdc>
 80060e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80060e6:	9208      	str	r2, [sp, #32]
 80060e8:	4602      	mov	r2, r0
 80060ea:	2000      	movs	r0, #0
 80060ec:	4604      	mov	r4, r0
 80060ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80060f2:	f100 0101 	add.w	r1, r0, #1
 80060f6:	d012      	beq.n	800611e <_strtod_l+0x236>
 80060f8:	440a      	add	r2, r1
 80060fa:	270a      	movs	r7, #10
 80060fc:	4621      	mov	r1, r4
 80060fe:	eb00 0c04 	add.w	ip, r0, r4
 8006102:	458c      	cmp	ip, r1
 8006104:	d113      	bne.n	800612e <_strtod_l+0x246>
 8006106:	1821      	adds	r1, r4, r0
 8006108:	2908      	cmp	r1, #8
 800610a:	f104 0401 	add.w	r4, r4, #1
 800610e:	4404      	add	r4, r0
 8006110:	dc19      	bgt.n	8006146 <_strtod_l+0x25e>
 8006112:	210a      	movs	r1, #10
 8006114:	9b06      	ldr	r3, [sp, #24]
 8006116:	fb01 e303 	mla	r3, r1, r3, lr
 800611a:	9306      	str	r3, [sp, #24]
 800611c:	2100      	movs	r1, #0
 800611e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006120:	1c58      	adds	r0, r3, #1
 8006122:	901b      	str	r0, [sp, #108]	; 0x6c
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	4608      	mov	r0, r1
 8006128:	e7c9      	b.n	80060be <_strtod_l+0x1d6>
 800612a:	9804      	ldr	r0, [sp, #16]
 800612c:	e7d3      	b.n	80060d6 <_strtod_l+0x1ee>
 800612e:	2908      	cmp	r1, #8
 8006130:	f101 0101 	add.w	r1, r1, #1
 8006134:	dc03      	bgt.n	800613e <_strtod_l+0x256>
 8006136:	9b06      	ldr	r3, [sp, #24]
 8006138:	437b      	muls	r3, r7
 800613a:	9306      	str	r3, [sp, #24]
 800613c:	e7e1      	b.n	8006102 <_strtod_l+0x21a>
 800613e:	2910      	cmp	r1, #16
 8006140:	bfd8      	it	le
 8006142:	437d      	mulle	r5, r7
 8006144:	e7dd      	b.n	8006102 <_strtod_l+0x21a>
 8006146:	2c10      	cmp	r4, #16
 8006148:	bfdc      	itt	le
 800614a:	210a      	movle	r1, #10
 800614c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006150:	e7e4      	b.n	800611c <_strtod_l+0x234>
 8006152:	2301      	movs	r3, #1
 8006154:	9305      	str	r3, [sp, #20]
 8006156:	e781      	b.n	800605c <_strtod_l+0x174>
 8006158:	f04f 0c01 	mov.w	ip, #1
 800615c:	1cb3      	adds	r3, r6, #2
 800615e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006160:	78b3      	ldrb	r3, [r6, #2]
 8006162:	e78a      	b.n	800607a <_strtod_l+0x192>
 8006164:	f04f 0c00 	mov.w	ip, #0
 8006168:	e7f8      	b.n	800615c <_strtod_l+0x274>
 800616a:	bf00      	nop
 800616c:	08008e4c 	.word	0x08008e4c
 8006170:	7ff00000 	.word	0x7ff00000
 8006174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006176:	1c5f      	adds	r7, r3, #1
 8006178:	971b      	str	r7, [sp, #108]	; 0x6c
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b30      	cmp	r3, #48	; 0x30
 800617e:	d0f9      	beq.n	8006174 <_strtod_l+0x28c>
 8006180:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006184:	2f08      	cmp	r7, #8
 8006186:	f63f af7d 	bhi.w	8006084 <_strtod_l+0x19c>
 800618a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800618e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006190:	9309      	str	r3, [sp, #36]	; 0x24
 8006192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006194:	1c5f      	adds	r7, r3, #1
 8006196:	971b      	str	r7, [sp, #108]	; 0x6c
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800619e:	f1b8 0f09 	cmp.w	r8, #9
 80061a2:	d937      	bls.n	8006214 <_strtod_l+0x32c>
 80061a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061a6:	1a7f      	subs	r7, r7, r1
 80061a8:	2f08      	cmp	r7, #8
 80061aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80061ae:	dc37      	bgt.n	8006220 <_strtod_l+0x338>
 80061b0:	45be      	cmp	lr, r7
 80061b2:	bfa8      	it	ge
 80061b4:	46be      	movge	lr, r7
 80061b6:	f1bc 0f00 	cmp.w	ip, #0
 80061ba:	d001      	beq.n	80061c0 <_strtod_l+0x2d8>
 80061bc:	f1ce 0e00 	rsb	lr, lr, #0
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d151      	bne.n	8006268 <_strtod_l+0x380>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f47f aece 	bne.w	8005f66 <_strtod_l+0x7e>
 80061ca:	9a07      	ldr	r2, [sp, #28]
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	f47f aeca 	bne.w	8005f66 <_strtod_l+0x7e>
 80061d2:	9a05      	ldr	r2, [sp, #20]
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	f47f aee4 	bne.w	8005fa2 <_strtod_l+0xba>
 80061da:	2b4e      	cmp	r3, #78	; 0x4e
 80061dc:	d027      	beq.n	800622e <_strtod_l+0x346>
 80061de:	dc21      	bgt.n	8006224 <_strtod_l+0x33c>
 80061e0:	2b49      	cmp	r3, #73	; 0x49
 80061e2:	f47f aede 	bne.w	8005fa2 <_strtod_l+0xba>
 80061e6:	49a4      	ldr	r1, [pc, #656]	; (8006478 <_strtod_l+0x590>)
 80061e8:	a81b      	add	r0, sp, #108	; 0x6c
 80061ea:	f001 fde1 	bl	8007db0 <__match>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f aed7 	beq.w	8005fa2 <_strtod_l+0xba>
 80061f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061f6:	49a1      	ldr	r1, [pc, #644]	; (800647c <_strtod_l+0x594>)
 80061f8:	3b01      	subs	r3, #1
 80061fa:	a81b      	add	r0, sp, #108	; 0x6c
 80061fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80061fe:	f001 fdd7 	bl	8007db0 <__match>
 8006202:	b910      	cbnz	r0, 800620a <_strtod_l+0x322>
 8006204:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006206:	3301      	adds	r3, #1
 8006208:	931b      	str	r3, [sp, #108]	; 0x6c
 800620a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006490 <_strtod_l+0x5a8>
 800620e:	f04f 0900 	mov.w	r9, #0
 8006212:	e6a8      	b.n	8005f66 <_strtod_l+0x7e>
 8006214:	210a      	movs	r1, #10
 8006216:	fb01 3e0e 	mla	lr, r1, lr, r3
 800621a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800621e:	e7b8      	b.n	8006192 <_strtod_l+0x2aa>
 8006220:	46be      	mov	lr, r7
 8006222:	e7c8      	b.n	80061b6 <_strtod_l+0x2ce>
 8006224:	2b69      	cmp	r3, #105	; 0x69
 8006226:	d0de      	beq.n	80061e6 <_strtod_l+0x2fe>
 8006228:	2b6e      	cmp	r3, #110	; 0x6e
 800622a:	f47f aeba 	bne.w	8005fa2 <_strtod_l+0xba>
 800622e:	4994      	ldr	r1, [pc, #592]	; (8006480 <_strtod_l+0x598>)
 8006230:	a81b      	add	r0, sp, #108	; 0x6c
 8006232:	f001 fdbd 	bl	8007db0 <__match>
 8006236:	2800      	cmp	r0, #0
 8006238:	f43f aeb3 	beq.w	8005fa2 <_strtod_l+0xba>
 800623c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b28      	cmp	r3, #40	; 0x28
 8006242:	d10e      	bne.n	8006262 <_strtod_l+0x37a>
 8006244:	aa1e      	add	r2, sp, #120	; 0x78
 8006246:	498f      	ldr	r1, [pc, #572]	; (8006484 <_strtod_l+0x59c>)
 8006248:	a81b      	add	r0, sp, #108	; 0x6c
 800624a:	f001 fdc5 	bl	8007dd8 <__hexnan>
 800624e:	2805      	cmp	r0, #5
 8006250:	d107      	bne.n	8006262 <_strtod_l+0x37a>
 8006252:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006254:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006258:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800625c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006260:	e681      	b.n	8005f66 <_strtod_l+0x7e>
 8006262:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006498 <_strtod_l+0x5b0>
 8006266:	e7d2      	b.n	800620e <_strtod_l+0x326>
 8006268:	ebae 0302 	sub.w	r3, lr, r2
 800626c:	9307      	str	r3, [sp, #28]
 800626e:	9b04      	ldr	r3, [sp, #16]
 8006270:	9806      	ldr	r0, [sp, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bf08      	it	eq
 8006276:	4623      	moveq	r3, r4
 8006278:	2c10      	cmp	r4, #16
 800627a:	9304      	str	r3, [sp, #16]
 800627c:	46a0      	mov	r8, r4
 800627e:	bfa8      	it	ge
 8006280:	f04f 0810 	movge.w	r8, #16
 8006284:	f7fa f8ae 	bl	80003e4 <__aeabi_ui2d>
 8006288:	2c09      	cmp	r4, #9
 800628a:	4681      	mov	r9, r0
 800628c:	468a      	mov	sl, r1
 800628e:	dc13      	bgt.n	80062b8 <_strtod_l+0x3d0>
 8006290:	9b07      	ldr	r3, [sp, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f43f ae67 	beq.w	8005f66 <_strtod_l+0x7e>
 8006298:	9b07      	ldr	r3, [sp, #28]
 800629a:	dd7e      	ble.n	800639a <_strtod_l+0x4b2>
 800629c:	2b16      	cmp	r3, #22
 800629e:	dc65      	bgt.n	800636c <_strtod_l+0x484>
 80062a0:	4a79      	ldr	r2, [pc, #484]	; (8006488 <_strtod_l+0x5a0>)
 80062a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80062a6:	464a      	mov	r2, r9
 80062a8:	e9de 0100 	ldrd	r0, r1, [lr]
 80062ac:	4653      	mov	r3, sl
 80062ae:	f7fa f913 	bl	80004d8 <__aeabi_dmul>
 80062b2:	4681      	mov	r9, r0
 80062b4:	468a      	mov	sl, r1
 80062b6:	e656      	b.n	8005f66 <_strtod_l+0x7e>
 80062b8:	4b73      	ldr	r3, [pc, #460]	; (8006488 <_strtod_l+0x5a0>)
 80062ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80062be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062c2:	f7fa f909 	bl	80004d8 <__aeabi_dmul>
 80062c6:	4606      	mov	r6, r0
 80062c8:	4628      	mov	r0, r5
 80062ca:	460f      	mov	r7, r1
 80062cc:	f7fa f88a 	bl	80003e4 <__aeabi_ui2d>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7f9 ff48 	bl	800016c <__adddf3>
 80062dc:	2c0f      	cmp	r4, #15
 80062de:	4681      	mov	r9, r0
 80062e0:	468a      	mov	sl, r1
 80062e2:	ddd5      	ble.n	8006290 <_strtod_l+0x3a8>
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	eba4 0808 	sub.w	r8, r4, r8
 80062ea:	4498      	add	r8, r3
 80062ec:	f1b8 0f00 	cmp.w	r8, #0
 80062f0:	f340 809a 	ble.w	8006428 <_strtod_l+0x540>
 80062f4:	f018 030f 	ands.w	r3, r8, #15
 80062f8:	d00a      	beq.n	8006310 <_strtod_l+0x428>
 80062fa:	4963      	ldr	r1, [pc, #396]	; (8006488 <_strtod_l+0x5a0>)
 80062fc:	464a      	mov	r2, r9
 80062fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006306:	4653      	mov	r3, sl
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	4681      	mov	r9, r0
 800630e:	468a      	mov	sl, r1
 8006310:	f038 080f 	bics.w	r8, r8, #15
 8006314:	d077      	beq.n	8006406 <_strtod_l+0x51e>
 8006316:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800631a:	dd4b      	ble.n	80063b4 <_strtod_l+0x4cc>
 800631c:	f04f 0800 	mov.w	r8, #0
 8006320:	f8cd 8010 	str.w	r8, [sp, #16]
 8006324:	f8cd 8020 	str.w	r8, [sp, #32]
 8006328:	f8cd 8018 	str.w	r8, [sp, #24]
 800632c:	2322      	movs	r3, #34	; 0x22
 800632e:	f04f 0900 	mov.w	r9, #0
 8006332:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006490 <_strtod_l+0x5a8>
 8006336:	f8cb 3000 	str.w	r3, [fp]
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f43f ae12 	beq.w	8005f66 <_strtod_l+0x7e>
 8006342:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006344:	4658      	mov	r0, fp
 8006346:	f001 fe52 	bl	8007fee <_Bfree>
 800634a:	9906      	ldr	r1, [sp, #24]
 800634c:	4658      	mov	r0, fp
 800634e:	f001 fe4e 	bl	8007fee <_Bfree>
 8006352:	9904      	ldr	r1, [sp, #16]
 8006354:	4658      	mov	r0, fp
 8006356:	f001 fe4a 	bl	8007fee <_Bfree>
 800635a:	9908      	ldr	r1, [sp, #32]
 800635c:	4658      	mov	r0, fp
 800635e:	f001 fe46 	bl	8007fee <_Bfree>
 8006362:	4641      	mov	r1, r8
 8006364:	4658      	mov	r0, fp
 8006366:	f001 fe42 	bl	8007fee <_Bfree>
 800636a:	e5fc      	b.n	8005f66 <_strtod_l+0x7e>
 800636c:	9a07      	ldr	r2, [sp, #28]
 800636e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006372:	4293      	cmp	r3, r2
 8006374:	dbb6      	blt.n	80062e4 <_strtod_l+0x3fc>
 8006376:	4d44      	ldr	r5, [pc, #272]	; (8006488 <_strtod_l+0x5a0>)
 8006378:	f1c4 040f 	rsb	r4, r4, #15
 800637c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006380:	464a      	mov	r2, r9
 8006382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006386:	4653      	mov	r3, sl
 8006388:	f7fa f8a6 	bl	80004d8 <__aeabi_dmul>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	1b1c      	subs	r4, r3, r4
 8006390:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006398:	e789      	b.n	80062ae <_strtod_l+0x3c6>
 800639a:	f113 0f16 	cmn.w	r3, #22
 800639e:	dba1      	blt.n	80062e4 <_strtod_l+0x3fc>
 80063a0:	4a39      	ldr	r2, [pc, #228]	; (8006488 <_strtod_l+0x5a0>)
 80063a2:	4648      	mov	r0, r9
 80063a4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80063a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80063ac:	4651      	mov	r1, sl
 80063ae:	f7fa f9bd 	bl	800072c <__aeabi_ddiv>
 80063b2:	e77e      	b.n	80062b2 <_strtod_l+0x3ca>
 80063b4:	2300      	movs	r3, #0
 80063b6:	4648      	mov	r0, r9
 80063b8:	4651      	mov	r1, sl
 80063ba:	461d      	mov	r5, r3
 80063bc:	4e33      	ldr	r6, [pc, #204]	; (800648c <_strtod_l+0x5a4>)
 80063be:	ea4f 1828 	mov.w	r8, r8, asr #4
 80063c2:	f1b8 0f01 	cmp.w	r8, #1
 80063c6:	dc21      	bgt.n	800640c <_strtod_l+0x524>
 80063c8:	b10b      	cbz	r3, 80063ce <_strtod_l+0x4e6>
 80063ca:	4681      	mov	r9, r0
 80063cc:	468a      	mov	sl, r1
 80063ce:	4b2f      	ldr	r3, [pc, #188]	; (800648c <_strtod_l+0x5a4>)
 80063d0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80063d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063d8:	464a      	mov	r2, r9
 80063da:	e9d5 0100 	ldrd	r0, r1, [r5]
 80063de:	4653      	mov	r3, sl
 80063e0:	f7fa f87a 	bl	80004d8 <__aeabi_dmul>
 80063e4:	4b2a      	ldr	r3, [pc, #168]	; (8006490 <_strtod_l+0x5a8>)
 80063e6:	460a      	mov	r2, r1
 80063e8:	400b      	ands	r3, r1
 80063ea:	492a      	ldr	r1, [pc, #168]	; (8006494 <_strtod_l+0x5ac>)
 80063ec:	4681      	mov	r9, r0
 80063ee:	428b      	cmp	r3, r1
 80063f0:	d894      	bhi.n	800631c <_strtod_l+0x434>
 80063f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80063f6:	428b      	cmp	r3, r1
 80063f8:	bf86      	itte	hi
 80063fa:	f04f 39ff 	movhi.w	r9, #4294967295
 80063fe:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800649c <_strtod_l+0x5b4>
 8006402:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006406:	2300      	movs	r3, #0
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	e07b      	b.n	8006504 <_strtod_l+0x61c>
 800640c:	f018 0f01 	tst.w	r8, #1
 8006410:	d006      	beq.n	8006420 <_strtod_l+0x538>
 8006412:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	2301      	movs	r3, #1
 8006420:	3501      	adds	r5, #1
 8006422:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006426:	e7cc      	b.n	80063c2 <_strtod_l+0x4da>
 8006428:	d0ed      	beq.n	8006406 <_strtod_l+0x51e>
 800642a:	f1c8 0800 	rsb	r8, r8, #0
 800642e:	f018 020f 	ands.w	r2, r8, #15
 8006432:	d00a      	beq.n	800644a <_strtod_l+0x562>
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <_strtod_l+0x5a0>)
 8006436:	4648      	mov	r0, r9
 8006438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800643c:	4651      	mov	r1, sl
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7fa f973 	bl	800072c <__aeabi_ddiv>
 8006446:	4681      	mov	r9, r0
 8006448:	468a      	mov	sl, r1
 800644a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800644e:	d0da      	beq.n	8006406 <_strtod_l+0x51e>
 8006450:	f1b8 0f1f 	cmp.w	r8, #31
 8006454:	dd24      	ble.n	80064a0 <_strtod_l+0x5b8>
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	f8cd 8010 	str.w	r8, [sp, #16]
 800645e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006462:	f8cd 8018 	str.w	r8, [sp, #24]
 8006466:	2322      	movs	r3, #34	; 0x22
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	f04f 0a00 	mov.w	sl, #0
 8006470:	f8cb 3000 	str.w	r3, [fp]
 8006474:	e761      	b.n	800633a <_strtod_l+0x452>
 8006476:	bf00      	nop
 8006478:	08008e15 	.word	0x08008e15
 800647c:	08008ea3 	.word	0x08008ea3
 8006480:	08008e1d 	.word	0x08008e1d
 8006484:	08008e60 	.word	0x08008e60
 8006488:	08008ee0 	.word	0x08008ee0
 800648c:	08008eb8 	.word	0x08008eb8
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	7ca00000 	.word	0x7ca00000
 8006498:	fff80000 	.word	0xfff80000
 800649c:	7fefffff 	.word	0x7fefffff
 80064a0:	f018 0310 	ands.w	r3, r8, #16
 80064a4:	bf18      	it	ne
 80064a6:	236a      	movne	r3, #106	; 0x6a
 80064a8:	4648      	mov	r0, r9
 80064aa:	9305      	str	r3, [sp, #20]
 80064ac:	4651      	mov	r1, sl
 80064ae:	2300      	movs	r3, #0
 80064b0:	4da1      	ldr	r5, [pc, #644]	; (8006738 <_strtod_l+0x850>)
 80064b2:	f1b8 0f00 	cmp.w	r8, #0
 80064b6:	f300 8113 	bgt.w	80066e0 <_strtod_l+0x7f8>
 80064ba:	b10b      	cbz	r3, 80064c0 <_strtod_l+0x5d8>
 80064bc:	4681      	mov	r9, r0
 80064be:	468a      	mov	sl, r1
 80064c0:	9b05      	ldr	r3, [sp, #20]
 80064c2:	b1bb      	cbz	r3, 80064f4 <_strtod_l+0x60c>
 80064c4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80064c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	4651      	mov	r1, sl
 80064d0:	dd10      	ble.n	80064f4 <_strtod_l+0x60c>
 80064d2:	2b1f      	cmp	r3, #31
 80064d4:	f340 8110 	ble.w	80066f8 <_strtod_l+0x810>
 80064d8:	2b34      	cmp	r3, #52	; 0x34
 80064da:	bfd8      	it	le
 80064dc:	f04f 32ff 	movle.w	r2, #4294967295
 80064e0:	f04f 0900 	mov.w	r9, #0
 80064e4:	bfcf      	iteee	gt
 80064e6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80064ea:	3b20      	suble	r3, #32
 80064ec:	fa02 f303 	lslle.w	r3, r2, r3
 80064f0:	ea03 0a01 	andle.w	sl, r3, r1
 80064f4:	2200      	movs	r2, #0
 80064f6:	2300      	movs	r3, #0
 80064f8:	4648      	mov	r0, r9
 80064fa:	4651      	mov	r1, sl
 80064fc:	f7fa fa54 	bl	80009a8 <__aeabi_dcmpeq>
 8006500:	2800      	cmp	r0, #0
 8006502:	d1a8      	bne.n	8006456 <_strtod_l+0x56e>
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	9908      	ldr	r1, [sp, #32]
 800650c:	4623      	mov	r3, r4
 800650e:	4658      	mov	r0, fp
 8006510:	f001 fdbf 	bl	8008092 <__s2b>
 8006514:	9008      	str	r0, [sp, #32]
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f af00 	beq.w	800631c <_strtod_l+0x434>
 800651c:	9a07      	ldr	r2, [sp, #28]
 800651e:	9b07      	ldr	r3, [sp, #28]
 8006520:	2a00      	cmp	r2, #0
 8006522:	f1c3 0300 	rsb	r3, r3, #0
 8006526:	bfa8      	it	ge
 8006528:	2300      	movge	r3, #0
 800652a:	f04f 0800 	mov.w	r8, #0
 800652e:	930e      	str	r3, [sp, #56]	; 0x38
 8006530:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006534:	9316      	str	r3, [sp, #88]	; 0x58
 8006536:	f8cd 8010 	str.w	r8, [sp, #16]
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	4658      	mov	r0, fp
 800653e:	6859      	ldr	r1, [r3, #4]
 8006540:	f001 fd21 	bl	8007f86 <_Balloc>
 8006544:	9006      	str	r0, [sp, #24]
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f aef0 	beq.w	800632c <_strtod_l+0x444>
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	300c      	adds	r0, #12
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	f103 010c 	add.w	r1, r3, #12
 8006556:	3202      	adds	r2, #2
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	f001 fd09 	bl	8007f70 <memcpy>
 800655e:	ab1e      	add	r3, sp, #120	; 0x78
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	ab1d      	add	r3, sp, #116	; 0x74
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	464a      	mov	r2, r9
 8006568:	4653      	mov	r3, sl
 800656a:	4658      	mov	r0, fp
 800656c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006570:	f002 f84a 	bl	8008608 <__d2b>
 8006574:	901c      	str	r0, [sp, #112]	; 0x70
 8006576:	2800      	cmp	r0, #0
 8006578:	f43f aed8 	beq.w	800632c <_strtod_l+0x444>
 800657c:	2101      	movs	r1, #1
 800657e:	4658      	mov	r0, fp
 8006580:	f001 fe13 	bl	80081aa <__i2b>
 8006584:	9004      	str	r0, [sp, #16]
 8006586:	4603      	mov	r3, r0
 8006588:	2800      	cmp	r0, #0
 800658a:	f43f aecf 	beq.w	800632c <_strtod_l+0x444>
 800658e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006592:	2d00      	cmp	r5, #0
 8006594:	bfab      	itete	ge
 8006596:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006598:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800659a:	18ee      	addge	r6, r5, r3
 800659c:	1b5c      	sublt	r4, r3, r5
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	bfa8      	it	ge
 80065a2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80065a4:	eba5 0503 	sub.w	r5, r5, r3
 80065a8:	4415      	add	r5, r2
 80065aa:	4b64      	ldr	r3, [pc, #400]	; (800673c <_strtod_l+0x854>)
 80065ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80065b0:	bfb8      	it	lt
 80065b2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80065b4:	429d      	cmp	r5, r3
 80065b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80065ba:	f280 80af 	bge.w	800671c <_strtod_l+0x834>
 80065be:	1b5b      	subs	r3, r3, r5
 80065c0:	2b1f      	cmp	r3, #31
 80065c2:	eba2 0203 	sub.w	r2, r2, r3
 80065c6:	f04f 0701 	mov.w	r7, #1
 80065ca:	f300 809c 	bgt.w	8006706 <_strtod_l+0x81e>
 80065ce:	2500      	movs	r5, #0
 80065d0:	fa07 f303 	lsl.w	r3, r7, r3
 80065d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d6:	18b7      	adds	r7, r6, r2
 80065d8:	9b05      	ldr	r3, [sp, #20]
 80065da:	42be      	cmp	r6, r7
 80065dc:	4414      	add	r4, r2
 80065de:	441c      	add	r4, r3
 80065e0:	4633      	mov	r3, r6
 80065e2:	bfa8      	it	ge
 80065e4:	463b      	movge	r3, r7
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	bfa8      	it	ge
 80065ea:	4623      	movge	r3, r4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bfc2      	ittt	gt
 80065f0:	1aff      	subgt	r7, r7, r3
 80065f2:	1ae4      	subgt	r4, r4, r3
 80065f4:	1af6      	subgt	r6, r6, r3
 80065f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f8:	b1bb      	cbz	r3, 800662a <_strtod_l+0x742>
 80065fa:	461a      	mov	r2, r3
 80065fc:	9904      	ldr	r1, [sp, #16]
 80065fe:	4658      	mov	r0, fp
 8006600:	f001 fe72 	bl	80082e8 <__pow5mult>
 8006604:	9004      	str	r0, [sp, #16]
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f ae90 	beq.w	800632c <_strtod_l+0x444>
 800660c:	4601      	mov	r1, r0
 800660e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006610:	4658      	mov	r0, fp
 8006612:	f001 fdd3 	bl	80081bc <__multiply>
 8006616:	9009      	str	r0, [sp, #36]	; 0x24
 8006618:	2800      	cmp	r0, #0
 800661a:	f43f ae87 	beq.w	800632c <_strtod_l+0x444>
 800661e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006620:	4658      	mov	r0, fp
 8006622:	f001 fce4 	bl	8007fee <_Bfree>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	931c      	str	r3, [sp, #112]	; 0x70
 800662a:	2f00      	cmp	r7, #0
 800662c:	dc7a      	bgt.n	8006724 <_strtod_l+0x83c>
 800662e:	9b07      	ldr	r3, [sp, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dd08      	ble.n	8006646 <_strtod_l+0x75e>
 8006634:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006636:	9906      	ldr	r1, [sp, #24]
 8006638:	4658      	mov	r0, fp
 800663a:	f001 fe55 	bl	80082e8 <__pow5mult>
 800663e:	9006      	str	r0, [sp, #24]
 8006640:	2800      	cmp	r0, #0
 8006642:	f43f ae73 	beq.w	800632c <_strtod_l+0x444>
 8006646:	2c00      	cmp	r4, #0
 8006648:	dd08      	ble.n	800665c <_strtod_l+0x774>
 800664a:	4622      	mov	r2, r4
 800664c:	9906      	ldr	r1, [sp, #24]
 800664e:	4658      	mov	r0, fp
 8006650:	f001 fe98 	bl	8008384 <__lshift>
 8006654:	9006      	str	r0, [sp, #24]
 8006656:	2800      	cmp	r0, #0
 8006658:	f43f ae68 	beq.w	800632c <_strtod_l+0x444>
 800665c:	2e00      	cmp	r6, #0
 800665e:	dd08      	ble.n	8006672 <_strtod_l+0x78a>
 8006660:	4632      	mov	r2, r6
 8006662:	9904      	ldr	r1, [sp, #16]
 8006664:	4658      	mov	r0, fp
 8006666:	f001 fe8d 	bl	8008384 <__lshift>
 800666a:	9004      	str	r0, [sp, #16]
 800666c:	2800      	cmp	r0, #0
 800666e:	f43f ae5d 	beq.w	800632c <_strtod_l+0x444>
 8006672:	9a06      	ldr	r2, [sp, #24]
 8006674:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006676:	4658      	mov	r0, fp
 8006678:	f001 fef2 	bl	8008460 <__mdiff>
 800667c:	4680      	mov	r8, r0
 800667e:	2800      	cmp	r0, #0
 8006680:	f43f ae54 	beq.w	800632c <_strtod_l+0x444>
 8006684:	2400      	movs	r4, #0
 8006686:	68c3      	ldr	r3, [r0, #12]
 8006688:	9904      	ldr	r1, [sp, #16]
 800668a:	60c4      	str	r4, [r0, #12]
 800668c:	930c      	str	r3, [sp, #48]	; 0x30
 800668e:	f001 fecd 	bl	800842c <__mcmp>
 8006692:	42a0      	cmp	r0, r4
 8006694:	da54      	bge.n	8006740 <_strtod_l+0x858>
 8006696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006698:	b9f3      	cbnz	r3, 80066d8 <_strtod_l+0x7f0>
 800669a:	f1b9 0f00 	cmp.w	r9, #0
 800669e:	d11b      	bne.n	80066d8 <_strtod_l+0x7f0>
 80066a0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80066a4:	b9c3      	cbnz	r3, 80066d8 <_strtod_l+0x7f0>
 80066a6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80066aa:	0d1b      	lsrs	r3, r3, #20
 80066ac:	051b      	lsls	r3, r3, #20
 80066ae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80066b2:	d911      	bls.n	80066d8 <_strtod_l+0x7f0>
 80066b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80066b8:	b91b      	cbnz	r3, 80066c2 <_strtod_l+0x7da>
 80066ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	dd0a      	ble.n	80066d8 <_strtod_l+0x7f0>
 80066c2:	4641      	mov	r1, r8
 80066c4:	2201      	movs	r2, #1
 80066c6:	4658      	mov	r0, fp
 80066c8:	f001 fe5c 	bl	8008384 <__lshift>
 80066cc:	9904      	ldr	r1, [sp, #16]
 80066ce:	4680      	mov	r8, r0
 80066d0:	f001 feac 	bl	800842c <__mcmp>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	dc68      	bgt.n	80067aa <_strtod_l+0x8c2>
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d172      	bne.n	80067c4 <_strtod_l+0x8dc>
 80066de:	e630      	b.n	8006342 <_strtod_l+0x45a>
 80066e0:	f018 0f01 	tst.w	r8, #1
 80066e4:	d004      	beq.n	80066f0 <_strtod_l+0x808>
 80066e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	2301      	movs	r3, #1
 80066f0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066f4:	3508      	adds	r5, #8
 80066f6:	e6dc      	b.n	80064b2 <_strtod_l+0x5ca>
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	ea03 0909 	and.w	r9, r3, r9
 8006704:	e6f6      	b.n	80064f4 <_strtod_l+0x60c>
 8006706:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800670a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800670e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006712:	35e2      	adds	r5, #226	; 0xe2
 8006714:	fa07 f505 	lsl.w	r5, r7, r5
 8006718:	970f      	str	r7, [sp, #60]	; 0x3c
 800671a:	e75c      	b.n	80065d6 <_strtod_l+0x6ee>
 800671c:	2301      	movs	r3, #1
 800671e:	2500      	movs	r5, #0
 8006720:	930f      	str	r3, [sp, #60]	; 0x3c
 8006722:	e758      	b.n	80065d6 <_strtod_l+0x6ee>
 8006724:	463a      	mov	r2, r7
 8006726:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006728:	4658      	mov	r0, fp
 800672a:	f001 fe2b 	bl	8008384 <__lshift>
 800672e:	901c      	str	r0, [sp, #112]	; 0x70
 8006730:	2800      	cmp	r0, #0
 8006732:	f47f af7c 	bne.w	800662e <_strtod_l+0x746>
 8006736:	e5f9      	b.n	800632c <_strtod_l+0x444>
 8006738:	08008e78 	.word	0x08008e78
 800673c:	fffffc02 	.word	0xfffffc02
 8006740:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006744:	f040 8089 	bne.w	800685a <_strtod_l+0x972>
 8006748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800674e:	b342      	cbz	r2, 80067a2 <_strtod_l+0x8ba>
 8006750:	4aaf      	ldr	r2, [pc, #700]	; (8006a10 <_strtod_l+0xb28>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d156      	bne.n	8006804 <_strtod_l+0x91c>
 8006756:	9b05      	ldr	r3, [sp, #20]
 8006758:	4648      	mov	r0, r9
 800675a:	b1eb      	cbz	r3, 8006798 <_strtod_l+0x8b0>
 800675c:	4653      	mov	r3, sl
 800675e:	4aad      	ldr	r2, [pc, #692]	; (8006a14 <_strtod_l+0xb2c>)
 8006760:	f04f 31ff 	mov.w	r1, #4294967295
 8006764:	401a      	ands	r2, r3
 8006766:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800676a:	d818      	bhi.n	800679e <_strtod_l+0x8b6>
 800676c:	0d12      	lsrs	r2, r2, #20
 800676e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	4298      	cmp	r0, r3
 8006778:	d144      	bne.n	8006804 <_strtod_l+0x91c>
 800677a:	4ba7      	ldr	r3, [pc, #668]	; (8006a18 <_strtod_l+0xb30>)
 800677c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800677e:	429a      	cmp	r2, r3
 8006780:	d102      	bne.n	8006788 <_strtod_l+0x8a0>
 8006782:	3001      	adds	r0, #1
 8006784:	f43f add2 	beq.w	800632c <_strtod_l+0x444>
 8006788:	4ba2      	ldr	r3, [pc, #648]	; (8006a14 <_strtod_l+0xb2c>)
 800678a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800678c:	f04f 0900 	mov.w	r9, #0
 8006790:	401a      	ands	r2, r3
 8006792:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006796:	e79f      	b.n	80066d8 <_strtod_l+0x7f0>
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	e7eb      	b.n	8006776 <_strtod_l+0x88e>
 800679e:	460b      	mov	r3, r1
 80067a0:	e7e9      	b.n	8006776 <_strtod_l+0x88e>
 80067a2:	bb7b      	cbnz	r3, 8006804 <_strtod_l+0x91c>
 80067a4:	f1b9 0f00 	cmp.w	r9, #0
 80067a8:	d12c      	bne.n	8006804 <_strtod_l+0x91c>
 80067aa:	9905      	ldr	r1, [sp, #20]
 80067ac:	4653      	mov	r3, sl
 80067ae:	4a99      	ldr	r2, [pc, #612]	; (8006a14 <_strtod_l+0xb2c>)
 80067b0:	b1f1      	cbz	r1, 80067f0 <_strtod_l+0x908>
 80067b2:	ea02 010a 	and.w	r1, r2, sl
 80067b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067ba:	dc19      	bgt.n	80067f0 <_strtod_l+0x908>
 80067bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067c0:	f77f ae51 	ble.w	8006466 <_strtod_l+0x57e>
 80067c4:	2300      	movs	r3, #0
 80067c6:	4a95      	ldr	r2, [pc, #596]	; (8006a1c <_strtod_l+0xb34>)
 80067c8:	4648      	mov	r0, r9
 80067ca:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80067ce:	4651      	mov	r1, sl
 80067d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	4681      	mov	r9, r0
 80067da:	468a      	mov	sl, r1
 80067dc:	2900      	cmp	r1, #0
 80067de:	f47f adb0 	bne.w	8006342 <_strtod_l+0x45a>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	f47f adad 	bne.w	8006342 <_strtod_l+0x45a>
 80067e8:	2322      	movs	r3, #34	; 0x22
 80067ea:	f8cb 3000 	str.w	r3, [fp]
 80067ee:	e5a8      	b.n	8006342 <_strtod_l+0x45a>
 80067f0:	4013      	ands	r3, r2
 80067f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067f6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80067fa:	f04f 39ff 	mov.w	r9, #4294967295
 80067fe:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8006802:	e769      	b.n	80066d8 <_strtod_l+0x7f0>
 8006804:	b19d      	cbz	r5, 800682e <_strtod_l+0x946>
 8006806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006808:	421d      	tst	r5, r3
 800680a:	f43f af65 	beq.w	80066d8 <_strtod_l+0x7f0>
 800680e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006810:	9a05      	ldr	r2, [sp, #20]
 8006812:	4648      	mov	r0, r9
 8006814:	4651      	mov	r1, sl
 8006816:	b173      	cbz	r3, 8006836 <_strtod_l+0x94e>
 8006818:	f7ff fb44 	bl	8005ea4 <sulp>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006824:	f7f9 fca2 	bl	800016c <__adddf3>
 8006828:	4681      	mov	r9, r0
 800682a:	468a      	mov	sl, r1
 800682c:	e754      	b.n	80066d8 <_strtod_l+0x7f0>
 800682e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006830:	ea13 0f09 	tst.w	r3, r9
 8006834:	e7e9      	b.n	800680a <_strtod_l+0x922>
 8006836:	f7ff fb35 	bl	8005ea4 <sulp>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006842:	f7f9 fc91 	bl	8000168 <__aeabi_dsub>
 8006846:	2200      	movs	r2, #0
 8006848:	2300      	movs	r3, #0
 800684a:	4681      	mov	r9, r0
 800684c:	468a      	mov	sl, r1
 800684e:	f7fa f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8006852:	2800      	cmp	r0, #0
 8006854:	f47f ae07 	bne.w	8006466 <_strtod_l+0x57e>
 8006858:	e73e      	b.n	80066d8 <_strtod_l+0x7f0>
 800685a:	9904      	ldr	r1, [sp, #16]
 800685c:	4640      	mov	r0, r8
 800685e:	f001 ff22 	bl	80086a6 <__ratio>
 8006862:	2200      	movs	r2, #0
 8006864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006868:	4606      	mov	r6, r0
 800686a:	460f      	mov	r7, r1
 800686c:	f7fa f8b0 	bl	80009d0 <__aeabi_dcmple>
 8006870:	2800      	cmp	r0, #0
 8006872:	d075      	beq.n	8006960 <_strtod_l+0xa78>
 8006874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006876:	2b00      	cmp	r3, #0
 8006878:	d047      	beq.n	800690a <_strtod_l+0xa22>
 800687a:	2600      	movs	r6, #0
 800687c:	4f68      	ldr	r7, [pc, #416]	; (8006a20 <_strtod_l+0xb38>)
 800687e:	4d68      	ldr	r5, [pc, #416]	; (8006a20 <_strtod_l+0xb38>)
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006886:	0d1b      	lsrs	r3, r3, #20
 8006888:	051b      	lsls	r3, r3, #20
 800688a:	930f      	str	r3, [sp, #60]	; 0x3c
 800688c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800688e:	4b65      	ldr	r3, [pc, #404]	; (8006a24 <_strtod_l+0xb3c>)
 8006890:	429a      	cmp	r2, r3
 8006892:	f040 80cf 	bne.w	8006a34 <_strtod_l+0xb4c>
 8006896:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800689a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	4648      	mov	r0, r9
 80068a2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80068a6:	4651      	mov	r1, sl
 80068a8:	f001 fe38 	bl	800851c <__ulp>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7f9 fe10 	bl	80004d8 <__aeabi_dmul>
 80068b8:	464a      	mov	r2, r9
 80068ba:	4653      	mov	r3, sl
 80068bc:	f7f9 fc56 	bl	800016c <__adddf3>
 80068c0:	460b      	mov	r3, r1
 80068c2:	4954      	ldr	r1, [pc, #336]	; (8006a14 <_strtod_l+0xb2c>)
 80068c4:	4a58      	ldr	r2, [pc, #352]	; (8006a28 <_strtod_l+0xb40>)
 80068c6:	4019      	ands	r1, r3
 80068c8:	4291      	cmp	r1, r2
 80068ca:	4681      	mov	r9, r0
 80068cc:	d95e      	bls.n	800698c <_strtod_l+0xaa4>
 80068ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <_strtod_l+0x9f8>
 80068d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068da:	3301      	adds	r3, #1
 80068dc:	f43f ad26 	beq.w	800632c <_strtod_l+0x444>
 80068e0:	f04f 39ff 	mov.w	r9, #4294967295
 80068e4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006a18 <_strtod_l+0xb30>
 80068e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068ea:	4658      	mov	r0, fp
 80068ec:	f001 fb7f 	bl	8007fee <_Bfree>
 80068f0:	9906      	ldr	r1, [sp, #24]
 80068f2:	4658      	mov	r0, fp
 80068f4:	f001 fb7b 	bl	8007fee <_Bfree>
 80068f8:	9904      	ldr	r1, [sp, #16]
 80068fa:	4658      	mov	r0, fp
 80068fc:	f001 fb77 	bl	8007fee <_Bfree>
 8006900:	4641      	mov	r1, r8
 8006902:	4658      	mov	r0, fp
 8006904:	f001 fb73 	bl	8007fee <_Bfree>
 8006908:	e617      	b.n	800653a <_strtod_l+0x652>
 800690a:	f1b9 0f00 	cmp.w	r9, #0
 800690e:	d119      	bne.n	8006944 <_strtod_l+0xa5c>
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006916:	b9e3      	cbnz	r3, 8006952 <_strtod_l+0xa6a>
 8006918:	2200      	movs	r2, #0
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <_strtod_l+0xb38>)
 800691c:	4630      	mov	r0, r6
 800691e:	4639      	mov	r1, r7
 8006920:	f7fa f84c 	bl	80009bc <__aeabi_dcmplt>
 8006924:	b9c8      	cbnz	r0, 800695a <_strtod_l+0xa72>
 8006926:	2200      	movs	r2, #0
 8006928:	4b40      	ldr	r3, [pc, #256]	; (8006a2c <_strtod_l+0xb44>)
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7f9 fdd3 	bl	80004d8 <__aeabi_dmul>
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800693a:	9418      	str	r4, [sp, #96]	; 0x60
 800693c:	9319      	str	r3, [sp, #100]	; 0x64
 800693e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006942:	e79d      	b.n	8006880 <_strtod_l+0x998>
 8006944:	f1b9 0f01 	cmp.w	r9, #1
 8006948:	d103      	bne.n	8006952 <_strtod_l+0xa6a>
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	f43f ad8a 	beq.w	8006466 <_strtod_l+0x57e>
 8006952:	2600      	movs	r6, #0
 8006954:	4f36      	ldr	r7, [pc, #216]	; (8006a30 <_strtod_l+0xb48>)
 8006956:	2400      	movs	r4, #0
 8006958:	e791      	b.n	800687e <_strtod_l+0x996>
 800695a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800695c:	4d33      	ldr	r5, [pc, #204]	; (8006a2c <_strtod_l+0xb44>)
 800695e:	e7ea      	b.n	8006936 <_strtod_l+0xa4e>
 8006960:	4b32      	ldr	r3, [pc, #200]	; (8006a2c <_strtod_l+0xb44>)
 8006962:	2200      	movs	r2, #0
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7f9 fdb6 	bl	80004d8 <__aeabi_dmul>
 800696c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696e:	4604      	mov	r4, r0
 8006970:	460d      	mov	r5, r1
 8006972:	b933      	cbnz	r3, 8006982 <_strtod_l+0xa9a>
 8006974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006978:	9010      	str	r0, [sp, #64]	; 0x40
 800697a:	9311      	str	r3, [sp, #68]	; 0x44
 800697c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006980:	e77e      	b.n	8006880 <_strtod_l+0x998>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800698a:	e7f7      	b.n	800697c <_strtod_l+0xa94>
 800698c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006990:	9b05      	ldr	r3, [sp, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1a8      	bne.n	80068e8 <_strtod_l+0xa00>
 8006996:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800699a:	0d1b      	lsrs	r3, r3, #20
 800699c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800699e:	051b      	lsls	r3, r3, #20
 80069a0:	429a      	cmp	r2, r3
 80069a2:	4656      	mov	r6, sl
 80069a4:	d1a0      	bne.n	80068e8 <_strtod_l+0xa00>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7fa f845 	bl	8000a38 <__aeabi_d2iz>
 80069ae:	f7f9 fd29 	bl	8000404 <__aeabi_i2d>
 80069b2:	460b      	mov	r3, r1
 80069b4:	4602      	mov	r2, r0
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	f7f9 fbd5 	bl	8000168 <__aeabi_dsub>
 80069be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	b933      	cbnz	r3, 80069d4 <_strtod_l+0xaec>
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d103      	bne.n	80069d4 <_strtod_l+0xaec>
 80069cc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	d06a      	beq.n	8006aaa <_strtod_l+0xbc2>
 80069d4:	a30a      	add	r3, pc, #40	; (adr r3, 8006a00 <_strtod_l+0xb18>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f7f9 ffed 	bl	80009bc <__aeabi_dcmplt>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f47f acad 	bne.w	8006342 <_strtod_l+0x45a>
 80069e8:	a307      	add	r3, pc, #28	; (adr r3, 8006a08 <_strtod_l+0xb20>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f801 	bl	80009f8 <__aeabi_dcmpgt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f43f af76 	beq.w	80068e8 <_strtod_l+0xa00>
 80069fc:	e4a1      	b.n	8006342 <_strtod_l+0x45a>
 80069fe:	bf00      	nop
 8006a00:	94a03595 	.word	0x94a03595
 8006a04:	3fdfffff 	.word	0x3fdfffff
 8006a08:	35afe535 	.word	0x35afe535
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	000fffff 	.word	0x000fffff
 8006a14:	7ff00000 	.word	0x7ff00000
 8006a18:	7fefffff 	.word	0x7fefffff
 8006a1c:	39500000 	.word	0x39500000
 8006a20:	3ff00000 	.word	0x3ff00000
 8006a24:	7fe00000 	.word	0x7fe00000
 8006a28:	7c9fffff 	.word	0x7c9fffff
 8006a2c:	3fe00000 	.word	0x3fe00000
 8006a30:	bff00000 	.word	0xbff00000
 8006a34:	9b05      	ldr	r3, [sp, #20]
 8006a36:	b313      	cbz	r3, 8006a7e <_strtod_l+0xb96>
 8006a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a3e:	d81e      	bhi.n	8006a7e <_strtod_l+0xb96>
 8006a40:	a325      	add	r3, pc, #148	; (adr r3, 8006ad8 <_strtod_l+0xbf0>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7f9 ffc1 	bl	80009d0 <__aeabi_dcmple>
 8006a4e:	b190      	cbz	r0, 8006a76 <_strtod_l+0xb8e>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	f7fa f818 	bl	8000a88 <__aeabi_d2uiz>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	bf08      	it	eq
 8006a5c:	2001      	moveq	r0, #1
 8006a5e:	f7f9 fcc1 	bl	80003e4 <__aeabi_ui2d>
 8006a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	b9d3      	cbnz	r3, 8006aa0 <_strtod_l+0xbb8>
 8006a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a6e:	9012      	str	r0, [sp, #72]	; 0x48
 8006a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a72:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a78:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006a7c:	1a9f      	subs	r7, r3, r2
 8006a7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a82:	f001 fd4b 	bl	800851c <__ulp>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fd23 	bl	80004d8 <__aeabi_dmul>
 8006a92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a96:	f7f9 fb69 	bl	800016c <__adddf3>
 8006a9a:	4681      	mov	r9, r0
 8006a9c:	468a      	mov	sl, r1
 8006a9e:	e777      	b.n	8006990 <_strtod_l+0xaa8>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006aa8:	e7e3      	b.n	8006a72 <_strtod_l+0xb8a>
 8006aaa:	a30d      	add	r3, pc, #52	; (adr r3, 8006ae0 <_strtod_l+0xbf8>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 ff84 	bl	80009bc <__aeabi_dcmplt>
 8006ab4:	e79f      	b.n	80069f6 <_strtod_l+0xb0e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	930d      	str	r3, [sp, #52]	; 0x34
 8006aba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006abc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	f7ff ba55 	b.w	8005f6e <_strtod_l+0x86>
 8006ac4:	2b65      	cmp	r3, #101	; 0x65
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f43f ab42 	beq.w	8006152 <_strtod_l+0x26a>
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	9105      	str	r1, [sp, #20]
 8006ad4:	f7ff babf 	b.w	8006056 <_strtod_l+0x16e>
 8006ad8:	ffc00000 	.word	0xffc00000
 8006adc:	41dfffff 	.word	0x41dfffff
 8006ae0:	94a03595 	.word	0x94a03595
 8006ae4:	3fcfffff 	.word	0x3fcfffff

08006ae8 <_strtod_r>:
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <_strtod_r+0x18>)
 8006aea:	b410      	push	{r4}
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4c05      	ldr	r4, [pc, #20]	; (8006b04 <_strtod_r+0x1c>)
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf08      	it	eq
 8006af6:	4623      	moveq	r3, r4
 8006af8:	bc10      	pop	{r4}
 8006afa:	f7ff b9f5 	b.w	8005ee8 <_strtod_l>
 8006afe:	bf00      	nop
 8006b00:	20000018 	.word	0x20000018
 8006b04:	2000007c 	.word	0x2000007c

08006b08 <_strtol_l.isra.0>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4689      	mov	r9, r1
 8006b10:	4692      	mov	sl, r2
 8006b12:	461e      	mov	r6, r3
 8006b14:	460f      	mov	r7, r1
 8006b16:	463d      	mov	r5, r7
 8006b18:	9808      	ldr	r0, [sp, #32]
 8006b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b1e:	f001 f9eb 	bl	8007ef8 <__locale_ctype_ptr_l>
 8006b22:	4420      	add	r0, r4
 8006b24:	7843      	ldrb	r3, [r0, #1]
 8006b26:	f013 0308 	ands.w	r3, r3, #8
 8006b2a:	d132      	bne.n	8006b92 <_strtol_l.isra.0+0x8a>
 8006b2c:	2c2d      	cmp	r4, #45	; 0x2d
 8006b2e:	d132      	bne.n	8006b96 <_strtol_l.isra.0+0x8e>
 8006b30:	2201      	movs	r2, #1
 8006b32:	787c      	ldrb	r4, [r7, #1]
 8006b34:	1cbd      	adds	r5, r7, #2
 8006b36:	2e00      	cmp	r6, #0
 8006b38:	d05d      	beq.n	8006bf6 <_strtol_l.isra.0+0xee>
 8006b3a:	2e10      	cmp	r6, #16
 8006b3c:	d109      	bne.n	8006b52 <_strtol_l.isra.0+0x4a>
 8006b3e:	2c30      	cmp	r4, #48	; 0x30
 8006b40:	d107      	bne.n	8006b52 <_strtol_l.isra.0+0x4a>
 8006b42:	782b      	ldrb	r3, [r5, #0]
 8006b44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b48:	2b58      	cmp	r3, #88	; 0x58
 8006b4a:	d14f      	bne.n	8006bec <_strtol_l.isra.0+0xe4>
 8006b4c:	2610      	movs	r6, #16
 8006b4e:	786c      	ldrb	r4, [r5, #1]
 8006b50:	3502      	adds	r5, #2
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	bf14      	ite	ne
 8006b56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006b5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006b5e:	2700      	movs	r7, #0
 8006b60:	fbb1 fcf6 	udiv	ip, r1, r6
 8006b64:	4638      	mov	r0, r7
 8006b66:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006b6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006b6e:	2b09      	cmp	r3, #9
 8006b70:	d817      	bhi.n	8006ba2 <_strtol_l.isra.0+0x9a>
 8006b72:	461c      	mov	r4, r3
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	dd23      	ble.n	8006bc0 <_strtol_l.isra.0+0xb8>
 8006b78:	1c7b      	adds	r3, r7, #1
 8006b7a:	d007      	beq.n	8006b8c <_strtol_l.isra.0+0x84>
 8006b7c:	4584      	cmp	ip, r0
 8006b7e:	d31c      	bcc.n	8006bba <_strtol_l.isra.0+0xb2>
 8006b80:	d101      	bne.n	8006b86 <_strtol_l.isra.0+0x7e>
 8006b82:	45a6      	cmp	lr, r4
 8006b84:	db19      	blt.n	8006bba <_strtol_l.isra.0+0xb2>
 8006b86:	2701      	movs	r7, #1
 8006b88:	fb00 4006 	mla	r0, r0, r6, r4
 8006b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b90:	e7eb      	b.n	8006b6a <_strtol_l.isra.0+0x62>
 8006b92:	462f      	mov	r7, r5
 8006b94:	e7bf      	b.n	8006b16 <_strtol_l.isra.0+0xe>
 8006b96:	2c2b      	cmp	r4, #43	; 0x2b
 8006b98:	bf04      	itt	eq
 8006b9a:	1cbd      	addeq	r5, r7, #2
 8006b9c:	787c      	ldrbeq	r4, [r7, #1]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	e7c9      	b.n	8006b36 <_strtol_l.isra.0+0x2e>
 8006ba2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006ba6:	2b19      	cmp	r3, #25
 8006ba8:	d801      	bhi.n	8006bae <_strtol_l.isra.0+0xa6>
 8006baa:	3c37      	subs	r4, #55	; 0x37
 8006bac:	e7e2      	b.n	8006b74 <_strtol_l.isra.0+0x6c>
 8006bae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006bb2:	2b19      	cmp	r3, #25
 8006bb4:	d804      	bhi.n	8006bc0 <_strtol_l.isra.0+0xb8>
 8006bb6:	3c57      	subs	r4, #87	; 0x57
 8006bb8:	e7dc      	b.n	8006b74 <_strtol_l.isra.0+0x6c>
 8006bba:	f04f 37ff 	mov.w	r7, #4294967295
 8006bbe:	e7e5      	b.n	8006b8c <_strtol_l.isra.0+0x84>
 8006bc0:	1c7b      	adds	r3, r7, #1
 8006bc2:	d108      	bne.n	8006bd6 <_strtol_l.isra.0+0xce>
 8006bc4:	2322      	movs	r3, #34	; 0x22
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	f8c8 3000 	str.w	r3, [r8]
 8006bcc:	f1ba 0f00 	cmp.w	sl, #0
 8006bd0:	d107      	bne.n	8006be2 <_strtol_l.isra.0+0xda>
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	b102      	cbz	r2, 8006bda <_strtol_l.isra.0+0xd2>
 8006bd8:	4240      	negs	r0, r0
 8006bda:	f1ba 0f00 	cmp.w	sl, #0
 8006bde:	d0f8      	beq.n	8006bd2 <_strtol_l.isra.0+0xca>
 8006be0:	b10f      	cbz	r7, 8006be6 <_strtol_l.isra.0+0xde>
 8006be2:	f105 39ff 	add.w	r9, r5, #4294967295
 8006be6:	f8ca 9000 	str.w	r9, [sl]
 8006bea:	e7f2      	b.n	8006bd2 <_strtol_l.isra.0+0xca>
 8006bec:	2430      	movs	r4, #48	; 0x30
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d1af      	bne.n	8006b52 <_strtol_l.isra.0+0x4a>
 8006bf2:	2608      	movs	r6, #8
 8006bf4:	e7ad      	b.n	8006b52 <_strtol_l.isra.0+0x4a>
 8006bf6:	2c30      	cmp	r4, #48	; 0x30
 8006bf8:	d0a3      	beq.n	8006b42 <_strtol_l.isra.0+0x3a>
 8006bfa:	260a      	movs	r6, #10
 8006bfc:	e7a9      	b.n	8006b52 <_strtol_l.isra.0+0x4a>
	...

08006c00 <_strtol_r>:
 8006c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c02:	4c06      	ldr	r4, [pc, #24]	; (8006c1c <_strtol_r+0x1c>)
 8006c04:	4d06      	ldr	r5, [pc, #24]	; (8006c20 <_strtol_r+0x20>)
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	6a24      	ldr	r4, [r4, #32]
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	bf08      	it	eq
 8006c0e:	462c      	moveq	r4, r5
 8006c10:	9400      	str	r4, [sp, #0]
 8006c12:	f7ff ff79 	bl	8006b08 <_strtol_l.isra.0>
 8006c16:	b003      	add	sp, #12
 8006c18:	bd30      	pop	{r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000018 	.word	0x20000018
 8006c20:	2000007c 	.word	0x2000007c

08006c24 <quorem>:
 8006c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	6903      	ldr	r3, [r0, #16]
 8006c2a:	690c      	ldr	r4, [r1, #16]
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	f2c0 8084 	blt.w	8006d3c <quorem+0x118>
 8006c34:	3c01      	subs	r4, #1
 8006c36:	f101 0714 	add.w	r7, r1, #20
 8006c3a:	f100 0614 	add.w	r6, r0, #20
 8006c3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006c42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006c46:	3501      	adds	r5, #1
 8006c48:	fbb0 f5f5 	udiv	r5, r0, r5
 8006c4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006c50:	eb06 030c 	add.w	r3, r6, ip
 8006c54:	eb07 090c 	add.w	r9, r7, ip
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	b39d      	cbz	r5, 8006cc4 <quorem+0xa0>
 8006c5c:	f04f 0a00 	mov.w	sl, #0
 8006c60:	4638      	mov	r0, r7
 8006c62:	46b6      	mov	lr, r6
 8006c64:	46d3      	mov	fp, sl
 8006c66:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c6a:	b293      	uxth	r3, r2
 8006c6c:	fb05 a303 	mla	r3, r5, r3, sl
 8006c70:	0c12      	lsrs	r2, r2, #16
 8006c72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c76:	fb05 a202 	mla	r2, r5, r2, sl
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	ebab 0303 	sub.w	r3, fp, r3
 8006c80:	f8de b000 	ldr.w	fp, [lr]
 8006c84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006c88:	fa1f fb8b 	uxth.w	fp, fp
 8006c8c:	445b      	add	r3, fp
 8006c8e:	fa1f fb82 	uxth.w	fp, r2
 8006c92:	f8de 2000 	ldr.w	r2, [lr]
 8006c96:	4581      	cmp	r9, r0
 8006c98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006caa:	f84e 3b04 	str.w	r3, [lr], #4
 8006cae:	d2da      	bcs.n	8006c66 <quorem+0x42>
 8006cb0:	f856 300c 	ldr.w	r3, [r6, ip]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <quorem+0xa0>
 8006cb6:	9b01      	ldr	r3, [sp, #4]
 8006cb8:	3b04      	subs	r3, #4
 8006cba:	429e      	cmp	r6, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	d331      	bcc.n	8006d24 <quorem+0x100>
 8006cc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	f001 fbb1 	bl	800842c <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	db26      	blt.n	8006d1c <quorem+0xf8>
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f04f 0c00 	mov.w	ip, #0
 8006cd4:	3501      	adds	r5, #1
 8006cd6:	f857 1b04 	ldr.w	r1, [r7], #4
 8006cda:	f8d0 e000 	ldr.w	lr, [r0]
 8006cde:	b28b      	uxth	r3, r1
 8006ce0:	ebac 0303 	sub.w	r3, ip, r3
 8006ce4:	fa1f f28e 	uxth.w	r2, lr
 8006ce8:	4413      	add	r3, r2
 8006cea:	0c0a      	lsrs	r2, r1, #16
 8006cec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cfa:	45b9      	cmp	r9, r7
 8006cfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d00:	f840 3b04 	str.w	r3, [r0], #4
 8006d04:	d2e7      	bcs.n	8006cd6 <quorem+0xb2>
 8006d06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006d0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006d0e:	b92a      	cbnz	r2, 8006d1c <quorem+0xf8>
 8006d10:	3b04      	subs	r3, #4
 8006d12:	429e      	cmp	r6, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	d30b      	bcc.n	8006d30 <quorem+0x10c>
 8006d18:	f8c8 4010 	str.w	r4, [r8, #16]
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	b003      	add	sp, #12
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	3b04      	subs	r3, #4
 8006d28:	2a00      	cmp	r2, #0
 8006d2a:	d1c9      	bne.n	8006cc0 <quorem+0x9c>
 8006d2c:	3c01      	subs	r4, #1
 8006d2e:	e7c4      	b.n	8006cba <quorem+0x96>
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	3b04      	subs	r3, #4
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	d1ef      	bne.n	8006d18 <quorem+0xf4>
 8006d38:	3c01      	subs	r4, #1
 8006d3a:	e7ea      	b.n	8006d12 <quorem+0xee>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e7ee      	b.n	8006d1e <quorem+0xfa>

08006d40 <_dtoa_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	4616      	mov	r6, r2
 8006d46:	461f      	mov	r7, r3
 8006d48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d4a:	b095      	sub	sp, #84	; 0x54
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006d52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d56:	b93d      	cbnz	r5, 8006d68 <_dtoa_r+0x28>
 8006d58:	2010      	movs	r0, #16
 8006d5a:	f001 f8e1 	bl	8007f20 <malloc>
 8006d5e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d64:	6005      	str	r5, [r0, #0]
 8006d66:	60c5      	str	r5, [r0, #12]
 8006d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	b151      	cbz	r1, 8006d84 <_dtoa_r+0x44>
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	2301      	movs	r3, #1
 8006d72:	4093      	lsls	r3, r2
 8006d74:	604a      	str	r2, [r1, #4]
 8006d76:	608b      	str	r3, [r1, #8]
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f001 f938 	bl	8007fee <_Bfree>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	1e3b      	subs	r3, r7, #0
 8006d86:	bfaf      	iteee	ge
 8006d88:	2300      	movge	r3, #0
 8006d8a:	2201      	movlt	r2, #1
 8006d8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d90:	9303      	strlt	r3, [sp, #12]
 8006d92:	bfac      	ite	ge
 8006d94:	f8c8 3000 	strge.w	r3, [r8]
 8006d98:	f8c8 2000 	strlt.w	r2, [r8]
 8006d9c:	4bae      	ldr	r3, [pc, #696]	; (8007058 <_dtoa_r+0x318>)
 8006d9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006da2:	ea33 0308 	bics.w	r3, r3, r8
 8006da6:	d11b      	bne.n	8006de0 <_dtoa_r+0xa0>
 8006da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	b923      	cbnz	r3, 8006dbe <_dtoa_r+0x7e>
 8006db4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f000 8545 	beq.w	8007848 <_dtoa_r+0xb08>
 8006dbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dc0:	b953      	cbnz	r3, 8006dd8 <_dtoa_r+0x98>
 8006dc2:	4ba6      	ldr	r3, [pc, #664]	; (800705c <_dtoa_r+0x31c>)
 8006dc4:	e021      	b.n	8006e0a <_dtoa_r+0xca>
 8006dc6:	4ba6      	ldr	r3, [pc, #664]	; (8007060 <_dtoa_r+0x320>)
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	9806      	ldr	r0, [sp, #24]
 8006dd2:	b015      	add	sp, #84	; 0x54
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	4ba0      	ldr	r3, [pc, #640]	; (800705c <_dtoa_r+0x31c>)
 8006dda:	9306      	str	r3, [sp, #24]
 8006ddc:	3303      	adds	r3, #3
 8006dde:	e7f5      	b.n	8006dcc <_dtoa_r+0x8c>
 8006de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2300      	movs	r3, #0
 8006de8:	4630      	mov	r0, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	f7f9 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8006df0:	4682      	mov	sl, r0
 8006df2:	b160      	cbz	r0, 8006e0e <_dtoa_r+0xce>
 8006df4:	2301      	movs	r3, #1
 8006df6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8520 	beq.w	8007842 <_dtoa_r+0xb02>
 8006e02:	4b98      	ldr	r3, [pc, #608]	; (8007064 <_dtoa_r+0x324>)
 8006e04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	9306      	str	r3, [sp, #24]
 8006e0c:	e7e0      	b.n	8006dd0 <_dtoa_r+0x90>
 8006e0e:	ab12      	add	r3, sp, #72	; 0x48
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	ab13      	add	r3, sp, #76	; 0x4c
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4632      	mov	r2, r6
 8006e18:	463b      	mov	r3, r7
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f001 fbf4 	bl	8008608 <__d2b>
 8006e20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e24:	4683      	mov	fp, r0
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	d07d      	beq.n	8006f26 <_dtoa_r+0x1e6>
 8006e2a:	46b0      	mov	r8, r6
 8006e2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006e34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006e38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006e40:	2200      	movs	r2, #0
 8006e42:	4b89      	ldr	r3, [pc, #548]	; (8007068 <_dtoa_r+0x328>)
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 f98e 	bl	8000168 <__aeabi_dsub>
 8006e4c:	a37c      	add	r3, pc, #496	; (adr r3, 8007040 <_dtoa_r+0x300>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fb41 	bl	80004d8 <__aeabi_dmul>
 8006e56:	a37c      	add	r3, pc, #496	; (adr r3, 8007048 <_dtoa_r+0x308>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 f986 	bl	800016c <__adddf3>
 8006e60:	4606      	mov	r6, r0
 8006e62:	4628      	mov	r0, r5
 8006e64:	460f      	mov	r7, r1
 8006e66:	f7f9 facd 	bl	8000404 <__aeabi_i2d>
 8006e6a:	a379      	add	r3, pc, #484	; (adr r3, 8007050 <_dtoa_r+0x310>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fb32 	bl	80004d8 <__aeabi_dmul>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 f976 	bl	800016c <__adddf3>
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	f7f9 fdd8 	bl	8000a38 <__aeabi_d2iz>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4682      	mov	sl, r0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	f7f9 fd93 	bl	80009bc <__aeabi_dcmplt>
 8006e96:	b148      	cbz	r0, 8006eac <_dtoa_r+0x16c>
 8006e98:	4650      	mov	r0, sl
 8006e9a:	f7f9 fab3 	bl	8000404 <__aeabi_i2d>
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	f7f9 fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea6:	b908      	cbnz	r0, 8006eac <_dtoa_r+0x16c>
 8006ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eac:	f1ba 0f16 	cmp.w	sl, #22
 8006eb0:	d85a      	bhi.n	8006f68 <_dtoa_r+0x228>
 8006eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb6:	496d      	ldr	r1, [pc, #436]	; (800706c <_dtoa_r+0x32c>)
 8006eb8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec0:	f7f9 fd9a 	bl	80009f8 <__aeabi_dcmpgt>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d051      	beq.n	8006f6c <_dtoa_r+0x22c>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ece:	930d      	str	r3, [sp, #52]	; 0x34
 8006ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ed2:	1b5d      	subs	r5, r3, r5
 8006ed4:	1e6b      	subs	r3, r5, #1
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	bf43      	ittte	mi
 8006eda:	2300      	movmi	r3, #0
 8006edc:	f1c5 0901 	rsbmi	r9, r5, #1
 8006ee0:	9307      	strmi	r3, [sp, #28]
 8006ee2:	f04f 0900 	movpl.w	r9, #0
 8006ee6:	f1ba 0f00 	cmp.w	sl, #0
 8006eea:	db41      	blt.n	8006f70 <_dtoa_r+0x230>
 8006eec:	9b07      	ldr	r3, [sp, #28]
 8006eee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006ef2:	4453      	add	r3, sl
 8006ef4:	9307      	str	r3, [sp, #28]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9308      	str	r3, [sp, #32]
 8006efa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006efc:	2b09      	cmp	r3, #9
 8006efe:	f200 808f 	bhi.w	8007020 <_dtoa_r+0x2e0>
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	bfc4      	itt	gt
 8006f06:	3b04      	subgt	r3, #4
 8006f08:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006f0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f0c:	bfc8      	it	gt
 8006f0e:	2500      	movgt	r5, #0
 8006f10:	f1a3 0302 	sub.w	r3, r3, #2
 8006f14:	bfd8      	it	le
 8006f16:	2501      	movle	r5, #1
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	f200 808d 	bhi.w	8007038 <_dtoa_r+0x2f8>
 8006f1e:	e8df f003 	tbb	[pc, r3]
 8006f22:	7d7b      	.short	0x7d7b
 8006f24:	6f2f      	.short	0x6f2f
 8006f26:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f2a:	441d      	add	r5, r3
 8006f2c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006f30:	2820      	cmp	r0, #32
 8006f32:	dd13      	ble.n	8006f5c <_dtoa_r+0x21c>
 8006f34:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006f38:	9b02      	ldr	r3, [sp, #8]
 8006f3a:	fa08 f800 	lsl.w	r8, r8, r0
 8006f3e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006f42:	fa23 f000 	lsr.w	r0, r3, r0
 8006f46:	ea48 0000 	orr.w	r0, r8, r0
 8006f4a:	f7f9 fa4b 	bl	80003e4 <__aeabi_ui2d>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4680      	mov	r8, r0
 8006f52:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006f56:	3d01      	subs	r5, #1
 8006f58:	9310      	str	r3, [sp, #64]	; 0x40
 8006f5a:	e771      	b.n	8006e40 <_dtoa_r+0x100>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	f1c0 0020 	rsb	r0, r0, #32
 8006f62:	fa03 f000 	lsl.w	r0, r3, r0
 8006f66:	e7f0      	b.n	8006f4a <_dtoa_r+0x20a>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e7b0      	b.n	8006ece <_dtoa_r+0x18e>
 8006f6c:	900d      	str	r0, [sp, #52]	; 0x34
 8006f6e:	e7af      	b.n	8006ed0 <_dtoa_r+0x190>
 8006f70:	f1ca 0300 	rsb	r3, sl, #0
 8006f74:	9308      	str	r3, [sp, #32]
 8006f76:	2300      	movs	r3, #0
 8006f78:	eba9 090a 	sub.w	r9, r9, sl
 8006f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f7e:	e7bc      	b.n	8006efa <_dtoa_r+0x1ba>
 8006f80:	2301      	movs	r3, #1
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	dd74      	ble.n	8007074 <_dtoa_r+0x334>
 8006f8a:	4698      	mov	r8, r3
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f92:	6072      	str	r2, [r6, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	f102 0014 	add.w	r0, r2, #20
 8006f9a:	4298      	cmp	r0, r3
 8006f9c:	6871      	ldr	r1, [r6, #4]
 8006f9e:	d96e      	bls.n	800707e <_dtoa_r+0x33e>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fff0 	bl	8007f86 <_Balloc>
 8006fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa8:	6030      	str	r0, [r6, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f1b8 0f0e 	cmp.w	r8, #14
 8006fb0:	9306      	str	r3, [sp, #24]
 8006fb2:	f200 80ed 	bhi.w	8007190 <_dtoa_r+0x450>
 8006fb6:	2d00      	cmp	r5, #0
 8006fb8:	f000 80ea 	beq.w	8007190 <_dtoa_r+0x450>
 8006fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006fc8:	dd77      	ble.n	80070ba <_dtoa_r+0x37a>
 8006fca:	4a28      	ldr	r2, [pc, #160]	; (800706c <_dtoa_r+0x32c>)
 8006fcc:	f00a 030f 	and.w	r3, sl, #15
 8006fd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006fd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006fd8:	06f0      	lsls	r0, r6, #27
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006fe2:	d568      	bpl.n	80070b6 <_dtoa_r+0x376>
 8006fe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006fe8:	4b21      	ldr	r3, [pc, #132]	; (8007070 <_dtoa_r+0x330>)
 8006fea:	2503      	movs	r5, #3
 8006fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ff0:	f7f9 fb9c 	bl	800072c <__aeabi_ddiv>
 8006ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff8:	f006 060f 	and.w	r6, r6, #15
 8006ffc:	4f1c      	ldr	r7, [pc, #112]	; (8007070 <_dtoa_r+0x330>)
 8006ffe:	e04f      	b.n	80070a0 <_dtoa_r+0x360>
 8007000:	2301      	movs	r3, #1
 8007002:	9309      	str	r3, [sp, #36]	; 0x24
 8007004:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007006:	4453      	add	r3, sl
 8007008:	f103 0801 	add.w	r8, r3, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	4643      	mov	r3, r8
 8007010:	2b01      	cmp	r3, #1
 8007012:	bfb8      	it	lt
 8007014:	2301      	movlt	r3, #1
 8007016:	e7ba      	b.n	8006f8e <_dtoa_r+0x24e>
 8007018:	2300      	movs	r3, #0
 800701a:	e7b2      	b.n	8006f82 <_dtoa_r+0x242>
 800701c:	2300      	movs	r3, #0
 800701e:	e7f0      	b.n	8007002 <_dtoa_r+0x2c2>
 8007020:	2501      	movs	r5, #1
 8007022:	2300      	movs	r3, #0
 8007024:	9509      	str	r5, [sp, #36]	; 0x24
 8007026:	931e      	str	r3, [sp, #120]	; 0x78
 8007028:	f04f 33ff 	mov.w	r3, #4294967295
 800702c:	2200      	movs	r2, #0
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	4698      	mov	r8, r3
 8007032:	2312      	movs	r3, #18
 8007034:	921f      	str	r2, [sp, #124]	; 0x7c
 8007036:	e7aa      	b.n	8006f8e <_dtoa_r+0x24e>
 8007038:	2301      	movs	r3, #1
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	e7f4      	b.n	8007028 <_dtoa_r+0x2e8>
 800703e:	bf00      	nop
 8007040:	636f4361 	.word	0x636f4361
 8007044:	3fd287a7 	.word	0x3fd287a7
 8007048:	8b60c8b3 	.word	0x8b60c8b3
 800704c:	3fc68a28 	.word	0x3fc68a28
 8007050:	509f79fb 	.word	0x509f79fb
 8007054:	3fd34413 	.word	0x3fd34413
 8007058:	7ff00000 	.word	0x7ff00000
 800705c:	08008ea9 	.word	0x08008ea9
 8007060:	08008ea0 	.word	0x08008ea0
 8007064:	08008e21 	.word	0x08008e21
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	08008ee0 	.word	0x08008ee0
 8007070:	08008eb8 	.word	0x08008eb8
 8007074:	2301      	movs	r3, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	4698      	mov	r8, r3
 800707a:	461a      	mov	r2, r3
 800707c:	e7da      	b.n	8007034 <_dtoa_r+0x2f4>
 800707e:	3101      	adds	r1, #1
 8007080:	6071      	str	r1, [r6, #4]
 8007082:	0052      	lsls	r2, r2, #1
 8007084:	e787      	b.n	8006f96 <_dtoa_r+0x256>
 8007086:	07f1      	lsls	r1, r6, #31
 8007088:	d508      	bpl.n	800709c <_dtoa_r+0x35c>
 800708a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800708e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007092:	f7f9 fa21 	bl	80004d8 <__aeabi_dmul>
 8007096:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800709a:	3501      	adds	r5, #1
 800709c:	1076      	asrs	r6, r6, #1
 800709e:	3708      	adds	r7, #8
 80070a0:	2e00      	cmp	r6, #0
 80070a2:	d1f0      	bne.n	8007086 <_dtoa_r+0x346>
 80070a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ac:	f7f9 fb3e 	bl	800072c <__aeabi_ddiv>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	e01b      	b.n	80070ee <_dtoa_r+0x3ae>
 80070b6:	2502      	movs	r5, #2
 80070b8:	e7a0      	b.n	8006ffc <_dtoa_r+0x2bc>
 80070ba:	f000 80a4 	beq.w	8007206 <_dtoa_r+0x4c6>
 80070be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070c2:	f1ca 0600 	rsb	r6, sl, #0
 80070c6:	4ba0      	ldr	r3, [pc, #640]	; (8007348 <_dtoa_r+0x608>)
 80070c8:	f006 020f 	and.w	r2, r6, #15
 80070cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	2502      	movs	r5, #2
 80070da:	2300      	movs	r3, #0
 80070dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070e0:	4f9a      	ldr	r7, [pc, #616]	; (800734c <_dtoa_r+0x60c>)
 80070e2:	1136      	asrs	r6, r6, #4
 80070e4:	2e00      	cmp	r6, #0
 80070e6:	f040 8083 	bne.w	80071f0 <_dtoa_r+0x4b0>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e0      	bne.n	80070b0 <_dtoa_r+0x370>
 80070ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 808a 	beq.w	800720a <_dtoa_r+0x4ca>
 80070f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007102:	2200      	movs	r2, #0
 8007104:	4b92      	ldr	r3, [pc, #584]	; (8007350 <_dtoa_r+0x610>)
 8007106:	f7f9 fc59 	bl	80009bc <__aeabi_dcmplt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d07d      	beq.n	800720a <_dtoa_r+0x4ca>
 800710e:	f1b8 0f00 	cmp.w	r8, #0
 8007112:	d07a      	beq.n	800720a <_dtoa_r+0x4ca>
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dd36      	ble.n	8007188 <_dtoa_r+0x448>
 800711a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800711e:	2200      	movs	r2, #0
 8007120:	4b8c      	ldr	r3, [pc, #560]	; (8007354 <_dtoa_r+0x614>)
 8007122:	f7f9 f9d9 	bl	80004d8 <__aeabi_dmul>
 8007126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800712a:	9e04      	ldr	r6, [sp, #16]
 800712c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007130:	3501      	adds	r5, #1
 8007132:	4628      	mov	r0, r5
 8007134:	f7f9 f966 	bl	8000404 <__aeabi_i2d>
 8007138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800713c:	f7f9 f9cc 	bl	80004d8 <__aeabi_dmul>
 8007140:	2200      	movs	r2, #0
 8007142:	4b85      	ldr	r3, [pc, #532]	; (8007358 <_dtoa_r+0x618>)
 8007144:	f7f9 f812 	bl	800016c <__adddf3>
 8007148:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800714c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007150:	950b      	str	r5, [sp, #44]	; 0x2c
 8007152:	2e00      	cmp	r6, #0
 8007154:	d15c      	bne.n	8007210 <_dtoa_r+0x4d0>
 8007156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	4b7f      	ldr	r3, [pc, #508]	; (800735c <_dtoa_r+0x61c>)
 800715e:	f7f9 f803 	bl	8000168 <__aeabi_dsub>
 8007162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007164:	462b      	mov	r3, r5
 8007166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716a:	f7f9 fc45 	bl	80009f8 <__aeabi_dcmpgt>
 800716e:	2800      	cmp	r0, #0
 8007170:	f040 8281 	bne.w	8007676 <_dtoa_r+0x936>
 8007174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800717e:	f7f9 fc1d 	bl	80009bc <__aeabi_dcmplt>
 8007182:	2800      	cmp	r0, #0
 8007184:	f040 8275 	bne.w	8007672 <_dtoa_r+0x932>
 8007188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800718c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f2c0 814b 	blt.w	800742e <_dtoa_r+0x6ee>
 8007198:	f1ba 0f0e 	cmp.w	sl, #14
 800719c:	f300 8147 	bgt.w	800742e <_dtoa_r+0x6ee>
 80071a0:	4b69      	ldr	r3, [pc, #420]	; (8007348 <_dtoa_r+0x608>)
 80071a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f280 80d7 	bge.w	8007364 <_dtoa_r+0x624>
 80071b6:	f1b8 0f00 	cmp.w	r8, #0
 80071ba:	f300 80d3 	bgt.w	8007364 <_dtoa_r+0x624>
 80071be:	f040 8257 	bne.w	8007670 <_dtoa_r+0x930>
 80071c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071c6:	2200      	movs	r2, #0
 80071c8:	4b64      	ldr	r3, [pc, #400]	; (800735c <_dtoa_r+0x61c>)
 80071ca:	f7f9 f985 	bl	80004d8 <__aeabi_dmul>
 80071ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071d2:	f7f9 fc07 	bl	80009e4 <__aeabi_dcmpge>
 80071d6:	4646      	mov	r6, r8
 80071d8:	4647      	mov	r7, r8
 80071da:	2800      	cmp	r0, #0
 80071dc:	f040 822d 	bne.w	800763a <_dtoa_r+0x8fa>
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	9a06      	ldr	r2, [sp, #24]
 80071e4:	1c5d      	adds	r5, r3, #1
 80071e6:	2331      	movs	r3, #49	; 0x31
 80071e8:	f10a 0a01 	add.w	sl, sl, #1
 80071ec:	7013      	strb	r3, [r2, #0]
 80071ee:	e228      	b.n	8007642 <_dtoa_r+0x902>
 80071f0:	07f2      	lsls	r2, r6, #31
 80071f2:	d505      	bpl.n	8007200 <_dtoa_r+0x4c0>
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f7f9 f96e 	bl	80004d8 <__aeabi_dmul>
 80071fc:	2301      	movs	r3, #1
 80071fe:	3501      	adds	r5, #1
 8007200:	1076      	asrs	r6, r6, #1
 8007202:	3708      	adds	r7, #8
 8007204:	e76e      	b.n	80070e4 <_dtoa_r+0x3a4>
 8007206:	2502      	movs	r5, #2
 8007208:	e771      	b.n	80070ee <_dtoa_r+0x3ae>
 800720a:	4657      	mov	r7, sl
 800720c:	4646      	mov	r6, r8
 800720e:	e790      	b.n	8007132 <_dtoa_r+0x3f2>
 8007210:	4b4d      	ldr	r3, [pc, #308]	; (8007348 <_dtoa_r+0x608>)
 8007212:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007216:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800721a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d048      	beq.n	80072b2 <_dtoa_r+0x572>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	2000      	movs	r0, #0
 8007226:	494e      	ldr	r1, [pc, #312]	; (8007360 <_dtoa_r+0x620>)
 8007228:	f7f9 fa80 	bl	800072c <__aeabi_ddiv>
 800722c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007230:	f7f8 ff9a 	bl	8000168 <__aeabi_dsub>
 8007234:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007238:	9d06      	ldr	r5, [sp, #24]
 800723a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723e:	f7f9 fbfb 	bl	8000a38 <__aeabi_d2iz>
 8007242:	9011      	str	r0, [sp, #68]	; 0x44
 8007244:	f7f9 f8de 	bl	8000404 <__aeabi_i2d>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007250:	f7f8 ff8a 	bl	8000168 <__aeabi_dsub>
 8007254:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800725a:	3330      	adds	r3, #48	; 0x30
 800725c:	f805 3b01 	strb.w	r3, [r5], #1
 8007260:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007264:	f7f9 fbaa 	bl	80009bc <__aeabi_dcmplt>
 8007268:	2800      	cmp	r0, #0
 800726a:	d163      	bne.n	8007334 <_dtoa_r+0x5f4>
 800726c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007270:	2000      	movs	r0, #0
 8007272:	4937      	ldr	r1, [pc, #220]	; (8007350 <_dtoa_r+0x610>)
 8007274:	f7f8 ff78 	bl	8000168 <__aeabi_dsub>
 8007278:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800727c:	f7f9 fb9e 	bl	80009bc <__aeabi_dcmplt>
 8007280:	2800      	cmp	r0, #0
 8007282:	f040 80b5 	bne.w	80073f0 <_dtoa_r+0x6b0>
 8007286:	9b06      	ldr	r3, [sp, #24]
 8007288:	1aeb      	subs	r3, r5, r3
 800728a:	429e      	cmp	r6, r3
 800728c:	f77f af7c 	ble.w	8007188 <_dtoa_r+0x448>
 8007290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007294:	2200      	movs	r2, #0
 8007296:	4b2f      	ldr	r3, [pc, #188]	; (8007354 <_dtoa_r+0x614>)
 8007298:	f7f9 f91e 	bl	80004d8 <__aeabi_dmul>
 800729c:	2200      	movs	r2, #0
 800729e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a6:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <_dtoa_r+0x614>)
 80072a8:	f7f9 f916 	bl	80004d8 <__aeabi_dmul>
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	e7c3      	b.n	800723a <_dtoa_r+0x4fa>
 80072b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072b6:	f7f9 f90f 	bl	80004d8 <__aeabi_dmul>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80072c0:	199d      	adds	r5, r3, r6
 80072c2:	461e      	mov	r6, r3
 80072c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c8:	f7f9 fbb6 	bl	8000a38 <__aeabi_d2iz>
 80072cc:	9011      	str	r0, [sp, #68]	; 0x44
 80072ce:	f7f9 f899 	bl	8000404 <__aeabi_i2d>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072da:	f7f8 ff45 	bl	8000168 <__aeabi_dsub>
 80072de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e4:	3330      	adds	r3, #48	; 0x30
 80072e6:	f806 3b01 	strb.w	r3, [r6], #1
 80072ea:	42ae      	cmp	r6, r5
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	d124      	bne.n	800733c <_dtoa_r+0x5fc>
 80072f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072f6:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <_dtoa_r+0x620>)
 80072f8:	f7f8 ff38 	bl	800016c <__adddf3>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007304:	f7f9 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8007308:	2800      	cmp	r0, #0
 800730a:	d171      	bne.n	80073f0 <_dtoa_r+0x6b0>
 800730c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007310:	2000      	movs	r0, #0
 8007312:	4913      	ldr	r1, [pc, #76]	; (8007360 <_dtoa_r+0x620>)
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007320:	f7f9 fb4c 	bl	80009bc <__aeabi_dcmplt>
 8007324:	2800      	cmp	r0, #0
 8007326:	f43f af2f 	beq.w	8007188 <_dtoa_r+0x448>
 800732a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800732e:	1e6a      	subs	r2, r5, #1
 8007330:	2b30      	cmp	r3, #48	; 0x30
 8007332:	d001      	beq.n	8007338 <_dtoa_r+0x5f8>
 8007334:	46ba      	mov	sl, r7
 8007336:	e04a      	b.n	80073ce <_dtoa_r+0x68e>
 8007338:	4615      	mov	r5, r2
 800733a:	e7f6      	b.n	800732a <_dtoa_r+0x5ea>
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <_dtoa_r+0x614>)
 800733e:	f7f9 f8cb 	bl	80004d8 <__aeabi_dmul>
 8007342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007346:	e7bd      	b.n	80072c4 <_dtoa_r+0x584>
 8007348:	08008ee0 	.word	0x08008ee0
 800734c:	08008eb8 	.word	0x08008eb8
 8007350:	3ff00000 	.word	0x3ff00000
 8007354:	40240000 	.word	0x40240000
 8007358:	401c0000 	.word	0x401c0000
 800735c:	40140000 	.word	0x40140000
 8007360:	3fe00000 	.word	0x3fe00000
 8007364:	9d06      	ldr	r5, [sp, #24]
 8007366:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800736a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 f9db 	bl	800072c <__aeabi_ddiv>
 8007376:	f7f9 fb5f 	bl	8000a38 <__aeabi_d2iz>
 800737a:	4681      	mov	r9, r0
 800737c:	f7f9 f842 	bl	8000404 <__aeabi_i2d>
 8007380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007384:	f7f9 f8a8 	bl	80004d8 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f7f8 feea 	bl	8000168 <__aeabi_dsub>
 8007394:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007398:	f805 6b01 	strb.w	r6, [r5], #1
 800739c:	9e06      	ldr	r6, [sp, #24]
 800739e:	4602      	mov	r2, r0
 80073a0:	1bae      	subs	r6, r5, r6
 80073a2:	45b0      	cmp	r8, r6
 80073a4:	460b      	mov	r3, r1
 80073a6:	d135      	bne.n	8007414 <_dtoa_r+0x6d4>
 80073a8:	f7f8 fee0 	bl	800016c <__adddf3>
 80073ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b0:	4606      	mov	r6, r0
 80073b2:	460f      	mov	r7, r1
 80073b4:	f7f9 fb20 	bl	80009f8 <__aeabi_dcmpgt>
 80073b8:	b9c8      	cbnz	r0, 80073ee <_dtoa_r+0x6ae>
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	4630      	mov	r0, r6
 80073c0:	4639      	mov	r1, r7
 80073c2:	f7f9 faf1 	bl	80009a8 <__aeabi_dcmpeq>
 80073c6:	b110      	cbz	r0, 80073ce <_dtoa_r+0x68e>
 80073c8:	f019 0f01 	tst.w	r9, #1
 80073cc:	d10f      	bne.n	80073ee <_dtoa_r+0x6ae>
 80073ce:	4659      	mov	r1, fp
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fe0c 	bl	8007fee <_Bfree>
 80073d6:	2300      	movs	r3, #0
 80073d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073da:	702b      	strb	r3, [r5, #0]
 80073dc:	f10a 0301 	add.w	r3, sl, #1
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f43f acf3 	beq.w	8006dd0 <_dtoa_r+0x90>
 80073ea:	601d      	str	r5, [r3, #0]
 80073ec:	e4f0      	b.n	8006dd0 <_dtoa_r+0x90>
 80073ee:	4657      	mov	r7, sl
 80073f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073f4:	1e6b      	subs	r3, r5, #1
 80073f6:	2a39      	cmp	r2, #57	; 0x39
 80073f8:	d106      	bne.n	8007408 <_dtoa_r+0x6c8>
 80073fa:	9a06      	ldr	r2, [sp, #24]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d107      	bne.n	8007410 <_dtoa_r+0x6d0>
 8007400:	2330      	movs	r3, #48	; 0x30
 8007402:	7013      	strb	r3, [r2, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	3701      	adds	r7, #1
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	3201      	adds	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e791      	b.n	8007334 <_dtoa_r+0x5f4>
 8007410:	461d      	mov	r5, r3
 8007412:	e7ed      	b.n	80073f0 <_dtoa_r+0x6b0>
 8007414:	2200      	movs	r2, #0
 8007416:	4b99      	ldr	r3, [pc, #612]	; (800767c <_dtoa_r+0x93c>)
 8007418:	f7f9 f85e 	bl	80004d8 <__aeabi_dmul>
 800741c:	2200      	movs	r2, #0
 800741e:	2300      	movs	r3, #0
 8007420:	4606      	mov	r6, r0
 8007422:	460f      	mov	r7, r1
 8007424:	f7f9 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8007428:	2800      	cmp	r0, #0
 800742a:	d09e      	beq.n	800736a <_dtoa_r+0x62a>
 800742c:	e7cf      	b.n	80073ce <_dtoa_r+0x68e>
 800742e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007430:	2a00      	cmp	r2, #0
 8007432:	f000 8088 	beq.w	8007546 <_dtoa_r+0x806>
 8007436:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007438:	2a01      	cmp	r2, #1
 800743a:	dc6d      	bgt.n	8007518 <_dtoa_r+0x7d8>
 800743c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800743e:	2a00      	cmp	r2, #0
 8007440:	d066      	beq.n	8007510 <_dtoa_r+0x7d0>
 8007442:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007446:	464d      	mov	r5, r9
 8007448:	9e08      	ldr	r6, [sp, #32]
 800744a:	9a07      	ldr	r2, [sp, #28]
 800744c:	2101      	movs	r1, #1
 800744e:	441a      	add	r2, r3
 8007450:	4620      	mov	r0, r4
 8007452:	4499      	add	r9, r3
 8007454:	9207      	str	r2, [sp, #28]
 8007456:	f000 fea8 	bl	80081aa <__i2b>
 800745a:	4607      	mov	r7, r0
 800745c:	2d00      	cmp	r5, #0
 800745e:	dd0b      	ble.n	8007478 <_dtoa_r+0x738>
 8007460:	9b07      	ldr	r3, [sp, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd08      	ble.n	8007478 <_dtoa_r+0x738>
 8007466:	42ab      	cmp	r3, r5
 8007468:	bfa8      	it	ge
 800746a:	462b      	movge	r3, r5
 800746c:	9a07      	ldr	r2, [sp, #28]
 800746e:	eba9 0903 	sub.w	r9, r9, r3
 8007472:	1aed      	subs	r5, r5, r3
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	b1eb      	cbz	r3, 80074b8 <_dtoa_r+0x778>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d065      	beq.n	800754e <_dtoa_r+0x80e>
 8007482:	b18e      	cbz	r6, 80074a8 <_dtoa_r+0x768>
 8007484:	4639      	mov	r1, r7
 8007486:	4632      	mov	r2, r6
 8007488:	4620      	mov	r0, r4
 800748a:	f000 ff2d 	bl	80082e8 <__pow5mult>
 800748e:	465a      	mov	r2, fp
 8007490:	4601      	mov	r1, r0
 8007492:	4607      	mov	r7, r0
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fe91 	bl	80081bc <__multiply>
 800749a:	4659      	mov	r1, fp
 800749c:	900a      	str	r0, [sp, #40]	; 0x28
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fda5 	bl	8007fee <_Bfree>
 80074a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a6:	469b      	mov	fp, r3
 80074a8:	9b08      	ldr	r3, [sp, #32]
 80074aa:	1b9a      	subs	r2, r3, r6
 80074ac:	d004      	beq.n	80074b8 <_dtoa_r+0x778>
 80074ae:	4659      	mov	r1, fp
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 ff19 	bl	80082e8 <__pow5mult>
 80074b6:	4683      	mov	fp, r0
 80074b8:	2101      	movs	r1, #1
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 fe75 	bl	80081aa <__i2b>
 80074c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c2:	4606      	mov	r6, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 81c6 	beq.w	8007856 <_dtoa_r+0xb16>
 80074ca:	461a      	mov	r2, r3
 80074cc:	4601      	mov	r1, r0
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 ff0a 	bl	80082e8 <__pow5mult>
 80074d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80074d6:	4606      	mov	r6, r0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	dc3e      	bgt.n	800755a <_dtoa_r+0x81a>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d137      	bne.n	8007552 <_dtoa_r+0x812>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d134      	bne.n	8007556 <_dtoa_r+0x816>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074f2:	0d1b      	lsrs	r3, r3, #20
 80074f4:	051b      	lsls	r3, r3, #20
 80074f6:	b12b      	cbz	r3, 8007504 <_dtoa_r+0x7c4>
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	f109 0901 	add.w	r9, r9, #1
 80074fe:	3301      	adds	r3, #1
 8007500:	9307      	str	r3, [sp, #28]
 8007502:	2301      	movs	r3, #1
 8007504:	9308      	str	r3, [sp, #32]
 8007506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007508:	2b00      	cmp	r3, #0
 800750a:	d128      	bne.n	800755e <_dtoa_r+0x81e>
 800750c:	2001      	movs	r0, #1
 800750e:	e02e      	b.n	800756e <_dtoa_r+0x82e>
 8007510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007512:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007516:	e796      	b.n	8007446 <_dtoa_r+0x706>
 8007518:	9b08      	ldr	r3, [sp, #32]
 800751a:	f108 36ff 	add.w	r6, r8, #4294967295
 800751e:	42b3      	cmp	r3, r6
 8007520:	bfb7      	itett	lt
 8007522:	9b08      	ldrlt	r3, [sp, #32]
 8007524:	1b9e      	subge	r6, r3, r6
 8007526:	1af2      	sublt	r2, r6, r3
 8007528:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800752a:	bfbf      	itttt	lt
 800752c:	9608      	strlt	r6, [sp, #32]
 800752e:	189b      	addlt	r3, r3, r2
 8007530:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007532:	2600      	movlt	r6, #0
 8007534:	f1b8 0f00 	cmp.w	r8, #0
 8007538:	bfb9      	ittee	lt
 800753a:	eba9 0508 	sublt.w	r5, r9, r8
 800753e:	2300      	movlt	r3, #0
 8007540:	464d      	movge	r5, r9
 8007542:	4643      	movge	r3, r8
 8007544:	e781      	b.n	800744a <_dtoa_r+0x70a>
 8007546:	9e08      	ldr	r6, [sp, #32]
 8007548:	464d      	mov	r5, r9
 800754a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800754c:	e786      	b.n	800745c <_dtoa_r+0x71c>
 800754e:	9a08      	ldr	r2, [sp, #32]
 8007550:	e7ad      	b.n	80074ae <_dtoa_r+0x76e>
 8007552:	2300      	movs	r3, #0
 8007554:	e7d6      	b.n	8007504 <_dtoa_r+0x7c4>
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	e7d4      	b.n	8007504 <_dtoa_r+0x7c4>
 800755a:	2300      	movs	r3, #0
 800755c:	9308      	str	r3, [sp, #32]
 800755e:	6933      	ldr	r3, [r6, #16]
 8007560:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007564:	6918      	ldr	r0, [r3, #16]
 8007566:	f000 fdd2 	bl	800810e <__hi0bits>
 800756a:	f1c0 0020 	rsb	r0, r0, #32
 800756e:	9b07      	ldr	r3, [sp, #28]
 8007570:	4418      	add	r0, r3
 8007572:	f010 001f 	ands.w	r0, r0, #31
 8007576:	d047      	beq.n	8007608 <_dtoa_r+0x8c8>
 8007578:	f1c0 0320 	rsb	r3, r0, #32
 800757c:	2b04      	cmp	r3, #4
 800757e:	dd3b      	ble.n	80075f8 <_dtoa_r+0x8b8>
 8007580:	9b07      	ldr	r3, [sp, #28]
 8007582:	f1c0 001c 	rsb	r0, r0, #28
 8007586:	4481      	add	r9, r0
 8007588:	4405      	add	r5, r0
 800758a:	4403      	add	r3, r0
 800758c:	9307      	str	r3, [sp, #28]
 800758e:	f1b9 0f00 	cmp.w	r9, #0
 8007592:	dd05      	ble.n	80075a0 <_dtoa_r+0x860>
 8007594:	4659      	mov	r1, fp
 8007596:	464a      	mov	r2, r9
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fef3 	bl	8008384 <__lshift>
 800759e:	4683      	mov	fp, r0
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd05      	ble.n	80075b2 <_dtoa_r+0x872>
 80075a6:	4631      	mov	r1, r6
 80075a8:	461a      	mov	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 feea 	bl	8008384 <__lshift>
 80075b0:	4606      	mov	r6, r0
 80075b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b4:	b353      	cbz	r3, 800760c <_dtoa_r+0x8cc>
 80075b6:	4631      	mov	r1, r6
 80075b8:	4658      	mov	r0, fp
 80075ba:	f000 ff37 	bl	800842c <__mcmp>
 80075be:	2800      	cmp	r0, #0
 80075c0:	da24      	bge.n	800760c <_dtoa_r+0x8cc>
 80075c2:	2300      	movs	r3, #0
 80075c4:	4659      	mov	r1, fp
 80075c6:	220a      	movs	r2, #10
 80075c8:	4620      	mov	r0, r4
 80075ca:	f000 fd27 	bl	800801c <__multadd>
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075d4:	4683      	mov	fp, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8144 	beq.w	8007864 <_dtoa_r+0xb24>
 80075dc:	2300      	movs	r3, #0
 80075de:	4639      	mov	r1, r7
 80075e0:	220a      	movs	r2, #10
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fd1a 	bl	800801c <__multadd>
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	4607      	mov	r7, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	dc4d      	bgt.n	800768c <_dtoa_r+0x94c>
 80075f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	dd4a      	ble.n	800768c <_dtoa_r+0x94c>
 80075f6:	e011      	b.n	800761c <_dtoa_r+0x8dc>
 80075f8:	d0c9      	beq.n	800758e <_dtoa_r+0x84e>
 80075fa:	9a07      	ldr	r2, [sp, #28]
 80075fc:	331c      	adds	r3, #28
 80075fe:	441a      	add	r2, r3
 8007600:	4499      	add	r9, r3
 8007602:	441d      	add	r5, r3
 8007604:	4613      	mov	r3, r2
 8007606:	e7c1      	b.n	800758c <_dtoa_r+0x84c>
 8007608:	4603      	mov	r3, r0
 800760a:	e7f6      	b.n	80075fa <_dtoa_r+0x8ba>
 800760c:	f1b8 0f00 	cmp.w	r8, #0
 8007610:	dc36      	bgt.n	8007680 <_dtoa_r+0x940>
 8007612:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007614:	2b02      	cmp	r3, #2
 8007616:	dd33      	ble.n	8007680 <_dtoa_r+0x940>
 8007618:	f8cd 8010 	str.w	r8, [sp, #16]
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	b963      	cbnz	r3, 800763a <_dtoa_r+0x8fa>
 8007620:	4631      	mov	r1, r6
 8007622:	2205      	movs	r2, #5
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fcf9 	bl	800801c <__multadd>
 800762a:	4601      	mov	r1, r0
 800762c:	4606      	mov	r6, r0
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fefc 	bl	800842c <__mcmp>
 8007634:	2800      	cmp	r0, #0
 8007636:	f73f add3 	bgt.w	80071e0 <_dtoa_r+0x4a0>
 800763a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800763c:	9d06      	ldr	r5, [sp, #24]
 800763e:	ea6f 0a03 	mvn.w	sl, r3
 8007642:	f04f 0900 	mov.w	r9, #0
 8007646:	4631      	mov	r1, r6
 8007648:	4620      	mov	r0, r4
 800764a:	f000 fcd0 	bl	8007fee <_Bfree>
 800764e:	2f00      	cmp	r7, #0
 8007650:	f43f aebd 	beq.w	80073ce <_dtoa_r+0x68e>
 8007654:	f1b9 0f00 	cmp.w	r9, #0
 8007658:	d005      	beq.n	8007666 <_dtoa_r+0x926>
 800765a:	45b9      	cmp	r9, r7
 800765c:	d003      	beq.n	8007666 <_dtoa_r+0x926>
 800765e:	4649      	mov	r1, r9
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fcc4 	bl	8007fee <_Bfree>
 8007666:	4639      	mov	r1, r7
 8007668:	4620      	mov	r0, r4
 800766a:	f000 fcc0 	bl	8007fee <_Bfree>
 800766e:	e6ae      	b.n	80073ce <_dtoa_r+0x68e>
 8007670:	2600      	movs	r6, #0
 8007672:	4637      	mov	r7, r6
 8007674:	e7e1      	b.n	800763a <_dtoa_r+0x8fa>
 8007676:	46ba      	mov	sl, r7
 8007678:	4637      	mov	r7, r6
 800767a:	e5b1      	b.n	80071e0 <_dtoa_r+0x4a0>
 800767c:	40240000 	.word	0x40240000
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	f8cd 8010 	str.w	r8, [sp, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80f3 	beq.w	8007872 <_dtoa_r+0xb32>
 800768c:	2d00      	cmp	r5, #0
 800768e:	dd05      	ble.n	800769c <_dtoa_r+0x95c>
 8007690:	4639      	mov	r1, r7
 8007692:	462a      	mov	r2, r5
 8007694:	4620      	mov	r0, r4
 8007696:	f000 fe75 	bl	8008384 <__lshift>
 800769a:	4607      	mov	r7, r0
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04c      	beq.n	800773c <_dtoa_r+0x9fc>
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fc6e 	bl	8007f86 <_Balloc>
 80076aa:	4605      	mov	r5, r0
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	f107 010c 	add.w	r1, r7, #12
 80076b2:	3202      	adds	r2, #2
 80076b4:	0092      	lsls	r2, r2, #2
 80076b6:	300c      	adds	r0, #12
 80076b8:	f000 fc5a 	bl	8007f70 <memcpy>
 80076bc:	2201      	movs	r2, #1
 80076be:	4629      	mov	r1, r5
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fe5f 	bl	8008384 <__lshift>
 80076c6:	46b9      	mov	r9, r7
 80076c8:	4607      	mov	r7, r0
 80076ca:	9b06      	ldr	r3, [sp, #24]
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	9b02      	ldr	r3, [sp, #8]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	9308      	str	r3, [sp, #32]
 80076d6:	4631      	mov	r1, r6
 80076d8:	4658      	mov	r0, fp
 80076da:	f7ff faa3 	bl	8006c24 <quorem>
 80076de:	4649      	mov	r1, r9
 80076e0:	4605      	mov	r5, r0
 80076e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80076e6:	4658      	mov	r0, fp
 80076e8:	f000 fea0 	bl	800842c <__mcmp>
 80076ec:	463a      	mov	r2, r7
 80076ee:	9002      	str	r0, [sp, #8]
 80076f0:	4631      	mov	r1, r6
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 feb4 	bl	8008460 <__mdiff>
 80076f8:	68c3      	ldr	r3, [r0, #12]
 80076fa:	4602      	mov	r2, r0
 80076fc:	bb03      	cbnz	r3, 8007740 <_dtoa_r+0xa00>
 80076fe:	4601      	mov	r1, r0
 8007700:	9009      	str	r0, [sp, #36]	; 0x24
 8007702:	4658      	mov	r0, fp
 8007704:	f000 fe92 	bl	800842c <__mcmp>
 8007708:	4603      	mov	r3, r0
 800770a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800770c:	4611      	mov	r1, r2
 800770e:	4620      	mov	r0, r4
 8007710:	9309      	str	r3, [sp, #36]	; 0x24
 8007712:	f000 fc6c 	bl	8007fee <_Bfree>
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	b9a3      	cbnz	r3, 8007744 <_dtoa_r+0xa04>
 800771a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800771c:	b992      	cbnz	r2, 8007744 <_dtoa_r+0xa04>
 800771e:	9a08      	ldr	r2, [sp, #32]
 8007720:	b982      	cbnz	r2, 8007744 <_dtoa_r+0xa04>
 8007722:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007726:	d029      	beq.n	800777c <_dtoa_r+0xa3c>
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	dd01      	ble.n	8007732 <_dtoa_r+0x9f2>
 800772e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007732:	9b07      	ldr	r3, [sp, #28]
 8007734:	1c5d      	adds	r5, r3, #1
 8007736:	f883 8000 	strb.w	r8, [r3]
 800773a:	e784      	b.n	8007646 <_dtoa_r+0x906>
 800773c:	4638      	mov	r0, r7
 800773e:	e7c2      	b.n	80076c6 <_dtoa_r+0x986>
 8007740:	2301      	movs	r3, #1
 8007742:	e7e3      	b.n	800770c <_dtoa_r+0x9cc>
 8007744:	9a02      	ldr	r2, [sp, #8]
 8007746:	2a00      	cmp	r2, #0
 8007748:	db04      	blt.n	8007754 <_dtoa_r+0xa14>
 800774a:	d123      	bne.n	8007794 <_dtoa_r+0xa54>
 800774c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800774e:	bb0a      	cbnz	r2, 8007794 <_dtoa_r+0xa54>
 8007750:	9a08      	ldr	r2, [sp, #32]
 8007752:	b9fa      	cbnz	r2, 8007794 <_dtoa_r+0xa54>
 8007754:	2b00      	cmp	r3, #0
 8007756:	ddec      	ble.n	8007732 <_dtoa_r+0x9f2>
 8007758:	4659      	mov	r1, fp
 800775a:	2201      	movs	r2, #1
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fe11 	bl	8008384 <__lshift>
 8007762:	4631      	mov	r1, r6
 8007764:	4683      	mov	fp, r0
 8007766:	f000 fe61 	bl	800842c <__mcmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	dc03      	bgt.n	8007776 <_dtoa_r+0xa36>
 800776e:	d1e0      	bne.n	8007732 <_dtoa_r+0x9f2>
 8007770:	f018 0f01 	tst.w	r8, #1
 8007774:	d0dd      	beq.n	8007732 <_dtoa_r+0x9f2>
 8007776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800777a:	d1d8      	bne.n	800772e <_dtoa_r+0x9ee>
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9a07      	ldr	r2, [sp, #28]
 8007780:	1c5d      	adds	r5, r3, #1
 8007782:	2339      	movs	r3, #57	; 0x39
 8007784:	7013      	strb	r3, [r2, #0]
 8007786:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800778a:	1e6a      	subs	r2, r5, #1
 800778c:	2b39      	cmp	r3, #57	; 0x39
 800778e:	d04d      	beq.n	800782c <_dtoa_r+0xaec>
 8007790:	3301      	adds	r3, #1
 8007792:	e052      	b.n	800783a <_dtoa_r+0xafa>
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f102 0501 	add.w	r5, r2, #1
 800779c:	dd06      	ble.n	80077ac <_dtoa_r+0xa6c>
 800779e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80077a2:	d0eb      	beq.n	800777c <_dtoa_r+0xa3c>
 80077a4:	f108 0801 	add.w	r8, r8, #1
 80077a8:	9b07      	ldr	r3, [sp, #28]
 80077aa:	e7c4      	b.n	8007736 <_dtoa_r+0x9f6>
 80077ac:	9b06      	ldr	r3, [sp, #24]
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	1aeb      	subs	r3, r5, r3
 80077b2:	4293      	cmp	r3, r2
 80077b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80077b8:	d021      	beq.n	80077fe <_dtoa_r+0xabe>
 80077ba:	4659      	mov	r1, fp
 80077bc:	2300      	movs	r3, #0
 80077be:	220a      	movs	r2, #10
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fc2b 	bl	800801c <__multadd>
 80077c6:	45b9      	cmp	r9, r7
 80077c8:	4683      	mov	fp, r0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	f04f 020a 	mov.w	r2, #10
 80077d2:	4649      	mov	r1, r9
 80077d4:	4620      	mov	r0, r4
 80077d6:	d105      	bne.n	80077e4 <_dtoa_r+0xaa4>
 80077d8:	f000 fc20 	bl	800801c <__multadd>
 80077dc:	4681      	mov	r9, r0
 80077de:	4607      	mov	r7, r0
 80077e0:	9507      	str	r5, [sp, #28]
 80077e2:	e778      	b.n	80076d6 <_dtoa_r+0x996>
 80077e4:	f000 fc1a 	bl	800801c <__multadd>
 80077e8:	4639      	mov	r1, r7
 80077ea:	4681      	mov	r9, r0
 80077ec:	2300      	movs	r3, #0
 80077ee:	220a      	movs	r2, #10
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fc13 	bl	800801c <__multadd>
 80077f6:	4607      	mov	r7, r0
 80077f8:	e7f2      	b.n	80077e0 <_dtoa_r+0xaa0>
 80077fa:	f04f 0900 	mov.w	r9, #0
 80077fe:	4659      	mov	r1, fp
 8007800:	2201      	movs	r2, #1
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fdbe 	bl	8008384 <__lshift>
 8007808:	4631      	mov	r1, r6
 800780a:	4683      	mov	fp, r0
 800780c:	f000 fe0e 	bl	800842c <__mcmp>
 8007810:	2800      	cmp	r0, #0
 8007812:	dcb8      	bgt.n	8007786 <_dtoa_r+0xa46>
 8007814:	d102      	bne.n	800781c <_dtoa_r+0xadc>
 8007816:	f018 0f01 	tst.w	r8, #1
 800781a:	d1b4      	bne.n	8007786 <_dtoa_r+0xa46>
 800781c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007820:	1e6a      	subs	r2, r5, #1
 8007822:	2b30      	cmp	r3, #48	; 0x30
 8007824:	f47f af0f 	bne.w	8007646 <_dtoa_r+0x906>
 8007828:	4615      	mov	r5, r2
 800782a:	e7f7      	b.n	800781c <_dtoa_r+0xadc>
 800782c:	9b06      	ldr	r3, [sp, #24]
 800782e:	4293      	cmp	r3, r2
 8007830:	d105      	bne.n	800783e <_dtoa_r+0xafe>
 8007832:	2331      	movs	r3, #49	; 0x31
 8007834:	9a06      	ldr	r2, [sp, #24]
 8007836:	f10a 0a01 	add.w	sl, sl, #1
 800783a:	7013      	strb	r3, [r2, #0]
 800783c:	e703      	b.n	8007646 <_dtoa_r+0x906>
 800783e:	4615      	mov	r5, r2
 8007840:	e7a1      	b.n	8007786 <_dtoa_r+0xa46>
 8007842:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <_dtoa_r+0xb60>)
 8007844:	f7ff bae1 	b.w	8006e0a <_dtoa_r+0xca>
 8007848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800784a:	2b00      	cmp	r3, #0
 800784c:	f47f aabb 	bne.w	8006dc6 <_dtoa_r+0x86>
 8007850:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <_dtoa_r+0xb64>)
 8007852:	f7ff bada 	b.w	8006e0a <_dtoa_r+0xca>
 8007856:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007858:	2b01      	cmp	r3, #1
 800785a:	f77f ae3f 	ble.w	80074dc <_dtoa_r+0x79c>
 800785e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007860:	9308      	str	r3, [sp, #32]
 8007862:	e653      	b.n	800750c <_dtoa_r+0x7cc>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	dc03      	bgt.n	8007872 <_dtoa_r+0xb32>
 800786a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800786c:	2b02      	cmp	r3, #2
 800786e:	f73f aed5 	bgt.w	800761c <_dtoa_r+0x8dc>
 8007872:	9d06      	ldr	r5, [sp, #24]
 8007874:	4631      	mov	r1, r6
 8007876:	4658      	mov	r0, fp
 8007878:	f7ff f9d4 	bl	8006c24 <quorem>
 800787c:	9b06      	ldr	r3, [sp, #24]
 800787e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007882:	f805 8b01 	strb.w	r8, [r5], #1
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	1aeb      	subs	r3, r5, r3
 800788a:	429a      	cmp	r2, r3
 800788c:	ddb5      	ble.n	80077fa <_dtoa_r+0xaba>
 800788e:	4659      	mov	r1, fp
 8007890:	2300      	movs	r3, #0
 8007892:	220a      	movs	r2, #10
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fbc1 	bl	800801c <__multadd>
 800789a:	4683      	mov	fp, r0
 800789c:	e7ea      	b.n	8007874 <_dtoa_r+0xb34>
 800789e:	bf00      	nop
 80078a0:	08008e20 	.word	0x08008e20
 80078a4:	08008ea0 	.word	0x08008ea0

080078a8 <rshift>:
 80078a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078aa:	6906      	ldr	r6, [r0, #16]
 80078ac:	114b      	asrs	r3, r1, #5
 80078ae:	429e      	cmp	r6, r3
 80078b0:	f100 0414 	add.w	r4, r0, #20
 80078b4:	dd31      	ble.n	800791a <rshift+0x72>
 80078b6:	f011 011f 	ands.w	r1, r1, #31
 80078ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80078c2:	d108      	bne.n	80078d6 <rshift+0x2e>
 80078c4:	4621      	mov	r1, r4
 80078c6:	42b2      	cmp	r2, r6
 80078c8:	460b      	mov	r3, r1
 80078ca:	d211      	bcs.n	80078f0 <rshift+0x48>
 80078cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80078d0:	f841 3b04 	str.w	r3, [r1], #4
 80078d4:	e7f7      	b.n	80078c6 <rshift+0x1e>
 80078d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80078da:	4623      	mov	r3, r4
 80078dc:	f1c1 0c20 	rsb	ip, r1, #32
 80078e0:	40cd      	lsrs	r5, r1
 80078e2:	3204      	adds	r2, #4
 80078e4:	42b2      	cmp	r2, r6
 80078e6:	4617      	mov	r7, r2
 80078e8:	d30d      	bcc.n	8007906 <rshift+0x5e>
 80078ea:	601d      	str	r5, [r3, #0]
 80078ec:	b105      	cbz	r5, 80078f0 <rshift+0x48>
 80078ee:	3304      	adds	r3, #4
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	eba3 0204 	sub.w	r2, r3, r4
 80078f6:	bf08      	it	eq
 80078f8:	2300      	moveq	r3, #0
 80078fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078fe:	6102      	str	r2, [r0, #16]
 8007900:	bf08      	it	eq
 8007902:	6143      	streq	r3, [r0, #20]
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007906:	683f      	ldr	r7, [r7, #0]
 8007908:	fa07 f70c 	lsl.w	r7, r7, ip
 800790c:	433d      	orrs	r5, r7
 800790e:	f843 5b04 	str.w	r5, [r3], #4
 8007912:	f852 5b04 	ldr.w	r5, [r2], #4
 8007916:	40cd      	lsrs	r5, r1
 8007918:	e7e4      	b.n	80078e4 <rshift+0x3c>
 800791a:	4623      	mov	r3, r4
 800791c:	e7e8      	b.n	80078f0 <rshift+0x48>

0800791e <__hexdig_fun>:
 800791e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007922:	2b09      	cmp	r3, #9
 8007924:	d802      	bhi.n	800792c <__hexdig_fun+0xe>
 8007926:	3820      	subs	r0, #32
 8007928:	b2c0      	uxtb	r0, r0
 800792a:	4770      	bx	lr
 800792c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007930:	2b05      	cmp	r3, #5
 8007932:	d801      	bhi.n	8007938 <__hexdig_fun+0x1a>
 8007934:	3847      	subs	r0, #71	; 0x47
 8007936:	e7f7      	b.n	8007928 <__hexdig_fun+0xa>
 8007938:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800793c:	2b05      	cmp	r3, #5
 800793e:	d801      	bhi.n	8007944 <__hexdig_fun+0x26>
 8007940:	3827      	subs	r0, #39	; 0x27
 8007942:	e7f1      	b.n	8007928 <__hexdig_fun+0xa>
 8007944:	2000      	movs	r0, #0
 8007946:	4770      	bx	lr

08007948 <__gethex>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	b08b      	sub	sp, #44	; 0x2c
 800794e:	9002      	str	r0, [sp, #8]
 8007950:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007952:	468a      	mov	sl, r1
 8007954:	4690      	mov	r8, r2
 8007956:	9306      	str	r3, [sp, #24]
 8007958:	f000 fad1 	bl	8007efe <__localeconv_l>
 800795c:	6803      	ldr	r3, [r0, #0]
 800795e:	f04f 0b00 	mov.w	fp, #0
 8007962:	4618      	mov	r0, r3
 8007964:	9303      	str	r3, [sp, #12]
 8007966:	f7f8 fbf3 	bl	8000150 <strlen>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	9001      	str	r0, [sp, #4]
 800796e:	4403      	add	r3, r0
 8007970:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f8da 3000 	ldr.w	r3, [sl]
 800797a:	3302      	adds	r3, #2
 800797c:	461f      	mov	r7, r3
 800797e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007982:	2830      	cmp	r0, #48	; 0x30
 8007984:	d06c      	beq.n	8007a60 <__gethex+0x118>
 8007986:	f7ff ffca 	bl	800791e <__hexdig_fun>
 800798a:	4604      	mov	r4, r0
 800798c:	2800      	cmp	r0, #0
 800798e:	d16a      	bne.n	8007a66 <__gethex+0x11e>
 8007990:	9a01      	ldr	r2, [sp, #4]
 8007992:	9903      	ldr	r1, [sp, #12]
 8007994:	4638      	mov	r0, r7
 8007996:	f001 f905 	bl	8008ba4 <strncmp>
 800799a:	2800      	cmp	r0, #0
 800799c:	d166      	bne.n	8007a6c <__gethex+0x124>
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	5cf8      	ldrb	r0, [r7, r3]
 80079a2:	18fe      	adds	r6, r7, r3
 80079a4:	f7ff ffbb 	bl	800791e <__hexdig_fun>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d062      	beq.n	8007a72 <__gethex+0x12a>
 80079ac:	4633      	mov	r3, r6
 80079ae:	7818      	ldrb	r0, [r3, #0]
 80079b0:	461f      	mov	r7, r3
 80079b2:	2830      	cmp	r0, #48	; 0x30
 80079b4:	f103 0301 	add.w	r3, r3, #1
 80079b8:	d0f9      	beq.n	80079ae <__gethex+0x66>
 80079ba:	f7ff ffb0 	bl	800791e <__hexdig_fun>
 80079be:	fab0 f580 	clz	r5, r0
 80079c2:	4634      	mov	r4, r6
 80079c4:	f04f 0b01 	mov.w	fp, #1
 80079c8:	096d      	lsrs	r5, r5, #5
 80079ca:	463a      	mov	r2, r7
 80079cc:	4616      	mov	r6, r2
 80079ce:	7830      	ldrb	r0, [r6, #0]
 80079d0:	3201      	adds	r2, #1
 80079d2:	f7ff ffa4 	bl	800791e <__hexdig_fun>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1f8      	bne.n	80079cc <__gethex+0x84>
 80079da:	9a01      	ldr	r2, [sp, #4]
 80079dc:	9903      	ldr	r1, [sp, #12]
 80079de:	4630      	mov	r0, r6
 80079e0:	f001 f8e0 	bl	8008ba4 <strncmp>
 80079e4:	b950      	cbnz	r0, 80079fc <__gethex+0xb4>
 80079e6:	b954      	cbnz	r4, 80079fe <__gethex+0xb6>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	18f4      	adds	r4, r6, r3
 80079ec:	4622      	mov	r2, r4
 80079ee:	4616      	mov	r6, r2
 80079f0:	7830      	ldrb	r0, [r6, #0]
 80079f2:	3201      	adds	r2, #1
 80079f4:	f7ff ff93 	bl	800791e <__hexdig_fun>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1f8      	bne.n	80079ee <__gethex+0xa6>
 80079fc:	b10c      	cbz	r4, 8007a02 <__gethex+0xba>
 80079fe:	1ba4      	subs	r4, r4, r6
 8007a00:	00a4      	lsls	r4, r4, #2
 8007a02:	7833      	ldrb	r3, [r6, #0]
 8007a04:	2b50      	cmp	r3, #80	; 0x50
 8007a06:	d001      	beq.n	8007a0c <__gethex+0xc4>
 8007a08:	2b70      	cmp	r3, #112	; 0x70
 8007a0a:	d140      	bne.n	8007a8e <__gethex+0x146>
 8007a0c:	7873      	ldrb	r3, [r6, #1]
 8007a0e:	2b2b      	cmp	r3, #43	; 0x2b
 8007a10:	d031      	beq.n	8007a76 <__gethex+0x12e>
 8007a12:	2b2d      	cmp	r3, #45	; 0x2d
 8007a14:	d033      	beq.n	8007a7e <__gethex+0x136>
 8007a16:	f04f 0900 	mov.w	r9, #0
 8007a1a:	1c71      	adds	r1, r6, #1
 8007a1c:	7808      	ldrb	r0, [r1, #0]
 8007a1e:	f7ff ff7e 	bl	800791e <__hexdig_fun>
 8007a22:	1e43      	subs	r3, r0, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b18      	cmp	r3, #24
 8007a28:	d831      	bhi.n	8007a8e <__gethex+0x146>
 8007a2a:	f1a0 0210 	sub.w	r2, r0, #16
 8007a2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a32:	f7ff ff74 	bl	800791e <__hexdig_fun>
 8007a36:	1e43      	subs	r3, r0, #1
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b18      	cmp	r3, #24
 8007a3c:	d922      	bls.n	8007a84 <__gethex+0x13c>
 8007a3e:	f1b9 0f00 	cmp.w	r9, #0
 8007a42:	d000      	beq.n	8007a46 <__gethex+0xfe>
 8007a44:	4252      	negs	r2, r2
 8007a46:	4414      	add	r4, r2
 8007a48:	f8ca 1000 	str.w	r1, [sl]
 8007a4c:	b30d      	cbz	r5, 8007a92 <__gethex+0x14a>
 8007a4e:	f1bb 0f00 	cmp.w	fp, #0
 8007a52:	bf0c      	ite	eq
 8007a54:	2706      	moveq	r7, #6
 8007a56:	2700      	movne	r7, #0
 8007a58:	4638      	mov	r0, r7
 8007a5a:	b00b      	add	sp, #44	; 0x2c
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	f10b 0b01 	add.w	fp, fp, #1
 8007a64:	e78a      	b.n	800797c <__gethex+0x34>
 8007a66:	2500      	movs	r5, #0
 8007a68:	462c      	mov	r4, r5
 8007a6a:	e7ae      	b.n	80079ca <__gethex+0x82>
 8007a6c:	463e      	mov	r6, r7
 8007a6e:	2501      	movs	r5, #1
 8007a70:	e7c7      	b.n	8007a02 <__gethex+0xba>
 8007a72:	4604      	mov	r4, r0
 8007a74:	e7fb      	b.n	8007a6e <__gethex+0x126>
 8007a76:	f04f 0900 	mov.w	r9, #0
 8007a7a:	1cb1      	adds	r1, r6, #2
 8007a7c:	e7ce      	b.n	8007a1c <__gethex+0xd4>
 8007a7e:	f04f 0901 	mov.w	r9, #1
 8007a82:	e7fa      	b.n	8007a7a <__gethex+0x132>
 8007a84:	230a      	movs	r3, #10
 8007a86:	fb03 0202 	mla	r2, r3, r2, r0
 8007a8a:	3a10      	subs	r2, #16
 8007a8c:	e7cf      	b.n	8007a2e <__gethex+0xe6>
 8007a8e:	4631      	mov	r1, r6
 8007a90:	e7da      	b.n	8007a48 <__gethex+0x100>
 8007a92:	4629      	mov	r1, r5
 8007a94:	1bf3      	subs	r3, r6, r7
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	dc49      	bgt.n	8007b30 <__gethex+0x1e8>
 8007a9c:	9802      	ldr	r0, [sp, #8]
 8007a9e:	f000 fa72 	bl	8007f86 <_Balloc>
 8007aa2:	f04f 0b00 	mov.w	fp, #0
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	46da      	mov	sl, fp
 8007aaa:	9b01      	ldr	r3, [sp, #4]
 8007aac:	f100 0914 	add.w	r9, r0, #20
 8007ab0:	f1c3 0301 	rsb	r3, r3, #1
 8007ab4:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ab8:	9308      	str	r3, [sp, #32]
 8007aba:	42b7      	cmp	r7, r6
 8007abc:	d33b      	bcc.n	8007b36 <__gethex+0x1ee>
 8007abe:	9804      	ldr	r0, [sp, #16]
 8007ac0:	f840 ab04 	str.w	sl, [r0], #4
 8007ac4:	eba0 0009 	sub.w	r0, r0, r9
 8007ac8:	1080      	asrs	r0, r0, #2
 8007aca:	6128      	str	r0, [r5, #16]
 8007acc:	0147      	lsls	r7, r0, #5
 8007ace:	4650      	mov	r0, sl
 8007ad0:	f000 fb1d 	bl	800810e <__hi0bits>
 8007ad4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ad8:	1a3f      	subs	r7, r7, r0
 8007ada:	42b7      	cmp	r7, r6
 8007adc:	dd64      	ble.n	8007ba8 <__gethex+0x260>
 8007ade:	1bbf      	subs	r7, r7, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 fe27 	bl	8008736 <__any_on>
 8007ae8:	4682      	mov	sl, r0
 8007aea:	b178      	cbz	r0, 8007b0c <__gethex+0x1c4>
 8007aec:	f04f 0a01 	mov.w	sl, #1
 8007af0:	1e7b      	subs	r3, r7, #1
 8007af2:	1159      	asrs	r1, r3, #5
 8007af4:	f003 021f 	and.w	r2, r3, #31
 8007af8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007afc:	fa0a f202 	lsl.w	r2, sl, r2
 8007b00:	420a      	tst	r2, r1
 8007b02:	d003      	beq.n	8007b0c <__gethex+0x1c4>
 8007b04:	4553      	cmp	r3, sl
 8007b06:	dc46      	bgt.n	8007b96 <__gethex+0x24e>
 8007b08:	f04f 0a02 	mov.w	sl, #2
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7ff feca 	bl	80078a8 <rshift>
 8007b14:	443c      	add	r4, r7
 8007b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	da52      	bge.n	8007bc4 <__gethex+0x27c>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	9802      	ldr	r0, [sp, #8]
 8007b22:	f000 fa64 	bl	8007fee <_Bfree>
 8007b26:	2300      	movs	r3, #0
 8007b28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b2a:	27a3      	movs	r7, #163	; 0xa3
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e793      	b.n	8007a58 <__gethex+0x110>
 8007b30:	3101      	adds	r1, #1
 8007b32:	105b      	asrs	r3, r3, #1
 8007b34:	e7b0      	b.n	8007a98 <__gethex+0x150>
 8007b36:	1e73      	subs	r3, r6, #1
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	9a07      	ldr	r2, [sp, #28]
 8007b3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d018      	beq.n	8007b76 <__gethex+0x22e>
 8007b44:	f1bb 0f20 	cmp.w	fp, #32
 8007b48:	d107      	bne.n	8007b5a <__gethex+0x212>
 8007b4a:	9b04      	ldr	r3, [sp, #16]
 8007b4c:	f8c3 a000 	str.w	sl, [r3]
 8007b50:	f04f 0a00 	mov.w	sl, #0
 8007b54:	46d3      	mov	fp, sl
 8007b56:	3304      	adds	r3, #4
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007b5e:	f7ff fede 	bl	800791e <__hexdig_fun>
 8007b62:	f000 000f 	and.w	r0, r0, #15
 8007b66:	fa00 f00b 	lsl.w	r0, r0, fp
 8007b6a:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b6e:	f10b 0b04 	add.w	fp, fp, #4
 8007b72:	9b05      	ldr	r3, [sp, #20]
 8007b74:	e00d      	b.n	8007b92 <__gethex+0x24a>
 8007b76:	9b05      	ldr	r3, [sp, #20]
 8007b78:	9a08      	ldr	r2, [sp, #32]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	42bb      	cmp	r3, r7
 8007b7e:	d3e1      	bcc.n	8007b44 <__gethex+0x1fc>
 8007b80:	4618      	mov	r0, r3
 8007b82:	9a01      	ldr	r2, [sp, #4]
 8007b84:	9903      	ldr	r1, [sp, #12]
 8007b86:	9309      	str	r3, [sp, #36]	; 0x24
 8007b88:	f001 f80c 	bl	8008ba4 <strncmp>
 8007b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d1d8      	bne.n	8007b44 <__gethex+0x1fc>
 8007b92:	461e      	mov	r6, r3
 8007b94:	e791      	b.n	8007aba <__gethex+0x172>
 8007b96:	1eb9      	subs	r1, r7, #2
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 fdcc 	bl	8008736 <__any_on>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d0b2      	beq.n	8007b08 <__gethex+0x1c0>
 8007ba2:	f04f 0a03 	mov.w	sl, #3
 8007ba6:	e7b1      	b.n	8007b0c <__gethex+0x1c4>
 8007ba8:	da09      	bge.n	8007bbe <__gethex+0x276>
 8007baa:	1bf7      	subs	r7, r6, r7
 8007bac:	4629      	mov	r1, r5
 8007bae:	463a      	mov	r2, r7
 8007bb0:	9802      	ldr	r0, [sp, #8]
 8007bb2:	f000 fbe7 	bl	8008384 <__lshift>
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	1be4      	subs	r4, r4, r7
 8007bba:	f100 0914 	add.w	r9, r0, #20
 8007bbe:	f04f 0a00 	mov.w	sl, #0
 8007bc2:	e7a8      	b.n	8007b16 <__gethex+0x1ce>
 8007bc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	dd6b      	ble.n	8007ca4 <__gethex+0x35c>
 8007bcc:	1b04      	subs	r4, r0, r4
 8007bce:	42a6      	cmp	r6, r4
 8007bd0:	dc2e      	bgt.n	8007c30 <__gethex+0x2e8>
 8007bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d022      	beq.n	8007c20 <__gethex+0x2d8>
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d024      	beq.n	8007c28 <__gethex+0x2e0>
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d115      	bne.n	8007c0e <__gethex+0x2c6>
 8007be2:	42a6      	cmp	r6, r4
 8007be4:	d113      	bne.n	8007c0e <__gethex+0x2c6>
 8007be6:	2e01      	cmp	r6, #1
 8007be8:	dc0b      	bgt.n	8007c02 <__gethex+0x2ba>
 8007bea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bee:	9a06      	ldr	r2, [sp, #24]
 8007bf0:	2762      	movs	r7, #98	; 0x62
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	612b      	str	r3, [r5, #16]
 8007bf8:	f8c9 3000 	str.w	r3, [r9]
 8007bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bfe:	601d      	str	r5, [r3, #0]
 8007c00:	e72a      	b.n	8007a58 <__gethex+0x110>
 8007c02:	1e71      	subs	r1, r6, #1
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 fd96 	bl	8008736 <__any_on>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d1ed      	bne.n	8007bea <__gethex+0x2a2>
 8007c0e:	4629      	mov	r1, r5
 8007c10:	9802      	ldr	r0, [sp, #8]
 8007c12:	f000 f9ec 	bl	8007fee <_Bfree>
 8007c16:	2300      	movs	r3, #0
 8007c18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c1a:	2750      	movs	r7, #80	; 0x50
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	e71b      	b.n	8007a58 <__gethex+0x110>
 8007c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0e1      	beq.n	8007bea <__gethex+0x2a2>
 8007c26:	e7f2      	b.n	8007c0e <__gethex+0x2c6>
 8007c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1dd      	bne.n	8007bea <__gethex+0x2a2>
 8007c2e:	e7ee      	b.n	8007c0e <__gethex+0x2c6>
 8007c30:	1e67      	subs	r7, r4, #1
 8007c32:	f1ba 0f00 	cmp.w	sl, #0
 8007c36:	d132      	bne.n	8007c9e <__gethex+0x356>
 8007c38:	b127      	cbz	r7, 8007c44 <__gethex+0x2fc>
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 fd7a 	bl	8008736 <__any_on>
 8007c42:	4682      	mov	sl, r0
 8007c44:	2301      	movs	r3, #1
 8007c46:	117a      	asrs	r2, r7, #5
 8007c48:	f007 071f 	and.w	r7, r7, #31
 8007c4c:	fa03 f707 	lsl.w	r7, r3, r7
 8007c50:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007c54:	4621      	mov	r1, r4
 8007c56:	421f      	tst	r7, r3
 8007c58:	f04f 0702 	mov.w	r7, #2
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	bf18      	it	ne
 8007c60:	f04a 0a02 	orrne.w	sl, sl, #2
 8007c64:	1b36      	subs	r6, r6, r4
 8007c66:	f7ff fe1f 	bl	80078a8 <rshift>
 8007c6a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007c6e:	f1ba 0f00 	cmp.w	sl, #0
 8007c72:	d048      	beq.n	8007d06 <__gethex+0x3be>
 8007c74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d015      	beq.n	8007ca8 <__gethex+0x360>
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d017      	beq.n	8007cb0 <__gethex+0x368>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d109      	bne.n	8007c98 <__gethex+0x350>
 8007c84:	f01a 0f02 	tst.w	sl, #2
 8007c88:	d006      	beq.n	8007c98 <__gethex+0x350>
 8007c8a:	f8d9 3000 	ldr.w	r3, [r9]
 8007c8e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007c92:	f01a 0f01 	tst.w	sl, #1
 8007c96:	d10e      	bne.n	8007cb6 <__gethex+0x36e>
 8007c98:	f047 0710 	orr.w	r7, r7, #16
 8007c9c:	e033      	b.n	8007d06 <__gethex+0x3be>
 8007c9e:	f04f 0a01 	mov.w	sl, #1
 8007ca2:	e7cf      	b.n	8007c44 <__gethex+0x2fc>
 8007ca4:	2701      	movs	r7, #1
 8007ca6:	e7e2      	b.n	8007c6e <__gethex+0x326>
 8007ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007caa:	f1c3 0301 	rsb	r3, r3, #1
 8007cae:	9315      	str	r3, [sp, #84]	; 0x54
 8007cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <__gethex+0x350>
 8007cb6:	f04f 0c00 	mov.w	ip, #0
 8007cba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007cbe:	f105 0314 	add.w	r3, r5, #20
 8007cc2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007cc6:	eb03 010a 	add.w	r1, r3, sl
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007cd4:	d01c      	beq.n	8007d10 <__gethex+0x3c8>
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	6002      	str	r2, [r0, #0]
 8007cda:	2f02      	cmp	r7, #2
 8007cdc:	f105 0314 	add.w	r3, r5, #20
 8007ce0:	d138      	bne.n	8007d54 <__gethex+0x40c>
 8007ce2:	f8d8 2000 	ldr.w	r2, [r8]
 8007ce6:	3a01      	subs	r2, #1
 8007ce8:	42b2      	cmp	r2, r6
 8007cea:	d10a      	bne.n	8007d02 <__gethex+0x3ba>
 8007cec:	2201      	movs	r2, #1
 8007cee:	1171      	asrs	r1, r6, #5
 8007cf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cf4:	f006 061f 	and.w	r6, r6, #31
 8007cf8:	fa02 f606 	lsl.w	r6, r2, r6
 8007cfc:	421e      	tst	r6, r3
 8007cfe:	bf18      	it	ne
 8007d00:	4617      	movne	r7, r2
 8007d02:	f047 0720 	orr.w	r7, r7, #32
 8007d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d08:	601d      	str	r5, [r3, #0]
 8007d0a:	9b06      	ldr	r3, [sp, #24]
 8007d0c:	601c      	str	r4, [r3, #0]
 8007d0e:	e6a3      	b.n	8007a58 <__gethex+0x110>
 8007d10:	4299      	cmp	r1, r3
 8007d12:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d16:	d8d8      	bhi.n	8007cca <__gethex+0x382>
 8007d18:	68ab      	ldr	r3, [r5, #8]
 8007d1a:	4599      	cmp	r9, r3
 8007d1c:	db12      	blt.n	8007d44 <__gethex+0x3fc>
 8007d1e:	6869      	ldr	r1, [r5, #4]
 8007d20:	9802      	ldr	r0, [sp, #8]
 8007d22:	3101      	adds	r1, #1
 8007d24:	f000 f92f 	bl	8007f86 <_Balloc>
 8007d28:	4683      	mov	fp, r0
 8007d2a:	692a      	ldr	r2, [r5, #16]
 8007d2c:	f105 010c 	add.w	r1, r5, #12
 8007d30:	3202      	adds	r2, #2
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	300c      	adds	r0, #12
 8007d36:	f000 f91b 	bl	8007f70 <memcpy>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	9802      	ldr	r0, [sp, #8]
 8007d3e:	f000 f956 	bl	8007fee <_Bfree>
 8007d42:	465d      	mov	r5, fp
 8007d44:	692b      	ldr	r3, [r5, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	612a      	str	r2, [r5, #16]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007d50:	615a      	str	r2, [r3, #20]
 8007d52:	e7c2      	b.n	8007cda <__gethex+0x392>
 8007d54:	692a      	ldr	r2, [r5, #16]
 8007d56:	454a      	cmp	r2, r9
 8007d58:	dd0b      	ble.n	8007d72 <__gethex+0x42a>
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f7ff fda3 	bl	80078a8 <rshift>
 8007d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d66:	3401      	adds	r4, #1
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	f6ff aed8 	blt.w	8007b1e <__gethex+0x1d6>
 8007d6e:	2701      	movs	r7, #1
 8007d70:	e7c7      	b.n	8007d02 <__gethex+0x3ba>
 8007d72:	f016 061f 	ands.w	r6, r6, #31
 8007d76:	d0fa      	beq.n	8007d6e <__gethex+0x426>
 8007d78:	449a      	add	sl, r3
 8007d7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007d7e:	f000 f9c6 	bl	800810e <__hi0bits>
 8007d82:	f1c6 0620 	rsb	r6, r6, #32
 8007d86:	42b0      	cmp	r0, r6
 8007d88:	dbe7      	blt.n	8007d5a <__gethex+0x412>
 8007d8a:	e7f0      	b.n	8007d6e <__gethex+0x426>

08007d8c <L_shift>:
 8007d8c:	f1c2 0208 	rsb	r2, r2, #8
 8007d90:	0092      	lsls	r2, r2, #2
 8007d92:	b570      	push	{r4, r5, r6, lr}
 8007d94:	f1c2 0620 	rsb	r6, r2, #32
 8007d98:	6843      	ldr	r3, [r0, #4]
 8007d9a:	6804      	ldr	r4, [r0, #0]
 8007d9c:	fa03 f506 	lsl.w	r5, r3, r6
 8007da0:	432c      	orrs	r4, r5
 8007da2:	40d3      	lsrs	r3, r2
 8007da4:	6004      	str	r4, [r0, #0]
 8007da6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007daa:	4288      	cmp	r0, r1
 8007dac:	d3f4      	bcc.n	8007d98 <L_shift+0xc>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}

08007db0 <__match>:
 8007db0:	b530      	push	{r4, r5, lr}
 8007db2:	6803      	ldr	r3, [r0, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dba:	b914      	cbnz	r4, 8007dc2 <__match+0x12>
 8007dbc:	6003      	str	r3, [r0, #0]
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	bd30      	pop	{r4, r5, pc}
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007dca:	2d19      	cmp	r5, #25
 8007dcc:	bf98      	it	ls
 8007dce:	3220      	addls	r2, #32
 8007dd0:	42a2      	cmp	r2, r4
 8007dd2:	d0f0      	beq.n	8007db6 <__match+0x6>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7f3      	b.n	8007dc0 <__match+0x10>

08007dd8 <__hexnan>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	2500      	movs	r5, #0
 8007dde:	680b      	ldr	r3, [r1, #0]
 8007de0:	4682      	mov	sl, r0
 8007de2:	115f      	asrs	r7, r3, #5
 8007de4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007de8:	f013 031f 	ands.w	r3, r3, #31
 8007dec:	bf18      	it	ne
 8007dee:	3704      	addne	r7, #4
 8007df0:	1f3e      	subs	r6, r7, #4
 8007df2:	4690      	mov	r8, r2
 8007df4:	46b1      	mov	r9, r6
 8007df6:	4634      	mov	r4, r6
 8007df8:	46ab      	mov	fp, r5
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	6801      	ldr	r1, [r0, #0]
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	f847 5c04 	str.w	r5, [r7, #-4]
 8007e04:	9502      	str	r5, [sp, #8]
 8007e06:	784a      	ldrb	r2, [r1, #1]
 8007e08:	1c4b      	adds	r3, r1, #1
 8007e0a:	9303      	str	r3, [sp, #12]
 8007e0c:	b342      	cbz	r2, 8007e60 <__hexnan+0x88>
 8007e0e:	4610      	mov	r0, r2
 8007e10:	9105      	str	r1, [sp, #20]
 8007e12:	9204      	str	r2, [sp, #16]
 8007e14:	f7ff fd83 	bl	800791e <__hexdig_fun>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d143      	bne.n	8007ea4 <__hexnan+0xcc>
 8007e1c:	9a04      	ldr	r2, [sp, #16]
 8007e1e:	9905      	ldr	r1, [sp, #20]
 8007e20:	2a20      	cmp	r2, #32
 8007e22:	d818      	bhi.n	8007e56 <__hexnan+0x7e>
 8007e24:	9b02      	ldr	r3, [sp, #8]
 8007e26:	459b      	cmp	fp, r3
 8007e28:	dd13      	ble.n	8007e52 <__hexnan+0x7a>
 8007e2a:	454c      	cmp	r4, r9
 8007e2c:	d206      	bcs.n	8007e3c <__hexnan+0x64>
 8007e2e:	2d07      	cmp	r5, #7
 8007e30:	dc04      	bgt.n	8007e3c <__hexnan+0x64>
 8007e32:	462a      	mov	r2, r5
 8007e34:	4649      	mov	r1, r9
 8007e36:	4620      	mov	r0, r4
 8007e38:	f7ff ffa8 	bl	8007d8c <L_shift>
 8007e3c:	4544      	cmp	r4, r8
 8007e3e:	d944      	bls.n	8007eca <__hexnan+0xf2>
 8007e40:	2300      	movs	r3, #0
 8007e42:	f1a4 0904 	sub.w	r9, r4, #4
 8007e46:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e4a:	461d      	mov	r5, r3
 8007e4c:	464c      	mov	r4, r9
 8007e4e:	f8cd b008 	str.w	fp, [sp, #8]
 8007e52:	9903      	ldr	r1, [sp, #12]
 8007e54:	e7d7      	b.n	8007e06 <__hexnan+0x2e>
 8007e56:	2a29      	cmp	r2, #41	; 0x29
 8007e58:	d14a      	bne.n	8007ef0 <__hexnan+0x118>
 8007e5a:	3102      	adds	r1, #2
 8007e5c:	f8ca 1000 	str.w	r1, [sl]
 8007e60:	f1bb 0f00 	cmp.w	fp, #0
 8007e64:	d044      	beq.n	8007ef0 <__hexnan+0x118>
 8007e66:	454c      	cmp	r4, r9
 8007e68:	d206      	bcs.n	8007e78 <__hexnan+0xa0>
 8007e6a:	2d07      	cmp	r5, #7
 8007e6c:	dc04      	bgt.n	8007e78 <__hexnan+0xa0>
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4649      	mov	r1, r9
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7ff ff8a 	bl	8007d8c <L_shift>
 8007e78:	4544      	cmp	r4, r8
 8007e7a:	d928      	bls.n	8007ece <__hexnan+0xf6>
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e82:	42a6      	cmp	r6, r4
 8007e84:	f843 2b04 	str.w	r2, [r3], #4
 8007e88:	d2f9      	bcs.n	8007e7e <__hexnan+0xa6>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f843 2b04 	str.w	r2, [r3], #4
 8007e90:	429e      	cmp	r6, r3
 8007e92:	d2fb      	bcs.n	8007e8c <__hexnan+0xb4>
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	b91b      	cbnz	r3, 8007ea0 <__hexnan+0xc8>
 8007e98:	4546      	cmp	r6, r8
 8007e9a:	d127      	bne.n	8007eec <__hexnan+0x114>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6033      	str	r3, [r6, #0]
 8007ea0:	2005      	movs	r0, #5
 8007ea2:	e026      	b.n	8007ef2 <__hexnan+0x11a>
 8007ea4:	3501      	adds	r5, #1
 8007ea6:	2d08      	cmp	r5, #8
 8007ea8:	f10b 0b01 	add.w	fp, fp, #1
 8007eac:	dd06      	ble.n	8007ebc <__hexnan+0xe4>
 8007eae:	4544      	cmp	r4, r8
 8007eb0:	d9cf      	bls.n	8007e52 <__hexnan+0x7a>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	2501      	movs	r5, #1
 8007eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eba:	3c04      	subs	r4, #4
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	f000 000f 	and.w	r0, r0, #15
 8007ec2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ec6:	6020      	str	r0, [r4, #0]
 8007ec8:	e7c3      	b.n	8007e52 <__hexnan+0x7a>
 8007eca:	2508      	movs	r5, #8
 8007ecc:	e7c1      	b.n	8007e52 <__hexnan+0x7a>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0df      	beq.n	8007e94 <__hexnan+0xbc>
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	f1c3 0320 	rsb	r3, r3, #32
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007ee4:	401a      	ands	r2, r3
 8007ee6:	f847 2c04 	str.w	r2, [r7, #-4]
 8007eea:	e7d3      	b.n	8007e94 <__hexnan+0xbc>
 8007eec:	3e04      	subs	r6, #4
 8007eee:	e7d1      	b.n	8007e94 <__hexnan+0xbc>
 8007ef0:	2004      	movs	r0, #4
 8007ef2:	b007      	add	sp, #28
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef8 <__locale_ctype_ptr_l>:
 8007ef8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007efc:	4770      	bx	lr

08007efe <__localeconv_l>:
 8007efe:	30f0      	adds	r0, #240	; 0xf0
 8007f00:	4770      	bx	lr
	...

08007f04 <_localeconv_r>:
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <_localeconv_r+0x14>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a18      	ldr	r0, [r3, #32]
 8007f0a:	4b04      	ldr	r3, [pc, #16]	; (8007f1c <_localeconv_r+0x18>)
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	bf08      	it	eq
 8007f10:	4618      	moveq	r0, r3
 8007f12:	30f0      	adds	r0, #240	; 0xf0
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000018 	.word	0x20000018
 8007f1c:	2000007c 	.word	0x2000007c

08007f20 <malloc>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <malloc+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f000 bc81 	b.w	800882c <_malloc_r>
 8007f2a:	bf00      	nop
 8007f2c:	20000018 	.word	0x20000018

08007f30 <__ascii_mbtowc>:
 8007f30:	b082      	sub	sp, #8
 8007f32:	b901      	cbnz	r1, 8007f36 <__ascii_mbtowc+0x6>
 8007f34:	a901      	add	r1, sp, #4
 8007f36:	b142      	cbz	r2, 8007f4a <__ascii_mbtowc+0x1a>
 8007f38:	b14b      	cbz	r3, 8007f4e <__ascii_mbtowc+0x1e>
 8007f3a:	7813      	ldrb	r3, [r2, #0]
 8007f3c:	600b      	str	r3, [r1, #0]
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	1c10      	adds	r0, r2, #0
 8007f42:	bf18      	it	ne
 8007f44:	2001      	movne	r0, #1
 8007f46:	b002      	add	sp, #8
 8007f48:	4770      	bx	lr
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	e7fb      	b.n	8007f46 <__ascii_mbtowc+0x16>
 8007f4e:	f06f 0001 	mvn.w	r0, #1
 8007f52:	e7f8      	b.n	8007f46 <__ascii_mbtowc+0x16>

08007f54 <memchr>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	b2c9      	uxtb	r1, r1
 8007f58:	4402      	add	r2, r0
 8007f5a:	4290      	cmp	r0, r2
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	d101      	bne.n	8007f64 <memchr+0x10>
 8007f60:	2300      	movs	r3, #0
 8007f62:	e003      	b.n	8007f6c <memchr+0x18>
 8007f64:	781c      	ldrb	r4, [r3, #0]
 8007f66:	3001      	adds	r0, #1
 8007f68:	428c      	cmp	r4, r1
 8007f6a:	d1f6      	bne.n	8007f5a <memchr+0x6>
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd10      	pop	{r4, pc}

08007f70 <memcpy>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	1e43      	subs	r3, r0, #1
 8007f74:	440a      	add	r2, r1
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d100      	bne.n	8007f7c <memcpy+0xc>
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f84:	e7f7      	b.n	8007f76 <memcpy+0x6>

08007f86 <_Balloc>:
 8007f86:	b570      	push	{r4, r5, r6, lr}
 8007f88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	b93d      	cbnz	r5, 8007fa0 <_Balloc+0x1a>
 8007f90:	2010      	movs	r0, #16
 8007f92:	f7ff ffc5 	bl	8007f20 <malloc>
 8007f96:	6260      	str	r0, [r4, #36]	; 0x24
 8007f98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f9c:	6005      	str	r5, [r0, #0]
 8007f9e:	60c5      	str	r5, [r0, #12]
 8007fa0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007fa2:	68eb      	ldr	r3, [r5, #12]
 8007fa4:	b183      	cbz	r3, 8007fc8 <_Balloc+0x42>
 8007fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007fae:	b9b8      	cbnz	r0, 8007fe0 <_Balloc+0x5a>
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	fa01 f506 	lsl.w	r5, r1, r6
 8007fb6:	1d6a      	adds	r2, r5, #5
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fbdc 	bl	8008778 <_calloc_r>
 8007fc0:	b160      	cbz	r0, 8007fdc <_Balloc+0x56>
 8007fc2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007fc6:	e00e      	b.n	8007fe6 <_Balloc+0x60>
 8007fc8:	2221      	movs	r2, #33	; 0x21
 8007fca:	2104      	movs	r1, #4
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fbd3 	bl	8008778 <_calloc_r>
 8007fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd4:	60e8      	str	r0, [r5, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e4      	bne.n	8007fa6 <_Balloc+0x20>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	6802      	ldr	r2, [r0, #0]
 8007fe2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fec:	e7f7      	b.n	8007fde <_Balloc+0x58>

08007fee <_Bfree>:
 8007fee:	b570      	push	{r4, r5, r6, lr}
 8007ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	b93c      	cbnz	r4, 8008008 <_Bfree+0x1a>
 8007ff8:	2010      	movs	r0, #16
 8007ffa:	f7ff ff91 	bl	8007f20 <malloc>
 8007ffe:	6270      	str	r0, [r6, #36]	; 0x24
 8008000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008004:	6004      	str	r4, [r0, #0]
 8008006:	60c4      	str	r4, [r0, #12]
 8008008:	b13d      	cbz	r5, 800801a <_Bfree+0x2c>
 800800a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800800c:	686a      	ldr	r2, [r5, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008014:	6029      	str	r1, [r5, #0]
 8008016:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800801a:	bd70      	pop	{r4, r5, r6, pc}

0800801c <__multadd>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	461f      	mov	r7, r3
 8008022:	4606      	mov	r6, r0
 8008024:	460c      	mov	r4, r1
 8008026:	2300      	movs	r3, #0
 8008028:	690d      	ldr	r5, [r1, #16]
 800802a:	f101 0c14 	add.w	ip, r1, #20
 800802e:	f8dc 0000 	ldr.w	r0, [ip]
 8008032:	3301      	adds	r3, #1
 8008034:	b281      	uxth	r1, r0
 8008036:	fb02 7101 	mla	r1, r2, r1, r7
 800803a:	0c00      	lsrs	r0, r0, #16
 800803c:	0c0f      	lsrs	r7, r1, #16
 800803e:	fb02 7000 	mla	r0, r2, r0, r7
 8008042:	b289      	uxth	r1, r1
 8008044:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008048:	429d      	cmp	r5, r3
 800804a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800804e:	f84c 1b04 	str.w	r1, [ip], #4
 8008052:	dcec      	bgt.n	800802e <__multadd+0x12>
 8008054:	b1d7      	cbz	r7, 800808c <__multadd+0x70>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc12      	bgt.n	8008082 <__multadd+0x66>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4630      	mov	r0, r6
 8008060:	3101      	adds	r1, #1
 8008062:	f7ff ff90 	bl	8007f86 <_Balloc>
 8008066:	4680      	mov	r8, r0
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	f104 010c 	add.w	r1, r4, #12
 800806e:	3202      	adds	r2, #2
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	300c      	adds	r0, #12
 8008074:	f7ff ff7c 	bl	8007f70 <memcpy>
 8008078:	4621      	mov	r1, r4
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ffb7 	bl	8007fee <_Bfree>
 8008080:	4644      	mov	r4, r8
 8008082:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008086:	3501      	adds	r5, #1
 8008088:	615f      	str	r7, [r3, #20]
 800808a:	6125      	str	r5, [r4, #16]
 800808c:	4620      	mov	r0, r4
 800808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008092 <__s2b>:
 8008092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008096:	4615      	mov	r5, r2
 8008098:	2209      	movs	r2, #9
 800809a:	461f      	mov	r7, r3
 800809c:	3308      	adds	r3, #8
 800809e:	460c      	mov	r4, r1
 80080a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a4:	4606      	mov	r6, r0
 80080a6:	2201      	movs	r2, #1
 80080a8:	2100      	movs	r1, #0
 80080aa:	429a      	cmp	r2, r3
 80080ac:	db20      	blt.n	80080f0 <__s2b+0x5e>
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff ff69 	bl	8007f86 <_Balloc>
 80080b4:	9b08      	ldr	r3, [sp, #32]
 80080b6:	2d09      	cmp	r5, #9
 80080b8:	6143      	str	r3, [r0, #20]
 80080ba:	f04f 0301 	mov.w	r3, #1
 80080be:	6103      	str	r3, [r0, #16]
 80080c0:	dd19      	ble.n	80080f6 <__s2b+0x64>
 80080c2:	f104 0809 	add.w	r8, r4, #9
 80080c6:	46c1      	mov	r9, r8
 80080c8:	442c      	add	r4, r5
 80080ca:	f819 3b01 	ldrb.w	r3, [r9], #1
 80080ce:	4601      	mov	r1, r0
 80080d0:	3b30      	subs	r3, #48	; 0x30
 80080d2:	220a      	movs	r2, #10
 80080d4:	4630      	mov	r0, r6
 80080d6:	f7ff ffa1 	bl	800801c <__multadd>
 80080da:	45a1      	cmp	r9, r4
 80080dc:	d1f5      	bne.n	80080ca <__s2b+0x38>
 80080de:	eb08 0405 	add.w	r4, r8, r5
 80080e2:	3c08      	subs	r4, #8
 80080e4:	1b2d      	subs	r5, r5, r4
 80080e6:	1963      	adds	r3, r4, r5
 80080e8:	42bb      	cmp	r3, r7
 80080ea:	db07      	blt.n	80080fc <__s2b+0x6a>
 80080ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f0:	0052      	lsls	r2, r2, #1
 80080f2:	3101      	adds	r1, #1
 80080f4:	e7d9      	b.n	80080aa <__s2b+0x18>
 80080f6:	340a      	adds	r4, #10
 80080f8:	2509      	movs	r5, #9
 80080fa:	e7f3      	b.n	80080e4 <__s2b+0x52>
 80080fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008100:	4601      	mov	r1, r0
 8008102:	3b30      	subs	r3, #48	; 0x30
 8008104:	220a      	movs	r2, #10
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff ff88 	bl	800801c <__multadd>
 800810c:	e7eb      	b.n	80080e6 <__s2b+0x54>

0800810e <__hi0bits>:
 800810e:	0c02      	lsrs	r2, r0, #16
 8008110:	0412      	lsls	r2, r2, #16
 8008112:	4603      	mov	r3, r0
 8008114:	b9b2      	cbnz	r2, 8008144 <__hi0bits+0x36>
 8008116:	0403      	lsls	r3, r0, #16
 8008118:	2010      	movs	r0, #16
 800811a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800811e:	bf04      	itt	eq
 8008120:	021b      	lsleq	r3, r3, #8
 8008122:	3008      	addeq	r0, #8
 8008124:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008128:	bf04      	itt	eq
 800812a:	011b      	lsleq	r3, r3, #4
 800812c:	3004      	addeq	r0, #4
 800812e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008132:	bf04      	itt	eq
 8008134:	009b      	lsleq	r3, r3, #2
 8008136:	3002      	addeq	r0, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	db06      	blt.n	800814a <__hi0bits+0x3c>
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	d503      	bpl.n	8008148 <__hi0bits+0x3a>
 8008140:	3001      	adds	r0, #1
 8008142:	4770      	bx	lr
 8008144:	2000      	movs	r0, #0
 8008146:	e7e8      	b.n	800811a <__hi0bits+0xc>
 8008148:	2020      	movs	r0, #32
 800814a:	4770      	bx	lr

0800814c <__lo0bits>:
 800814c:	6803      	ldr	r3, [r0, #0]
 800814e:	4601      	mov	r1, r0
 8008150:	f013 0207 	ands.w	r2, r3, #7
 8008154:	d00b      	beq.n	800816e <__lo0bits+0x22>
 8008156:	07da      	lsls	r2, r3, #31
 8008158:	d423      	bmi.n	80081a2 <__lo0bits+0x56>
 800815a:	0798      	lsls	r0, r3, #30
 800815c:	bf49      	itett	mi
 800815e:	085b      	lsrmi	r3, r3, #1
 8008160:	089b      	lsrpl	r3, r3, #2
 8008162:	2001      	movmi	r0, #1
 8008164:	600b      	strmi	r3, [r1, #0]
 8008166:	bf5c      	itt	pl
 8008168:	600b      	strpl	r3, [r1, #0]
 800816a:	2002      	movpl	r0, #2
 800816c:	4770      	bx	lr
 800816e:	b298      	uxth	r0, r3
 8008170:	b9a8      	cbnz	r0, 800819e <__lo0bits+0x52>
 8008172:	2010      	movs	r0, #16
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800817a:	bf04      	itt	eq
 800817c:	0a1b      	lsreq	r3, r3, #8
 800817e:	3008      	addeq	r0, #8
 8008180:	071a      	lsls	r2, r3, #28
 8008182:	bf04      	itt	eq
 8008184:	091b      	lsreq	r3, r3, #4
 8008186:	3004      	addeq	r0, #4
 8008188:	079a      	lsls	r2, r3, #30
 800818a:	bf04      	itt	eq
 800818c:	089b      	lsreq	r3, r3, #2
 800818e:	3002      	addeq	r0, #2
 8008190:	07da      	lsls	r2, r3, #31
 8008192:	d402      	bmi.n	800819a <__lo0bits+0x4e>
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	d006      	beq.n	80081a6 <__lo0bits+0x5a>
 8008198:	3001      	adds	r0, #1
 800819a:	600b      	str	r3, [r1, #0]
 800819c:	4770      	bx	lr
 800819e:	4610      	mov	r0, r2
 80081a0:	e7e9      	b.n	8008176 <__lo0bits+0x2a>
 80081a2:	2000      	movs	r0, #0
 80081a4:	4770      	bx	lr
 80081a6:	2020      	movs	r0, #32
 80081a8:	4770      	bx	lr

080081aa <__i2b>:
 80081aa:	b510      	push	{r4, lr}
 80081ac:	460c      	mov	r4, r1
 80081ae:	2101      	movs	r1, #1
 80081b0:	f7ff fee9 	bl	8007f86 <_Balloc>
 80081b4:	2201      	movs	r2, #1
 80081b6:	6144      	str	r4, [r0, #20]
 80081b8:	6102      	str	r2, [r0, #16]
 80081ba:	bd10      	pop	{r4, pc}

080081bc <__multiply>:
 80081bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	4614      	mov	r4, r2
 80081c2:	690a      	ldr	r2, [r1, #16]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	4688      	mov	r8, r1
 80081c8:	429a      	cmp	r2, r3
 80081ca:	bfbe      	ittt	lt
 80081cc:	460b      	movlt	r3, r1
 80081ce:	46a0      	movlt	r8, r4
 80081d0:	461c      	movlt	r4, r3
 80081d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081e2:	eb07 0609 	add.w	r6, r7, r9
 80081e6:	42b3      	cmp	r3, r6
 80081e8:	bfb8      	it	lt
 80081ea:	3101      	addlt	r1, #1
 80081ec:	f7ff fecb 	bl	8007f86 <_Balloc>
 80081f0:	f100 0514 	add.w	r5, r0, #20
 80081f4:	462b      	mov	r3, r5
 80081f6:	2200      	movs	r2, #0
 80081f8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80081fc:	4573      	cmp	r3, lr
 80081fe:	d316      	bcc.n	800822e <__multiply+0x72>
 8008200:	f104 0214 	add.w	r2, r4, #20
 8008204:	f108 0114 	add.w	r1, r8, #20
 8008208:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800820c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	9201      	str	r2, [sp, #4]
 8008216:	4293      	cmp	r3, r2
 8008218:	d80c      	bhi.n	8008234 <__multiply+0x78>
 800821a:	2e00      	cmp	r6, #0
 800821c:	dd03      	ble.n	8008226 <__multiply+0x6a>
 800821e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008222:	2b00      	cmp	r3, #0
 8008224:	d05d      	beq.n	80082e2 <__multiply+0x126>
 8008226:	6106      	str	r6, [r0, #16]
 8008228:	b003      	add	sp, #12
 800822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822e:	f843 2b04 	str.w	r2, [r3], #4
 8008232:	e7e3      	b.n	80081fc <__multiply+0x40>
 8008234:	f8b2 b000 	ldrh.w	fp, [r2]
 8008238:	f1bb 0f00 	cmp.w	fp, #0
 800823c:	d023      	beq.n	8008286 <__multiply+0xca>
 800823e:	4689      	mov	r9, r1
 8008240:	46ac      	mov	ip, r5
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	f859 4b04 	ldr.w	r4, [r9], #4
 800824a:	f8dc a000 	ldr.w	sl, [ip]
 800824e:	b2a3      	uxth	r3, r4
 8008250:	fa1f fa8a 	uxth.w	sl, sl
 8008254:	fb0b a303 	mla	r3, fp, r3, sl
 8008258:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800825c:	f8dc 4000 	ldr.w	r4, [ip]
 8008260:	4443      	add	r3, r8
 8008262:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008266:	fb0b 840a 	mla	r4, fp, sl, r8
 800826a:	46e2      	mov	sl, ip
 800826c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008276:	454f      	cmp	r7, r9
 8008278:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800827c:	f84a 3b04 	str.w	r3, [sl], #4
 8008280:	d82b      	bhi.n	80082da <__multiply+0x11e>
 8008282:	f8cc 8004 	str.w	r8, [ip, #4]
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	3204      	adds	r2, #4
 800828a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800828e:	f1ba 0f00 	cmp.w	sl, #0
 8008292:	d020      	beq.n	80082d6 <__multiply+0x11a>
 8008294:	4689      	mov	r9, r1
 8008296:	46a8      	mov	r8, r5
 8008298:	f04f 0b00 	mov.w	fp, #0
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	f8b9 c000 	ldrh.w	ip, [r9]
 80082a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	fb0a 440c 	mla	r4, sl, ip, r4
 80082ac:	46c4      	mov	ip, r8
 80082ae:	445c      	add	r4, fp
 80082b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80082b4:	f84c 3b04 	str.w	r3, [ip], #4
 80082b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80082bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	fb0a b303 	mla	r3, sl, r3, fp
 80082c6:	454f      	cmp	r7, r9
 80082c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80082cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80082d0:	d805      	bhi.n	80082de <__multiply+0x122>
 80082d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80082d6:	3504      	adds	r5, #4
 80082d8:	e79b      	b.n	8008212 <__multiply+0x56>
 80082da:	46d4      	mov	ip, sl
 80082dc:	e7b3      	b.n	8008246 <__multiply+0x8a>
 80082de:	46e0      	mov	r8, ip
 80082e0:	e7dd      	b.n	800829e <__multiply+0xe2>
 80082e2:	3e01      	subs	r6, #1
 80082e4:	e799      	b.n	800821a <__multiply+0x5e>
	...

080082e8 <__pow5mult>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4615      	mov	r5, r2
 80082ee:	f012 0203 	ands.w	r2, r2, #3
 80082f2:	4606      	mov	r6, r0
 80082f4:	460f      	mov	r7, r1
 80082f6:	d007      	beq.n	8008308 <__pow5mult+0x20>
 80082f8:	4c21      	ldr	r4, [pc, #132]	; (8008380 <__pow5mult+0x98>)
 80082fa:	3a01      	subs	r2, #1
 80082fc:	2300      	movs	r3, #0
 80082fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008302:	f7ff fe8b 	bl	800801c <__multadd>
 8008306:	4607      	mov	r7, r0
 8008308:	10ad      	asrs	r5, r5, #2
 800830a:	d035      	beq.n	8008378 <__pow5mult+0x90>
 800830c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800830e:	b93c      	cbnz	r4, 8008320 <__pow5mult+0x38>
 8008310:	2010      	movs	r0, #16
 8008312:	f7ff fe05 	bl	8007f20 <malloc>
 8008316:	6270      	str	r0, [r6, #36]	; 0x24
 8008318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800831c:	6004      	str	r4, [r0, #0]
 800831e:	60c4      	str	r4, [r0, #12]
 8008320:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008328:	b94c      	cbnz	r4, 800833e <__pow5mult+0x56>
 800832a:	f240 2171 	movw	r1, #625	; 0x271
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff ff3b 	bl	80081aa <__i2b>
 8008334:	2300      	movs	r3, #0
 8008336:	4604      	mov	r4, r0
 8008338:	f8c8 0008 	str.w	r0, [r8, #8]
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	07eb      	lsls	r3, r5, #31
 8008344:	d50a      	bpl.n	800835c <__pow5mult+0x74>
 8008346:	4639      	mov	r1, r7
 8008348:	4622      	mov	r2, r4
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff ff36 	bl	80081bc <__multiply>
 8008350:	4681      	mov	r9, r0
 8008352:	4639      	mov	r1, r7
 8008354:	4630      	mov	r0, r6
 8008356:	f7ff fe4a 	bl	8007fee <_Bfree>
 800835a:	464f      	mov	r7, r9
 800835c:	106d      	asrs	r5, r5, #1
 800835e:	d00b      	beq.n	8008378 <__pow5mult+0x90>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	b938      	cbnz	r0, 8008374 <__pow5mult+0x8c>
 8008364:	4622      	mov	r2, r4
 8008366:	4621      	mov	r1, r4
 8008368:	4630      	mov	r0, r6
 800836a:	f7ff ff27 	bl	80081bc <__multiply>
 800836e:	6020      	str	r0, [r4, #0]
 8008370:	f8c0 8000 	str.w	r8, [r0]
 8008374:	4604      	mov	r4, r0
 8008376:	e7e4      	b.n	8008342 <__pow5mult+0x5a>
 8008378:	4638      	mov	r0, r7
 800837a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837e:	bf00      	nop
 8008380:	08008fa8 	.word	0x08008fa8

08008384 <__lshift>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	4607      	mov	r7, r0
 800838c:	4616      	mov	r6, r2
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008394:	eb0a 0903 	add.w	r9, sl, r3
 8008398:	6849      	ldr	r1, [r1, #4]
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	f109 0501 	add.w	r5, r9, #1
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	db32      	blt.n	800840a <__lshift+0x86>
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7ff fdee 	bl	8007f86 <_Balloc>
 80083aa:	2300      	movs	r3, #0
 80083ac:	4680      	mov	r8, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	f100 0114 	add.w	r1, r0, #20
 80083b4:	4553      	cmp	r3, sl
 80083b6:	db2b      	blt.n	8008410 <__lshift+0x8c>
 80083b8:	6920      	ldr	r0, [r4, #16]
 80083ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083be:	f104 0314 	add.w	r3, r4, #20
 80083c2:	f016 021f 	ands.w	r2, r6, #31
 80083c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083ce:	d025      	beq.n	800841c <__lshift+0x98>
 80083d0:	2000      	movs	r0, #0
 80083d2:	f1c2 0e20 	rsb	lr, r2, #32
 80083d6:	468a      	mov	sl, r1
 80083d8:	681e      	ldr	r6, [r3, #0]
 80083da:	4096      	lsls	r6, r2
 80083dc:	4330      	orrs	r0, r6
 80083de:	f84a 0b04 	str.w	r0, [sl], #4
 80083e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80083e6:	459c      	cmp	ip, r3
 80083e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80083ec:	d814      	bhi.n	8008418 <__lshift+0x94>
 80083ee:	6048      	str	r0, [r1, #4]
 80083f0:	b108      	cbz	r0, 80083f6 <__lshift+0x72>
 80083f2:	f109 0502 	add.w	r5, r9, #2
 80083f6:	3d01      	subs	r5, #1
 80083f8:	4638      	mov	r0, r7
 80083fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80083fe:	4621      	mov	r1, r4
 8008400:	f7ff fdf5 	bl	8007fee <_Bfree>
 8008404:	4640      	mov	r0, r8
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	3101      	adds	r1, #1
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	e7c7      	b.n	80083a0 <__lshift+0x1c>
 8008410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008414:	3301      	adds	r3, #1
 8008416:	e7cd      	b.n	80083b4 <__lshift+0x30>
 8008418:	4651      	mov	r1, sl
 800841a:	e7dc      	b.n	80083d6 <__lshift+0x52>
 800841c:	3904      	subs	r1, #4
 800841e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008422:	459c      	cmp	ip, r3
 8008424:	f841 2f04 	str.w	r2, [r1, #4]!
 8008428:	d8f9      	bhi.n	800841e <__lshift+0x9a>
 800842a:	e7e4      	b.n	80083f6 <__lshift+0x72>

0800842c <__mcmp>:
 800842c:	6903      	ldr	r3, [r0, #16]
 800842e:	690a      	ldr	r2, [r1, #16]
 8008430:	b530      	push	{r4, r5, lr}
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	d10c      	bne.n	8008450 <__mcmp+0x24>
 8008436:	0092      	lsls	r2, r2, #2
 8008438:	3014      	adds	r0, #20
 800843a:	3114      	adds	r1, #20
 800843c:	1884      	adds	r4, r0, r2
 800843e:	4411      	add	r1, r2
 8008440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008448:	4295      	cmp	r5, r2
 800844a:	d003      	beq.n	8008454 <__mcmp+0x28>
 800844c:	d305      	bcc.n	800845a <__mcmp+0x2e>
 800844e:	2301      	movs	r3, #1
 8008450:	4618      	mov	r0, r3
 8008452:	bd30      	pop	{r4, r5, pc}
 8008454:	42a0      	cmp	r0, r4
 8008456:	d3f3      	bcc.n	8008440 <__mcmp+0x14>
 8008458:	e7fa      	b.n	8008450 <__mcmp+0x24>
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	e7f7      	b.n	8008450 <__mcmp+0x24>

08008460 <__mdiff>:
 8008460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	460d      	mov	r5, r1
 8008466:	4607      	mov	r7, r0
 8008468:	4611      	mov	r1, r2
 800846a:	4628      	mov	r0, r5
 800846c:	4614      	mov	r4, r2
 800846e:	f7ff ffdd 	bl	800842c <__mcmp>
 8008472:	1e06      	subs	r6, r0, #0
 8008474:	d108      	bne.n	8008488 <__mdiff+0x28>
 8008476:	4631      	mov	r1, r6
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff fd84 	bl	8007f86 <_Balloc>
 800847e:	2301      	movs	r3, #1
 8008480:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	bfa4      	itt	ge
 800848a:	4623      	movge	r3, r4
 800848c:	462c      	movge	r4, r5
 800848e:	4638      	mov	r0, r7
 8008490:	6861      	ldr	r1, [r4, #4]
 8008492:	bfa6      	itte	ge
 8008494:	461d      	movge	r5, r3
 8008496:	2600      	movge	r6, #0
 8008498:	2601      	movlt	r6, #1
 800849a:	f7ff fd74 	bl	8007f86 <_Balloc>
 800849e:	f04f 0e00 	mov.w	lr, #0
 80084a2:	60c6      	str	r6, [r0, #12]
 80084a4:	692b      	ldr	r3, [r5, #16]
 80084a6:	6926      	ldr	r6, [r4, #16]
 80084a8:	f104 0214 	add.w	r2, r4, #20
 80084ac:	f105 0914 	add.w	r9, r5, #20
 80084b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80084b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80084b8:	f100 0114 	add.w	r1, r0, #20
 80084bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80084c0:	f859 5b04 	ldr.w	r5, [r9], #4
 80084c4:	fa1f f38a 	uxth.w	r3, sl
 80084c8:	4473      	add	r3, lr
 80084ca:	b2ac      	uxth	r4, r5
 80084cc:	1b1b      	subs	r3, r3, r4
 80084ce:	0c2c      	lsrs	r4, r5, #16
 80084d0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80084d4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80084de:	45c8      	cmp	r8, r9
 80084e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80084e4:	4694      	mov	ip, r2
 80084e6:	f841 4b04 	str.w	r4, [r1], #4
 80084ea:	d8e7      	bhi.n	80084bc <__mdiff+0x5c>
 80084ec:	45bc      	cmp	ip, r7
 80084ee:	d304      	bcc.n	80084fa <__mdiff+0x9a>
 80084f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80084f4:	b183      	cbz	r3, 8008518 <__mdiff+0xb8>
 80084f6:	6106      	str	r6, [r0, #16]
 80084f8:	e7c4      	b.n	8008484 <__mdiff+0x24>
 80084fa:	f85c 4b04 	ldr.w	r4, [ip], #4
 80084fe:	b2a2      	uxth	r2, r4
 8008500:	4472      	add	r2, lr
 8008502:	1413      	asrs	r3, r2, #16
 8008504:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008508:	b292      	uxth	r2, r2
 800850a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800850e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008512:	f841 2b04 	str.w	r2, [r1], #4
 8008516:	e7e9      	b.n	80084ec <__mdiff+0x8c>
 8008518:	3e01      	subs	r6, #1
 800851a:	e7e9      	b.n	80084f0 <__mdiff+0x90>

0800851c <__ulp>:
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <__ulp+0x44>)
 800851e:	400b      	ands	r3, r1
 8008520:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd02      	ble.n	800852e <__ulp+0x12>
 8008528:	2000      	movs	r0, #0
 800852a:	4619      	mov	r1, r3
 800852c:	4770      	bx	lr
 800852e:	425b      	negs	r3, r3
 8008530:	151b      	asrs	r3, r3, #20
 8008532:	2b13      	cmp	r3, #19
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	f04f 0100 	mov.w	r1, #0
 800853c:	dc04      	bgt.n	8008548 <__ulp+0x2c>
 800853e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008542:	fa42 f103 	asr.w	r1, r2, r3
 8008546:	4770      	bx	lr
 8008548:	2201      	movs	r2, #1
 800854a:	3b14      	subs	r3, #20
 800854c:	2b1e      	cmp	r3, #30
 800854e:	bfce      	itee	gt
 8008550:	4613      	movgt	r3, r2
 8008552:	f1c3 031f 	rsble	r3, r3, #31
 8008556:	fa02 f303 	lslle.w	r3, r2, r3
 800855a:	4618      	mov	r0, r3
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	7ff00000 	.word	0x7ff00000

08008564 <__b2d>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	6907      	ldr	r7, [r0, #16]
 800856a:	f100 0914 	add.w	r9, r0, #20
 800856e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008572:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008576:	f1a7 0804 	sub.w	r8, r7, #4
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff fdc7 	bl	800810e <__hi0bits>
 8008580:	f1c0 0320 	rsb	r3, r0, #32
 8008584:	280a      	cmp	r0, #10
 8008586:	600b      	str	r3, [r1, #0]
 8008588:	491e      	ldr	r1, [pc, #120]	; (8008604 <__b2d+0xa0>)
 800858a:	dc17      	bgt.n	80085bc <__b2d+0x58>
 800858c:	45c1      	cmp	r9, r8
 800858e:	bf28      	it	cs
 8008590:	2200      	movcs	r2, #0
 8008592:	f1c0 0c0b 	rsb	ip, r0, #11
 8008596:	fa26 f30c 	lsr.w	r3, r6, ip
 800859a:	bf38      	it	cc
 800859c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80085a0:	ea43 0501 	orr.w	r5, r3, r1
 80085a4:	f100 0315 	add.w	r3, r0, #21
 80085a8:	fa06 f303 	lsl.w	r3, r6, r3
 80085ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80085b0:	ea43 0402 	orr.w	r4, r3, r2
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085bc:	45c1      	cmp	r9, r8
 80085be:	bf3a      	itte	cc
 80085c0:	f1a7 0808 	subcc.w	r8, r7, #8
 80085c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80085c8:	2200      	movcs	r2, #0
 80085ca:	f1b0 030b 	subs.w	r3, r0, #11
 80085ce:	d015      	beq.n	80085fc <__b2d+0x98>
 80085d0:	409e      	lsls	r6, r3
 80085d2:	f1c3 0720 	rsb	r7, r3, #32
 80085d6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80085da:	fa22 f107 	lsr.w	r1, r2, r7
 80085de:	45c8      	cmp	r8, r9
 80085e0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80085e4:	ea46 0501 	orr.w	r5, r6, r1
 80085e8:	bf94      	ite	ls
 80085ea:	2100      	movls	r1, #0
 80085ec:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80085f0:	fa02 f003 	lsl.w	r0, r2, r3
 80085f4:	40f9      	lsrs	r1, r7
 80085f6:	ea40 0401 	orr.w	r4, r0, r1
 80085fa:	e7db      	b.n	80085b4 <__b2d+0x50>
 80085fc:	ea46 0501 	orr.w	r5, r6, r1
 8008600:	4614      	mov	r4, r2
 8008602:	e7d7      	b.n	80085b4 <__b2d+0x50>
 8008604:	3ff00000 	.word	0x3ff00000

08008608 <__d2b>:
 8008608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800860c:	461c      	mov	r4, r3
 800860e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008612:	2101      	movs	r1, #1
 8008614:	4690      	mov	r8, r2
 8008616:	f7ff fcb6 	bl	8007f86 <_Balloc>
 800861a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800861e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008622:	4607      	mov	r7, r0
 8008624:	bb34      	cbnz	r4, 8008674 <__d2b+0x6c>
 8008626:	9201      	str	r2, [sp, #4]
 8008628:	f1b8 0200 	subs.w	r2, r8, #0
 800862c:	d027      	beq.n	800867e <__d2b+0x76>
 800862e:	a802      	add	r0, sp, #8
 8008630:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008634:	f7ff fd8a 	bl	800814c <__lo0bits>
 8008638:	9900      	ldr	r1, [sp, #0]
 800863a:	b1f0      	cbz	r0, 800867a <__d2b+0x72>
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	f1c0 0320 	rsb	r3, r0, #32
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	430b      	orrs	r3, r1
 8008648:	40c2      	lsrs	r2, r0
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	9201      	str	r2, [sp, #4]
 800864e:	9b01      	ldr	r3, [sp, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	bf14      	ite	ne
 8008654:	2102      	movne	r1, #2
 8008656:	2101      	moveq	r1, #1
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	6139      	str	r1, [r7, #16]
 800865c:	b1c4      	cbz	r4, 8008690 <__d2b+0x88>
 800865e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008662:	4404      	add	r4, r0
 8008664:	6034      	str	r4, [r6, #0]
 8008666:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800866a:	6028      	str	r0, [r5, #0]
 800866c:	4638      	mov	r0, r7
 800866e:	b002      	add	sp, #8
 8008670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008674:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008678:	e7d5      	b.n	8008626 <__d2b+0x1e>
 800867a:	6179      	str	r1, [r7, #20]
 800867c:	e7e7      	b.n	800864e <__d2b+0x46>
 800867e:	a801      	add	r0, sp, #4
 8008680:	f7ff fd64 	bl	800814c <__lo0bits>
 8008684:	2101      	movs	r1, #1
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	6139      	str	r1, [r7, #16]
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	3020      	adds	r0, #32
 800868e:	e7e5      	b.n	800865c <__d2b+0x54>
 8008690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008694:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008698:	6030      	str	r0, [r6, #0]
 800869a:	6918      	ldr	r0, [r3, #16]
 800869c:	f7ff fd37 	bl	800810e <__hi0bits>
 80086a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80086a4:	e7e1      	b.n	800866a <__d2b+0x62>

080086a6 <__ratio>:
 80086a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086aa:	4688      	mov	r8, r1
 80086ac:	4669      	mov	r1, sp
 80086ae:	4681      	mov	r9, r0
 80086b0:	f7ff ff58 	bl	8008564 <__b2d>
 80086b4:	468b      	mov	fp, r1
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	4640      	mov	r0, r8
 80086bc:	a901      	add	r1, sp, #4
 80086be:	f7ff ff51 	bl	8008564 <__b2d>
 80086c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80086ca:	460d      	mov	r5, r1
 80086cc:	eba3 0c02 	sub.w	ip, r3, r2
 80086d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086d4:	1a9b      	subs	r3, r3, r2
 80086d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfd5      	itete	le
 80086de:	460a      	movle	r2, r1
 80086e0:	463a      	movgt	r2, r7
 80086e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80086e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80086ea:	bfd8      	it	le
 80086ec:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80086f0:	462b      	mov	r3, r5
 80086f2:	4602      	mov	r2, r0
 80086f4:	4659      	mov	r1, fp
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7f8 f818 	bl	800072c <__aeabi_ddiv>
 80086fc:	b003      	add	sp, #12
 80086fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008702 <__copybits>:
 8008702:	3901      	subs	r1, #1
 8008704:	b510      	push	{r4, lr}
 8008706:	1149      	asrs	r1, r1, #5
 8008708:	6914      	ldr	r4, [r2, #16]
 800870a:	3101      	adds	r1, #1
 800870c:	f102 0314 	add.w	r3, r2, #20
 8008710:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008714:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008718:	42a3      	cmp	r3, r4
 800871a:	4602      	mov	r2, r0
 800871c:	d303      	bcc.n	8008726 <__copybits+0x24>
 800871e:	2300      	movs	r3, #0
 8008720:	428a      	cmp	r2, r1
 8008722:	d305      	bcc.n	8008730 <__copybits+0x2e>
 8008724:	bd10      	pop	{r4, pc}
 8008726:	f853 2b04 	ldr.w	r2, [r3], #4
 800872a:	f840 2b04 	str.w	r2, [r0], #4
 800872e:	e7f3      	b.n	8008718 <__copybits+0x16>
 8008730:	f842 3b04 	str.w	r3, [r2], #4
 8008734:	e7f4      	b.n	8008720 <__copybits+0x1e>

08008736 <__any_on>:
 8008736:	f100 0214 	add.w	r2, r0, #20
 800873a:	6900      	ldr	r0, [r0, #16]
 800873c:	114b      	asrs	r3, r1, #5
 800873e:	4298      	cmp	r0, r3
 8008740:	b510      	push	{r4, lr}
 8008742:	db11      	blt.n	8008768 <__any_on+0x32>
 8008744:	dd0a      	ble.n	800875c <__any_on+0x26>
 8008746:	f011 011f 	ands.w	r1, r1, #31
 800874a:	d007      	beq.n	800875c <__any_on+0x26>
 800874c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008750:	fa24 f001 	lsr.w	r0, r4, r1
 8008754:	fa00 f101 	lsl.w	r1, r0, r1
 8008758:	428c      	cmp	r4, r1
 800875a:	d10b      	bne.n	8008774 <__any_on+0x3e>
 800875c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008760:	4293      	cmp	r3, r2
 8008762:	d803      	bhi.n	800876c <__any_on+0x36>
 8008764:	2000      	movs	r0, #0
 8008766:	bd10      	pop	{r4, pc}
 8008768:	4603      	mov	r3, r0
 800876a:	e7f7      	b.n	800875c <__any_on+0x26>
 800876c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008770:	2900      	cmp	r1, #0
 8008772:	d0f5      	beq.n	8008760 <__any_on+0x2a>
 8008774:	2001      	movs	r0, #1
 8008776:	e7f6      	b.n	8008766 <__any_on+0x30>

08008778 <_calloc_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	fb02 f401 	mul.w	r4, r2, r1
 800877e:	4621      	mov	r1, r4
 8008780:	f000 f854 	bl	800882c <_malloc_r>
 8008784:	4605      	mov	r5, r0
 8008786:	b118      	cbz	r0, 8008790 <_calloc_r+0x18>
 8008788:	4622      	mov	r2, r4
 800878a:	2100      	movs	r1, #0
 800878c:	f7fc fd2e 	bl	80051ec <memset>
 8008790:	4628      	mov	r0, r5
 8008792:	bd38      	pop	{r3, r4, r5, pc}

08008794 <_free_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4605      	mov	r5, r0
 8008798:	2900      	cmp	r1, #0
 800879a:	d043      	beq.n	8008824 <_free_r+0x90>
 800879c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a0:	1f0c      	subs	r4, r1, #4
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bfb8      	it	lt
 80087a6:	18e4      	addlt	r4, r4, r3
 80087a8:	f000 fa34 	bl	8008c14 <__malloc_lock>
 80087ac:	4a1e      	ldr	r2, [pc, #120]	; (8008828 <_free_r+0x94>)
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	4610      	mov	r0, r2
 80087b2:	b933      	cbnz	r3, 80087c2 <_free_r+0x2e>
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6014      	str	r4, [r2, #0]
 80087b8:	4628      	mov	r0, r5
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f000 ba2a 	b.w	8008c16 <__malloc_unlock>
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	d90b      	bls.n	80087de <_free_r+0x4a>
 80087c6:	6821      	ldr	r1, [r4, #0]
 80087c8:	1862      	adds	r2, r4, r1
 80087ca:	4293      	cmp	r3, r2
 80087cc:	bf01      	itttt	eq
 80087ce:	681a      	ldreq	r2, [r3, #0]
 80087d0:	685b      	ldreq	r3, [r3, #4]
 80087d2:	1852      	addeq	r2, r2, r1
 80087d4:	6022      	streq	r2, [r4, #0]
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	6004      	str	r4, [r0, #0]
 80087da:	e7ed      	b.n	80087b8 <_free_r+0x24>
 80087dc:	4613      	mov	r3, r2
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	b10a      	cbz	r2, 80087e6 <_free_r+0x52>
 80087e2:	42a2      	cmp	r2, r4
 80087e4:	d9fa      	bls.n	80087dc <_free_r+0x48>
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	1858      	adds	r0, r3, r1
 80087ea:	42a0      	cmp	r0, r4
 80087ec:	d10b      	bne.n	8008806 <_free_r+0x72>
 80087ee:	6820      	ldr	r0, [r4, #0]
 80087f0:	4401      	add	r1, r0
 80087f2:	1858      	adds	r0, r3, r1
 80087f4:	4282      	cmp	r2, r0
 80087f6:	6019      	str	r1, [r3, #0]
 80087f8:	d1de      	bne.n	80087b8 <_free_r+0x24>
 80087fa:	6810      	ldr	r0, [r2, #0]
 80087fc:	6852      	ldr	r2, [r2, #4]
 80087fe:	4401      	add	r1, r0
 8008800:	6019      	str	r1, [r3, #0]
 8008802:	605a      	str	r2, [r3, #4]
 8008804:	e7d8      	b.n	80087b8 <_free_r+0x24>
 8008806:	d902      	bls.n	800880e <_free_r+0x7a>
 8008808:	230c      	movs	r3, #12
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	e7d4      	b.n	80087b8 <_free_r+0x24>
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	1821      	adds	r1, r4, r0
 8008812:	428a      	cmp	r2, r1
 8008814:	bf01      	itttt	eq
 8008816:	6811      	ldreq	r1, [r2, #0]
 8008818:	6852      	ldreq	r2, [r2, #4]
 800881a:	1809      	addeq	r1, r1, r0
 800881c:	6021      	streq	r1, [r4, #0]
 800881e:	6062      	str	r2, [r4, #4]
 8008820:	605c      	str	r4, [r3, #4]
 8008822:	e7c9      	b.n	80087b8 <_free_r+0x24>
 8008824:	bd38      	pop	{r3, r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	2000023c 	.word	0x2000023c

0800882c <_malloc_r>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	1ccd      	adds	r5, r1, #3
 8008830:	f025 0503 	bic.w	r5, r5, #3
 8008834:	3508      	adds	r5, #8
 8008836:	2d0c      	cmp	r5, #12
 8008838:	bf38      	it	cc
 800883a:	250c      	movcc	r5, #12
 800883c:	2d00      	cmp	r5, #0
 800883e:	4606      	mov	r6, r0
 8008840:	db01      	blt.n	8008846 <_malloc_r+0x1a>
 8008842:	42a9      	cmp	r1, r5
 8008844:	d903      	bls.n	800884e <_malloc_r+0x22>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	f000 f9e1 	bl	8008c14 <__malloc_lock>
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <_malloc_r+0xac>)
 8008854:	6814      	ldr	r4, [r2, #0]
 8008856:	4621      	mov	r1, r4
 8008858:	b991      	cbnz	r1, 8008880 <_malloc_r+0x54>
 800885a:	4c20      	ldr	r4, [pc, #128]	; (80088dc <_malloc_r+0xb0>)
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	b91b      	cbnz	r3, 8008868 <_malloc_r+0x3c>
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f98f 	bl	8008b84 <_sbrk_r>
 8008866:	6020      	str	r0, [r4, #0]
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f98a 	bl	8008b84 <_sbrk_r>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d124      	bne.n	80088be <_malloc_r+0x92>
 8008874:	230c      	movs	r3, #12
 8008876:	4630      	mov	r0, r6
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	f000 f9cc 	bl	8008c16 <__malloc_unlock>
 800887e:	e7e4      	b.n	800884a <_malloc_r+0x1e>
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	1b5b      	subs	r3, r3, r5
 8008884:	d418      	bmi.n	80088b8 <_malloc_r+0x8c>
 8008886:	2b0b      	cmp	r3, #11
 8008888:	d90f      	bls.n	80088aa <_malloc_r+0x7e>
 800888a:	600b      	str	r3, [r1, #0]
 800888c:	18cc      	adds	r4, r1, r3
 800888e:	50cd      	str	r5, [r1, r3]
 8008890:	4630      	mov	r0, r6
 8008892:	f000 f9c0 	bl	8008c16 <__malloc_unlock>
 8008896:	f104 000b 	add.w	r0, r4, #11
 800889a:	1d23      	adds	r3, r4, #4
 800889c:	f020 0007 	bic.w	r0, r0, #7
 80088a0:	1ac3      	subs	r3, r0, r3
 80088a2:	d0d3      	beq.n	800884c <_malloc_r+0x20>
 80088a4:	425a      	negs	r2, r3
 80088a6:	50e2      	str	r2, [r4, r3]
 80088a8:	e7d0      	b.n	800884c <_malloc_r+0x20>
 80088aa:	684b      	ldr	r3, [r1, #4]
 80088ac:	428c      	cmp	r4, r1
 80088ae:	bf16      	itet	ne
 80088b0:	6063      	strne	r3, [r4, #4]
 80088b2:	6013      	streq	r3, [r2, #0]
 80088b4:	460c      	movne	r4, r1
 80088b6:	e7eb      	b.n	8008890 <_malloc_r+0x64>
 80088b8:	460c      	mov	r4, r1
 80088ba:	6849      	ldr	r1, [r1, #4]
 80088bc:	e7cc      	b.n	8008858 <_malloc_r+0x2c>
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d005      	beq.n	80088d4 <_malloc_r+0xa8>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 f95a 	bl	8008b84 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d0cf      	beq.n	8008874 <_malloc_r+0x48>
 80088d4:	6025      	str	r5, [r4, #0]
 80088d6:	e7db      	b.n	8008890 <_malloc_r+0x64>
 80088d8:	2000023c 	.word	0x2000023c
 80088dc:	20000240 	.word	0x20000240

080088e0 <__ssputs_r>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	688e      	ldr	r6, [r1, #8]
 80088e6:	4682      	mov	sl, r0
 80088e8:	429e      	cmp	r6, r3
 80088ea:	460c      	mov	r4, r1
 80088ec:	4690      	mov	r8, r2
 80088ee:	4699      	mov	r9, r3
 80088f0:	d837      	bhi.n	8008962 <__ssputs_r+0x82>
 80088f2:	898a      	ldrh	r2, [r1, #12]
 80088f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088f8:	d031      	beq.n	800895e <__ssputs_r+0x7e>
 80088fa:	2302      	movs	r3, #2
 80088fc:	6825      	ldr	r5, [r4, #0]
 80088fe:	6909      	ldr	r1, [r1, #16]
 8008900:	1a6f      	subs	r7, r5, r1
 8008902:	6965      	ldr	r5, [r4, #20]
 8008904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008908:	fb95 f5f3 	sdiv	r5, r5, r3
 800890c:	f109 0301 	add.w	r3, r9, #1
 8008910:	443b      	add	r3, r7
 8008912:	429d      	cmp	r5, r3
 8008914:	bf38      	it	cc
 8008916:	461d      	movcc	r5, r3
 8008918:	0553      	lsls	r3, r2, #21
 800891a:	d530      	bpl.n	800897e <__ssputs_r+0x9e>
 800891c:	4629      	mov	r1, r5
 800891e:	f7ff ff85 	bl	800882c <_malloc_r>
 8008922:	4606      	mov	r6, r0
 8008924:	b950      	cbnz	r0, 800893c <__ssputs_r+0x5c>
 8008926:	230c      	movs	r3, #12
 8008928:	f04f 30ff 	mov.w	r0, #4294967295
 800892c:	f8ca 3000 	str.w	r3, [sl]
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893c:	463a      	mov	r2, r7
 800893e:	6921      	ldr	r1, [r4, #16]
 8008940:	f7ff fb16 	bl	8007f70 <memcpy>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800894a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	6126      	str	r6, [r4, #16]
 8008952:	443e      	add	r6, r7
 8008954:	6026      	str	r6, [r4, #0]
 8008956:	464e      	mov	r6, r9
 8008958:	6165      	str	r5, [r4, #20]
 800895a:	1bed      	subs	r5, r5, r7
 800895c:	60a5      	str	r5, [r4, #8]
 800895e:	454e      	cmp	r6, r9
 8008960:	d900      	bls.n	8008964 <__ssputs_r+0x84>
 8008962:	464e      	mov	r6, r9
 8008964:	4632      	mov	r2, r6
 8008966:	4641      	mov	r1, r8
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	f000 f93a 	bl	8008be2 <memmove>
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	2000      	movs	r0, #0
 8008972:	1b9b      	subs	r3, r3, r6
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	441e      	add	r6, r3
 800897a:	6026      	str	r6, [r4, #0]
 800897c:	e7dc      	b.n	8008938 <__ssputs_r+0x58>
 800897e:	462a      	mov	r2, r5
 8008980:	f000 f94a 	bl	8008c18 <_realloc_r>
 8008984:	4606      	mov	r6, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	d1e2      	bne.n	8008950 <__ssputs_r+0x70>
 800898a:	6921      	ldr	r1, [r4, #16]
 800898c:	4650      	mov	r0, sl
 800898e:	f7ff ff01 	bl	8008794 <_free_r>
 8008992:	e7c8      	b.n	8008926 <__ssputs_r+0x46>

08008994 <_svfiprintf_r>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	461d      	mov	r5, r3
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	b09d      	sub	sp, #116	; 0x74
 800899e:	061f      	lsls	r7, r3, #24
 80089a0:	4680      	mov	r8, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	d50f      	bpl.n	80089c8 <_svfiprintf_r+0x34>
 80089a8:	690b      	ldr	r3, [r1, #16]
 80089aa:	b96b      	cbnz	r3, 80089c8 <_svfiprintf_r+0x34>
 80089ac:	2140      	movs	r1, #64	; 0x40
 80089ae:	f7ff ff3d 	bl	800882c <_malloc_r>
 80089b2:	6020      	str	r0, [r4, #0]
 80089b4:	6120      	str	r0, [r4, #16]
 80089b6:	b928      	cbnz	r0, 80089c4 <_svfiprintf_r+0x30>
 80089b8:	230c      	movs	r3, #12
 80089ba:	f8c8 3000 	str.w	r3, [r8]
 80089be:	f04f 30ff 	mov.w	r0, #4294967295
 80089c2:	e0c8      	b.n	8008b56 <_svfiprintf_r+0x1c2>
 80089c4:	2340      	movs	r3, #64	; 0x40
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	2300      	movs	r3, #0
 80089ca:	9309      	str	r3, [sp, #36]	; 0x24
 80089cc:	2320      	movs	r3, #32
 80089ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d2:	2330      	movs	r3, #48	; 0x30
 80089d4:	f04f 0b01 	mov.w	fp, #1
 80089d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089dc:	9503      	str	r5, [sp, #12]
 80089de:	4637      	mov	r7, r6
 80089e0:	463d      	mov	r5, r7
 80089e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089e6:	b10b      	cbz	r3, 80089ec <_svfiprintf_r+0x58>
 80089e8:	2b25      	cmp	r3, #37	; 0x25
 80089ea:	d13e      	bne.n	8008a6a <_svfiprintf_r+0xd6>
 80089ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80089f0:	d00b      	beq.n	8008a0a <_svfiprintf_r+0x76>
 80089f2:	4653      	mov	r3, sl
 80089f4:	4632      	mov	r2, r6
 80089f6:	4621      	mov	r1, r4
 80089f8:	4640      	mov	r0, r8
 80089fa:	f7ff ff71 	bl	80088e0 <__ssputs_r>
 80089fe:	3001      	adds	r0, #1
 8008a00:	f000 80a4 	beq.w	8008b4c <_svfiprintf_r+0x1b8>
 8008a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a06:	4453      	add	r3, sl
 8008a08:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0a:	783b      	ldrb	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 809d 	beq.w	8008b4c <_svfiprintf_r+0x1b8>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f04f 32ff 	mov.w	r2, #4294967295
 8008a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a24:	931a      	str	r3, [sp, #104]	; 0x68
 8008a26:	462f      	mov	r7, r5
 8008a28:	2205      	movs	r2, #5
 8008a2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a2e:	4850      	ldr	r0, [pc, #320]	; (8008b70 <_svfiprintf_r+0x1dc>)
 8008a30:	f7ff fa90 	bl	8007f54 <memchr>
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	b9d0      	cbnz	r0, 8008a6e <_svfiprintf_r+0xda>
 8008a38:	06d9      	lsls	r1, r3, #27
 8008a3a:	bf44      	itt	mi
 8008a3c:	2220      	movmi	r2, #32
 8008a3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a42:	071a      	lsls	r2, r3, #28
 8008a44:	bf44      	itt	mi
 8008a46:	222b      	movmi	r2, #43	; 0x2b
 8008a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a4c:	782a      	ldrb	r2, [r5, #0]
 8008a4e:	2a2a      	cmp	r2, #42	; 0x2a
 8008a50:	d015      	beq.n	8008a7e <_svfiprintf_r+0xea>
 8008a52:	462f      	mov	r7, r5
 8008a54:	2000      	movs	r0, #0
 8008a56:	250a      	movs	r5, #10
 8008a58:	9a07      	ldr	r2, [sp, #28]
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a60:	3b30      	subs	r3, #48	; 0x30
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d94d      	bls.n	8008b02 <_svfiprintf_r+0x16e>
 8008a66:	b1b8      	cbz	r0, 8008a98 <_svfiprintf_r+0x104>
 8008a68:	e00f      	b.n	8008a8a <_svfiprintf_r+0xf6>
 8008a6a:	462f      	mov	r7, r5
 8008a6c:	e7b8      	b.n	80089e0 <_svfiprintf_r+0x4c>
 8008a6e:	4a40      	ldr	r2, [pc, #256]	; (8008b70 <_svfiprintf_r+0x1dc>)
 8008a70:	463d      	mov	r5, r7
 8008a72:	1a80      	subs	r0, r0, r2
 8008a74:	fa0b f000 	lsl.w	r0, fp, r0
 8008a78:	4318      	orrs	r0, r3
 8008a7a:	9004      	str	r0, [sp, #16]
 8008a7c:	e7d3      	b.n	8008a26 <_svfiprintf_r+0x92>
 8008a7e:	9a03      	ldr	r2, [sp, #12]
 8008a80:	1d11      	adds	r1, r2, #4
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	9103      	str	r1, [sp, #12]
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	db01      	blt.n	8008a8e <_svfiprintf_r+0xfa>
 8008a8a:	9207      	str	r2, [sp, #28]
 8008a8c:	e004      	b.n	8008a98 <_svfiprintf_r+0x104>
 8008a8e:	4252      	negs	r2, r2
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	9207      	str	r2, [sp, #28]
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	783b      	ldrb	r3, [r7, #0]
 8008a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a9c:	d10c      	bne.n	8008ab8 <_svfiprintf_r+0x124>
 8008a9e:	787b      	ldrb	r3, [r7, #1]
 8008aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa2:	d133      	bne.n	8008b0c <_svfiprintf_r+0x178>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	3702      	adds	r7, #2
 8008aa8:	1d1a      	adds	r2, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9203      	str	r2, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ab6:	9305      	str	r3, [sp, #20]
 8008ab8:	4d2e      	ldr	r5, [pc, #184]	; (8008b74 <_svfiprintf_r+0x1e0>)
 8008aba:	2203      	movs	r2, #3
 8008abc:	7839      	ldrb	r1, [r7, #0]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7ff fa48 	bl	8007f54 <memchr>
 8008ac4:	b138      	cbz	r0, 8008ad6 <_svfiprintf_r+0x142>
 8008ac6:	2340      	movs	r3, #64	; 0x40
 8008ac8:	1b40      	subs	r0, r0, r5
 8008aca:	fa03 f000 	lsl.w	r0, r3, r0
 8008ace:	9b04      	ldr	r3, [sp, #16]
 8008ad0:	3701      	adds	r7, #1
 8008ad2:	4303      	orrs	r3, r0
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	7839      	ldrb	r1, [r7, #0]
 8008ad8:	2206      	movs	r2, #6
 8008ada:	4827      	ldr	r0, [pc, #156]	; (8008b78 <_svfiprintf_r+0x1e4>)
 8008adc:	1c7e      	adds	r6, r7, #1
 8008ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ae2:	f7ff fa37 	bl	8007f54 <memchr>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d038      	beq.n	8008b5c <_svfiprintf_r+0x1c8>
 8008aea:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <_svfiprintf_r+0x1e8>)
 8008aec:	bb13      	cbnz	r3, 8008b34 <_svfiprintf_r+0x1a0>
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	3307      	adds	r3, #7
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	3308      	adds	r3, #8
 8008af8:	9303      	str	r3, [sp, #12]
 8008afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afc:	444b      	add	r3, r9
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	e76d      	b.n	80089de <_svfiprintf_r+0x4a>
 8008b02:	fb05 3202 	mla	r2, r5, r2, r3
 8008b06:	2001      	movs	r0, #1
 8008b08:	460f      	mov	r7, r1
 8008b0a:	e7a6      	b.n	8008a5a <_svfiprintf_r+0xc6>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	250a      	movs	r5, #10
 8008b10:	4619      	mov	r1, r3
 8008b12:	3701      	adds	r7, #1
 8008b14:	9305      	str	r3, [sp, #20]
 8008b16:	4638      	mov	r0, r7
 8008b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b1c:	3a30      	subs	r2, #48	; 0x30
 8008b1e:	2a09      	cmp	r2, #9
 8008b20:	d903      	bls.n	8008b2a <_svfiprintf_r+0x196>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0c8      	beq.n	8008ab8 <_svfiprintf_r+0x124>
 8008b26:	9105      	str	r1, [sp, #20]
 8008b28:	e7c6      	b.n	8008ab8 <_svfiprintf_r+0x124>
 8008b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4607      	mov	r7, r0
 8008b32:	e7f0      	b.n	8008b16 <_svfiprintf_r+0x182>
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <_svfiprintf_r+0x1ec>)
 8008b3c:	a904      	add	r1, sp, #16
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7fc fbee 	bl	8005320 <_printf_float>
 8008b44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b48:	4681      	mov	r9, r0
 8008b4a:	d1d6      	bne.n	8008afa <_svfiprintf_r+0x166>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	065b      	lsls	r3, r3, #25
 8008b50:	f53f af35 	bmi.w	80089be <_svfiprintf_r+0x2a>
 8008b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b56:	b01d      	add	sp, #116	; 0x74
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	ab03      	add	r3, sp, #12
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	4622      	mov	r2, r4
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <_svfiprintf_r+0x1ec>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	4640      	mov	r0, r8
 8008b68:	f7fc fe86 	bl	8005878 <_printf_i>
 8008b6c:	e7ea      	b.n	8008b44 <_svfiprintf_r+0x1b0>
 8008b6e:	bf00      	nop
 8008b70:	08008fb4 	.word	0x08008fb4
 8008b74:	08008fba 	.word	0x08008fba
 8008b78:	08008fbe 	.word	0x08008fbe
 8008b7c:	08005321 	.word	0x08005321
 8008b80:	080088e1 	.word	0x080088e1

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	2300      	movs	r3, #0
 8008b88:	4c05      	ldr	r4, [pc, #20]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	f7f8 fede 	bl	8001950 <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200002f0 	.word	0x200002f0

08008ba4 <strncmp>:
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	b16a      	cbz	r2, 8008bc4 <strncmp+0x20>
 8008ba8:	3901      	subs	r1, #1
 8008baa:	1884      	adds	r4, r0, r2
 8008bac:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008bb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d103      	bne.n	8008bc0 <strncmp+0x1c>
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d001      	beq.n	8008bc0 <strncmp+0x1c>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f5      	bne.n	8008bac <strncmp+0x8>
 8008bc0:	1a98      	subs	r0, r3, r2
 8008bc2:	bd10      	pop	{r4, pc}
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	e7fc      	b.n	8008bc2 <strncmp+0x1e>

08008bc8 <__ascii_wctomb>:
 8008bc8:	b149      	cbz	r1, 8008bde <__ascii_wctomb+0x16>
 8008bca:	2aff      	cmp	r2, #255	; 0xff
 8008bcc:	bf8b      	itete	hi
 8008bce:	238a      	movhi	r3, #138	; 0x8a
 8008bd0:	700a      	strbls	r2, [r1, #0]
 8008bd2:	6003      	strhi	r3, [r0, #0]
 8008bd4:	2001      	movls	r0, #1
 8008bd6:	bf88      	it	hi
 8008bd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008bdc:	4770      	bx	lr
 8008bde:	4608      	mov	r0, r1
 8008be0:	4770      	bx	lr

08008be2 <memmove>:
 8008be2:	4288      	cmp	r0, r1
 8008be4:	b510      	push	{r4, lr}
 8008be6:	eb01 0302 	add.w	r3, r1, r2
 8008bea:	d807      	bhi.n	8008bfc <memmove+0x1a>
 8008bec:	1e42      	subs	r2, r0, #1
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d00a      	beq.n	8008c08 <memmove+0x26>
 8008bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bf6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008bfa:	e7f8      	b.n	8008bee <memmove+0xc>
 8008bfc:	4283      	cmp	r3, r0
 8008bfe:	d9f5      	bls.n	8008bec <memmove+0xa>
 8008c00:	1881      	adds	r1, r0, r2
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	42d3      	cmn	r3, r2
 8008c06:	d100      	bne.n	8008c0a <memmove+0x28>
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c12:	e7f7      	b.n	8008c04 <memmove+0x22>

08008c14 <__malloc_lock>:
 8008c14:	4770      	bx	lr

08008c16 <__malloc_unlock>:
 8008c16:	4770      	bx	lr

08008c18 <_realloc_r>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	460e      	mov	r6, r1
 8008c20:	b921      	cbnz	r1, 8008c2c <_realloc_r+0x14>
 8008c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c26:	4611      	mov	r1, r2
 8008c28:	f7ff be00 	b.w	800882c <_malloc_r>
 8008c2c:	b922      	cbnz	r2, 8008c38 <_realloc_r+0x20>
 8008c2e:	f7ff fdb1 	bl	8008794 <_free_r>
 8008c32:	4625      	mov	r5, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c38:	f000 f814 	bl	8008c64 <_malloc_usable_size_r>
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d20f      	bcs.n	8008c60 <_realloc_r+0x48>
 8008c40:	4621      	mov	r1, r4
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff fdf2 	bl	800882c <_malloc_r>
 8008c48:	4605      	mov	r5, r0
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d0f2      	beq.n	8008c34 <_realloc_r+0x1c>
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4622      	mov	r2, r4
 8008c52:	f7ff f98d 	bl	8007f70 <memcpy>
 8008c56:	4631      	mov	r1, r6
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff fd9b 	bl	8008794 <_free_r>
 8008c5e:	e7e9      	b.n	8008c34 <_realloc_r+0x1c>
 8008c60:	4635      	mov	r5, r6
 8008c62:	e7e7      	b.n	8008c34 <_realloc_r+0x1c>

08008c64 <_malloc_usable_size_r>:
 8008c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c68:	1f18      	subs	r0, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bfbc      	itt	lt
 8008c6e:	580b      	ldrlt	r3, [r1, r0]
 8008c70:	18c0      	addlt	r0, r0, r3
 8008c72:	4770      	bx	lr

08008c74 <_init>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr

08008c80 <_fini>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr
