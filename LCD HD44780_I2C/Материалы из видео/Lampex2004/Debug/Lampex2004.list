
Lampex2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080063d0  080063d0  000163d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  080066b0  080066b0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066b0  080066b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080066b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  200001e8  080068a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080068a0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fd5  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001534  00000000  00000000  000281e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00029720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  00029e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f07  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068fe  00000000  00000000  00041407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082512  00000000  00000000  00047d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029bc  00000000  00000000  000ca294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080063b4 	.word	0x080063b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080063b4 	.word	0x080063b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <lcd1602_Send_init_Data+0x80>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d007      	beq.n	8000b88 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e006      	b.n	8000b96 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f023 0308 	bic.w	r3, r3, #8
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	214e      	movs	r1, #78	; 0x4e
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <lcd1602_Send_init_Data+0x84>)
 8000bb0:	f000 ff84 	bl	8001abc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000bb4:	2005      	movs	r0, #5
 8000bb6:	f000 fbe9 	bl	800138c <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f023 0304 	bic.w	r3, r3, #4
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000bc8:	230a      	movs	r3, #10
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	214e      	movs	r1, #78	; 0x4e
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <lcd1602_Send_init_Data+0x84>)
 8000bd4:	f000 ff72 	bl	8001abc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000bd8:	2005      	movs	r0, #5
 8000bda:	f000 fbd7 	bl	800138c <HAL_Delay>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000214 	.word	0x20000214

08000bf0 <lcd1602_Write_byte>:
/*-------------Функция для отправки данных при инициализации дисплея-------------*/

/*--------------------Функция отправки байта информации на дисплей---------------*/
/// Функция отправки байта информации на дисплей
/// \param Data - Байт данныйх
static void lcd1602_Write_byte(uint8_t Data) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, &Data, 1, 10);
 8000bfa:	1dfa      	adds	r2, r7, #7
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	214e      	movs	r1, #78	; 0x4e
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <lcd1602_Write_byte+0x24>)
 8000c06:	f000 ff59 	bl	8001abc <HAL_I2C_Master_Transmit>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000214 	.word	0x20000214

08000c18 <lcd1602_Send_cmd>:
/*--------------------Функция отправки байта информации на дисплей---------------*/

/*----------------------Функция отправки пол байта информации--------------------*/
/// Функция отправки пол байта информации
/// \*param Data - байт данных
static void lcd1602_Send_cmd(uint8_t Data) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	Data <<= 4;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	71fb      	strb	r3, [r7, #7]
	lcd1602_Write_byte(global_buffer |= 0x04); // Устанавливаем стробирующий сигнал E в 1
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffd8 	bl	8000bf0 <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer | Data); // Отправляем в дисплей полученный и сдвинутый байт
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ffd0 	bl	8000bf0 <lcd1602_Write_byte>
	lcd1602_Write_byte(global_buffer &= ~0x04);	// Устанавливаем стробирующий сигнал E в 0.
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f023 0304 	bic.w	r3, r3, #4
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <lcd1602_Send_cmd+0x58>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffc4 	bl	8000bf0 <lcd1602_Write_byte>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000204 	.word	0x20000204

08000c74 <lcd1602_Send_data_symbol>:

/*----------------------Функция отправки байта данных----------------------------*/
/// Функция отправки байта данных на дисплей
/// \param Data - байт данных
/// \param mode - отправка команды. 1 - RW = 1(отправка данных). 0 - RW = 0(отправка команды).
static void lcd1602_Send_data_symbol(uint8_t Data, uint8_t mode) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	if (mode == 0) {
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10c      	bne.n	8000ca4 <lcd1602_Send_data_symbol+0x30>
		lcd1602_Write_byte(global_buffer &= ~0x01); // RS = 0
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	f023 0301 	bic.w	r3, r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffa7 	bl	8000bf0 <lcd1602_Write_byte>
 8000ca2:	e00b      	b.n	8000cbc <lcd1602_Send_data_symbol+0x48>
	} else {
		lcd1602_Write_byte(global_buffer |= 0x01); // RS = 1
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <lcd1602_Send_data_symbol+0x6c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff9a 	bl	8000bf0 <lcd1602_Write_byte>
	}
	uint8_t MSB_Data = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
	MSB_Data = Data >> 4; // Сдвигаем полученный байт на 4 позичии и записываем в переменную
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_cmd(MSB_Data);	// Отправляем первые 4 бита полученного байта
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ffa5 	bl	8000c18 <lcd1602_Send_cmd>
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffa1 	bl	8000c18 <lcd1602_Send_cmd>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000204 	.word	0x20000204

08000ce4 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <lcd1602_Send_data+0x74>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d007      	beq.n	8000d04 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e006      	b.n	8000d12 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f023 0308 	bic.w	r3, r3, #8
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000d20:	230a      	movs	r3, #10
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	214e      	movs	r1, #78	; 0x4e
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <lcd1602_Send_data+0x78>)
 8000d2c:	f000 fec6 	bl	8001abc <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	f023 0304 	bic.w	r3, r3, #4
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000d3e:	230a      	movs	r3, #10
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	214e      	movs	r1, #78	; 0x4e
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <lcd1602_Send_data+0x78>)
 8000d4a:	f000 feb7 	bl	8001abc <HAL_I2C_Master_Transmit>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000214 	.word	0x20000214

08000d60 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000d66:	2330      	movs	r3, #48	; 0x30
 8000d68:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f000 fb0e 	bl	800138c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fef8 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f000 fb07 	bl	800138c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fef1 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fb00 	bl	800138c <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff feea 	bl	8000b68 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000d94:	2320      	movs	r3, #32
 8000d96:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fee4 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000da0:	2320      	movs	r3, #32
 8000da2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fede 	bl	8000b68 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fed8 	bl	8000b68 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fed2 	bl	8000b68 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fecc 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fec6 	bl	8000b68 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fec0 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff feba 	bl	8000b68 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000df4:	2330      	movs	r3, #48	; 0x30
 8000df6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff feb4 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000e00:	2300      	movs	r3, #0
 8000e02:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff feae 	bl	8000b68 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000e0c:	23c0      	movs	r3, #192	; 0xc0
 8000e0e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fea8 	bl	8000b68 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	f023 030f 	bic.w	r3, r3, #15
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	f043 0309 	orr.w	r3, r3, #9
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000e3e:	f107 030f 	add.w	r3, r7, #15
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff4e 	bl	8000ce4 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	f043 0309 	orr.w	r3, r3, #9
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000e58:	f107 030f 	add.w	r3, r7, #15
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff41 	bl	8000ce4 <lcd1602_Send_data>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	460a      	mov	r2, r1
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d901      	bls.n	8000e84 <lcd1602_SetCursor+0x1a>
		y = 3;
 8000e80:	2303      	movs	r3, #3
 8000e82:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b27      	cmp	r3, #39	; 0x27
 8000e88:	d901      	bls.n	8000e8e <lcd1602_SetCursor+0x24>
		x = 39;
 8000e8a:	2327      	movs	r3, #39	; 0x27
 8000e8c:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <lcd1602_SetCursor+0x2e>
		adr = x;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d102      	bne.n	8000ea4 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	3340      	adds	r3, #64	; 0x40
 8000ea2:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d102      	bne.n	8000eb0 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	3314      	adds	r3, #20
 8000eae:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d102      	bne.n	8000ebc <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3354      	adds	r3, #84	; 0x54
 8000eba:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000ed0:	f107 030e 	add.w	r3, r7, #14
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff05 	bl	8000ce4 <lcd1602_Send_data>

	command = (adr << 4);
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000ee2:	f107 030e 	add.w	r3, r7, #14
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fefc 	bl	8000ce4 <lcd1602_Send_data>

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <lcd1602_Create_symbol>:

/*---------------------Функция создания своего символа-------------------------- */
/// Функция создания своего собственного символа и запись его в память.
/// \param *my_Symbol - массив с символом
/// \param memory_adress - номер ячейки: от 1 до 8. Всего 8 ячеек.
void lcd1602_Create_symbol(uint8_t *my_Symbol, uint8_t memory_adress) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	lcd1602_Send_data_symbol(((memory_adress * 8) | 0x40), 0);
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f0c:	b25b      	sxtb	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff feae 	bl	8000c74 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e00a      	b.n	8000f34 <lcd1602_Create_symbol+0x40>
		lcd1602_Send_data_symbol(my_Symbol[i], 1); // Записываем данные побайтово в память
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fea3 	bl	8000c74 <lcd1602_Send_data_symbol>
	for (uint8_t i = 0; i < 8; i++) {
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b07      	cmp	r3, #7
 8000f38:	d9f1      	bls.n	8000f1e <lcd1602_Create_symbol+0x2a>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f48:	f000 f9be 	bl	80012c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f4c:	f000 f81c 	bl	8000f88 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f50:	f000 f88e 	bl	8001070 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f54:	f000 f85e 	bl	8001014 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f000 fa17 	bl	800138c <HAL_Delay>
	lcd1602_Init();
 8000f5e:	f7ff feff 	bl	8000d60 <lcd1602_Init>
	lcd1602_Create_symbol((uint8_t * )people, 1);
 8000f62:	2101      	movs	r1, #1
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <main+0x40>)
 8000f66:	f7ff ffc5 	bl	8000ef4 <lcd1602_Create_symbol>
	lcd1602_SetCursor(0, 0);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ff7c 	bl	8000e6a <lcd1602_SetCursor>
	lcd1602_Print_symbol(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff ff54 	bl	8000e20 <lcd1602_Print_symbol>
		//lcd1602_Print_text(lcd1602_tx_buffer);

		//lcd1602_SetCursor(0, 1);
		//sprintf(lcd1602_tx_buffer, "float = %.3f    ", counter_float);
		//lcd1602_Print_text(lcd1602_tx_buffer);
		HAL_Delay(300);
 8000f78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f7c:	f000 fa06 	bl	800138c <HAL_Delay>
 8000f80:	e7fa      	b.n	8000f78 <main+0x34>
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004

08000f88 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b090      	sub	sp, #64	; 0x40
 8000f8c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2228      	movs	r2, #40	; 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fcc8 	bl	800292c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f879 	bl	80020c8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x58>
		Error_Handler();
 8000fdc:	f000 f876 	bl	80010cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fae4 	bl	80025c8 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x82>
		Error_Handler();
 8001006:	f000 f861 	bl	80010cc <Error_Handler>
	}
}
 800100a:	bf00      	nop
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C1_Init+0x50>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_I2C1_Init+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C1_Init+0x50>)
 8001020:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_I2C1_Init+0x58>)
 8001022:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C1_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_I2C1_Init+0x50>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_I2C1_Init+0x50>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_I2C1_Init+0x50>)
 8001052:	f000 fbfb 	bl	800184c <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800105c:	f000 f836 	bl	80010cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000214 	.word	0x20000214
 8001068:	40005400 	.word	0x40005400
 800106c:	00061a80 	.word	0x00061a80

08001070 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <MX_GPIO_Init+0x58>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <MX_GPIO_Init+0x58>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_GPIO_Init+0x58>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010ac:	f043 0308 	orr.w	r3, r3, #8
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <MX_GPIO_Init+0x58>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000

080010cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010d2:	e7fe      	b.n	80010d2 <Error_Handler+0x6>

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_MspInit+0x5c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_MspInit+0x5c>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x5c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x5c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MspInit+0x60>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_MspInit+0x60>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_I2C_MspInit+0x70>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d123      	bne.n	80011a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_I2C_MspInit+0x74>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_I2C_MspInit+0x74>)
 800115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001162:	61d3      	str	r3, [r2, #28]
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_I2C_MspInit+0x74>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_I2C_MspInit+0x74>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_I2C_MspInit+0x74>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_I2C_MspInit+0x74>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001188:	23c0      	movs	r3, #192	; 0xc0
 800118a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_I2C_MspInit+0x78>)
 800119c:	f000 f9fc 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fa:	f000 f8ab 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f001 fb50 	bl	80028d8 <__errno>
 8001238:	4602      	mov	r2, r0
 800123a:	230c      	movs	r3, #12
 800123c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20005000 	.word	0x20005000
 8001264:	00000400 	.word	0x00000400
 8001268:	20000208 	.word	0x20000208
 800126c:	20000270 	.word	0x20000270

08001270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800127c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800127e:	e003      	b.n	8001288 <LoopCopyDataInit>

08001280 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001282:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001284:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001286:	3104      	adds	r1, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800128c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800128e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001290:	d3f6      	bcc.n	8001280 <CopyDataInit>
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001294:	e002      	b.n	800129c <LoopFillZerobss>

08001296 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001298:	f842 3b04 	str.w	r3, [r2], #4

0800129c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012a0:	d3f9      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a2:	f7ff ffe5 	bl	8001270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f001 fb1d 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fe4b 	bl	8000f44 <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r3, =_sidata
 80012b0:	080066b8 	.word	0x080066b8
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012b8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80012bc:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80012c0:	20000270 	.word	0x20000270

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f929 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fef6 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f933 	bl	800157e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f909 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000014 	.word	0x20000014
 8001350:	20000010 	.word	0x20000010

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <HAL_IncTick+0x20>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000014 	.word	0x20000014
 8001374:	20000268 	.word	0x20000268

08001378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000268 	.word	0x20000268

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff0 	bl	8001378 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_Delay+0x40>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffe0 	bl	8001378 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000014 	.word	0x20000014

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff90 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff49 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff5e 	bl	8001418 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff90 	bl	8001488 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5f 	bl	8001434 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffb0 	bl	80014ec <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	e127      	b.n	80017fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ac:	2201      	movs	r2, #1
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8116 	bne.w	80017f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d034      	beq.n	800163c <HAL_GPIO_Init+0xa4>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d80d      	bhi.n	80015f2 <HAL_GPIO_Init+0x5a>
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d02b      	beq.n	8001632 <HAL_GPIO_Init+0x9a>
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d804      	bhi.n	80015e8 <HAL_GPIO_Init+0x50>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d031      	beq.n	8001646 <HAL_GPIO_Init+0xae>
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d01c      	beq.n	8001620 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e048      	b.n	800167a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d043      	beq.n	8001674 <HAL_GPIO_Init+0xdc>
 80015ec:	2b11      	cmp	r3, #17
 80015ee:	d01b      	beq.n	8001628 <HAL_GPIO_Init+0x90>
          break;
 80015f0:	e043      	b.n	800167a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015f2:	4a89      	ldr	r2, [pc, #548]	; (8001818 <HAL_GPIO_Init+0x280>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d026      	beq.n	8001646 <HAL_GPIO_Init+0xae>
 80015f8:	4a87      	ldr	r2, [pc, #540]	; (8001818 <HAL_GPIO_Init+0x280>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d806      	bhi.n	800160c <HAL_GPIO_Init+0x74>
 80015fe:	4a87      	ldr	r2, [pc, #540]	; (800181c <HAL_GPIO_Init+0x284>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d020      	beq.n	8001646 <HAL_GPIO_Init+0xae>
 8001604:	4a86      	ldr	r2, [pc, #536]	; (8001820 <HAL_GPIO_Init+0x288>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01d      	beq.n	8001646 <HAL_GPIO_Init+0xae>
          break;
 800160a:	e036      	b.n	800167a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800160c:	4a85      	ldr	r2, [pc, #532]	; (8001824 <HAL_GPIO_Init+0x28c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0xae>
 8001612:	4a85      	ldr	r2, [pc, #532]	; (8001828 <HAL_GPIO_Init+0x290>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d016      	beq.n	8001646 <HAL_GPIO_Init+0xae>
 8001618:	4a84      	ldr	r2, [pc, #528]	; (800182c <HAL_GPIO_Init+0x294>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0xae>
          break;
 800161e:	e02c      	b.n	800167a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e028      	b.n	800167a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	3304      	adds	r3, #4
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e023      	b.n	800167a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e01e      	b.n	800167a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	330c      	adds	r3, #12
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e019      	b.n	800167a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164e:	2304      	movs	r3, #4
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e012      	b.n	800167a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	611a      	str	r2, [r3, #16]
          break;
 8001666:	e008      	b.n	800167a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	615a      	str	r2, [r3, #20]
          break;
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2bff      	cmp	r3, #255	; 0xff
 800167e:	d801      	bhi.n	8001684 <HAL_GPIO_Init+0xec>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e001      	b.n	8001688 <HAL_GPIO_Init+0xf0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3304      	adds	r3, #4
 8001688:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2bff      	cmp	r3, #255	; 0xff
 800168e:	d802      	bhi.n	8001696 <HAL_GPIO_Init+0xfe>
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x104>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3b08      	subs	r3, #8
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	210f      	movs	r1, #15
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8096 	beq.w	80017f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ca:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_GPIO_Init+0x298>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_GPIO_Init+0x298>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_GPIO_Init+0x298>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e2:	4a54      	ldr	r2, [pc, #336]	; (8001834 <HAL_GPIO_Init+0x29c>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_GPIO_Init+0x2a0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x19e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4a      	ldr	r2, [pc, #296]	; (800183c <HAL_GPIO_Init+0x2a4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x19a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a49      	ldr	r2, [pc, #292]	; (8001840 <HAL_GPIO_Init+0x2a8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x196>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a48      	ldr	r2, [pc, #288]	; (8001844 <HAL_GPIO_Init+0x2ac>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x192>
 8001726:	2303      	movs	r3, #3
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x1a0>
 800172a:	2304      	movs	r3, #4
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x1a0>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x1a0>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x1a0>
 8001736:	2300      	movs	r3, #0
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001748:	493a      	ldr	r1, [pc, #232]	; (8001834 <HAL_GPIO_Init+0x29c>)
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4938      	ldr	r1, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	43db      	mvns	r3, r3
 8001778:	4933      	ldr	r1, [pc, #204]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 800177a:	4013      	ands	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d006      	beq.n	8001798 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	492e      	ldr	r1, [pc, #184]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	43db      	mvns	r3, r3
 80017a0:	4929      	ldr	r1, [pc, #164]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	4924      	ldr	r1, [pc, #144]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
 80017be:	e006      	b.n	80017ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	491f      	ldr	r1, [pc, #124]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	491a      	ldr	r1, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f aed0 	bne.w	80015ac <HAL_GPIO_Init+0x14>
  }
}
 800180c:	bf00      	nop
 800180e:	372c      	adds	r7, #44	; 0x2c
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	10210000 	.word	0x10210000
 800181c:	10110000 	.word	0x10110000
 8001820:	10120000 	.word	0x10120000
 8001824:	10310000 	.word	0x10310000
 8001828:	10320000 	.word	0x10320000
 800182c:	10220000 	.word	0x10220000
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	40010800 	.word	0x40010800
 800183c:	40010c00 	.word	0x40010c00
 8001840:	40011000 	.word	0x40011000
 8001844:	40011400 	.word	0x40011400
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e11f      	b.n	8001a9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fc60 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800189e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b0:	f000 ffe0 	bl	8002874 <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	; (8001aa8 <HAL_I2C_Init+0x25c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d807      	bhi.n	80018d0 <HAL_I2C_Init+0x84>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_I2C_Init+0x260>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bf94      	ite	ls
 80018c8:	2301      	movls	r3, #1
 80018ca:	2300      	movhi	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e006      	b.n	80018de <HAL_I2C_Init+0x92>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_I2C_Init+0x264>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0db      	b.n	8001a9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a72      	ldr	r2, [pc, #456]	; (8001ab4 <HAL_I2C_Init+0x268>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a64      	ldr	r2, [pc, #400]	; (8001aa8 <HAL_I2C_Init+0x25c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d802      	bhi.n	8001920 <HAL_I2C_Init+0xd4>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3301      	adds	r3, #1
 800191e:	e009      	b.n	8001934 <HAL_I2C_Init+0xe8>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a63      	ldr	r2, [pc, #396]	; (8001ab8 <HAL_I2C_Init+0x26c>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	3301      	adds	r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	430b      	orrs	r3, r1
 800193a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4956      	ldr	r1, [pc, #344]	; (8001aa8 <HAL_I2C_Init+0x25c>)
 8001950:	428b      	cmp	r3, r1
 8001952:	d80d      	bhi.n	8001970 <HAL_I2C_Init+0x124>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e59      	subs	r1, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b04      	cmp	r3, #4
 800196a:	bf38      	it	cc
 800196c:	2304      	movcc	r3, #4
 800196e:	e04f      	b.n	8001a10 <HAL_I2C_Init+0x1c4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d111      	bne.n	800199c <HAL_I2C_Init+0x150>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e012      	b.n	80019c2 <HAL_I2C_Init+0x176>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Init+0x17e>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e022      	b.n	8001a10 <HAL_I2C_Init+0x1c4>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10e      	bne.n	80019f0 <HAL_I2C_Init+0x1a4>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1e58      	subs	r0, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	440b      	add	r3, r1
 80019e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	e00f      	b.n	8001a10 <HAL_I2C_Init+0x1c4>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e58      	subs	r0, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	0099      	lsls	r1, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	6809      	ldr	r1, [r1, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6911      	ldr	r1, [r2, #16]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68d2      	ldr	r2, [r2, #12]
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	000186a0 	.word	0x000186a0
 8001aac:	001e847f 	.word	0x001e847f
 8001ab0:	003d08ff 	.word	0x003d08ff
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
 8001acc:	4613      	mov	r3, r2
 8001ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fc52 	bl	8001378 <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	f040 80e0 	bne.w	8001ca4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2319      	movs	r3, #25
 8001aea:	2201      	movs	r2, #1
 8001aec:	4970      	ldr	r1, [pc, #448]	; (8001cb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f964 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
 8001afc:	e0d3      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_I2C_Master_Transmit+0x50>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e0cc      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d007      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2221      	movs	r2, #33	; 0x21
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	893a      	ldrh	r2, [r7, #8]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4a50      	ldr	r2, [pc, #320]	; (8001cb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b74:	8979      	ldrh	r1, [r7, #10]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f89c 	bl	8001cb8 <I2C_MasterRequestWrite>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e08d      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ba0:	e066      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f9de 	bl	8001f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06b      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d11b      	bne.n	8001c44 <HAL_I2C_Master_Transmit+0x188>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9ce 	bl	8001fea <I2C_WaitOnBTFFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e01a      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d194      	bne.n	8001ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	00100002 	.word	0x00100002
 8001cb4:	ffff0000 	.word	0xffff0000

08001cb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d006      	beq.n	8001ce2 <I2C_MasterRequestWrite+0x2a>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d003      	beq.n	8001ce2 <I2C_MasterRequestWrite+0x2a>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ce0:	d108      	bne.n	8001cf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e00b      	b.n	8001d0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d107      	bne.n	8001d0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f84f 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d32:	d103      	bne.n	8001d3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e035      	b.n	8001dac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d48:	d108      	bne.n	8001d5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e01b      	b.n	8001d94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	11db      	asrs	r3, r3, #7
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f003 0306 	and.w	r3, r3, #6
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f063 030f 	orn	r3, r3, #15
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <I2C_MasterRequestWrite+0xfc>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f875 	bl	8001e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e010      	b.n	8001dac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <I2C_MasterRequestWrite+0x100>)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f865 	bl	8001e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	00010008 	.word	0x00010008
 8001db8:	00010002 	.word	0x00010002

08001dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dcc:	e025      	b.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d021      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7ff facf 	bl	8001378 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d302      	bcc.n	8001dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d116      	bne.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f043 0220 	orr.w	r2, r3, #32
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e023      	b.n	8001e62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10d      	bne.n	8001e40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	e00c      	b.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d0b6      	beq.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e78:	e051      	b.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d123      	bne.n	8001ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ea2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f043 0204 	orr.w	r2, r3, #4
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e046      	b.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d021      	beq.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff fa4d 	bl	8001378 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d116      	bne.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e020      	b.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10c      	bne.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	e00b      	b.n	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d18d      	bne.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f74:	e02d      	b.n	8001fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f878 	bl	800206c <I2C_IsAcknowledgeFailed>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e02d      	b.n	8001fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d021      	beq.n	8001fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff f9f3 	bl	8001378 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d116      	bne.n	8001fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e007      	b.n	8001fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d1ca      	bne.n	8001f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff6:	e02d      	b.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f837 	bl	800206c <I2C_IsAcknowledgeFailed>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e02d      	b.n	8002064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d021      	beq.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002010:	f7ff f9b2 	bl	8001378 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d302      	bcc.n	8002026 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e007      	b.n	8002064 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d1ca      	bne.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d11b      	bne.n	80020bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800208c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e26c      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8087 	beq.w	80021f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00c      	beq.n	800210e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d112      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d06c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x12c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d168      	bne.n	80021f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e246      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x76>
 8002130:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e02e      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x98>
 8002146:	4b7b      	ldr	r3, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a7a      	ldr	r2, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e01d      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0xbc>
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0xd4>
 8002184:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8e8 	bl	8001378 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff f8e4 	bl	8001378 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1fa      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b5d      	ldr	r3, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0xe4>
 80021ca:	e014      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff f8d4 	bl	8001378 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d4:	f7ff f8d0 	bl	8001378 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1e6      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x10c>
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d063      	beq.n	80022ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002202:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220e:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b08      	cmp	r3, #8
 8002218:	d11c      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e1ba      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4939      	ldr	r1, [pc, #228]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	e03a      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff f889 	bl	8001378 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff f885 	bl	8001378 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e19b      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4927      	ldr	r1, [pc, #156]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e015      	b.n	80022ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_OscConfig+0x270>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f868 	bl	8001378 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ac:	f7ff f864 	bl	8001378 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e17a      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03a      	beq.n	800234c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d019      	beq.n	8002312 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_RCC_OscConfig+0x274>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7ff f848 	bl	8001378 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff f844 	bl	8001378 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e15a      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_RCC_OscConfig+0x26c>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f000 fac6 	bl	800289c <RCC_Delay>
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_OscConfig+0x274>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff f82e 	bl	8001378 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231e:	e00f      	b.n	8002340 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff f82a 	bl	8001378 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d908      	bls.n	8002340 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e140      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	42420000 	.word	0x42420000
 800233c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e9      	bne.n	8002320 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a6 	beq.w	80024a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b94      	ldr	r3, [pc, #592]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a93      	ldr	r2, [pc, #588]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b91      	ldr	r3, [pc, #580]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4b8e      	ldr	r3, [pc, #568]	; (80025c0 <HAL_RCC_OscConfig+0x4f8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x4f8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a8a      	ldr	r2, [pc, #552]	; (80025c0 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe ffeb 	bl	8001378 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe ffe7 	bl	8001378 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0fd      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x4f8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x312>
 80023cc:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	e02d      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x334>
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a75      	ldr	r2, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a72      	ldr	r2, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x356>
 8002404:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a6c      	ldr	r2, [pc, #432]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x36e>
 800241e:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a63      	ldr	r2, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe ff9b 	bl	8001378 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe ff97 	bl	8001378 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0ab      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b57      	ldr	r3, [pc, #348]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x37e>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe ff85 	bl	8001378 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe ff81 	bl	8001378 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e095      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b48      	ldr	r3, [pc, #288]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a47      	ldr	r2, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8081 	beq.w	80025b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d061      	beq.n	8002580 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d146      	bne.n	8002552 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x4fc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe ff55 	bl	8001378 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe ff51 	bl	8001378 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e067      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d108      	bne.n	800250c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	492d      	ldr	r1, [pc, #180]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a19      	ldr	r1, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	430b      	orrs	r3, r1
 800251e:	4927      	ldr	r1, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x4fc>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe ff25 	bl	8001378 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe ff21 	bl	8001378 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e037      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x46a>
 8002550:	e02f      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_RCC_OscConfig+0x4fc>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe ff0e 	bl	8001378 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe ff0a 	bl	8001378 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e020      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x498>
 800257e:	e018      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e013      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_OscConfig+0x4f4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	429a      	cmp	r2, r3
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42420060 	.word	0x42420060

080025c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d0      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b6a      	ldr	r3, [pc, #424]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d910      	bls.n	800260c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 0207 	bic.w	r2, r3, #7
 80025f2:	4965      	ldr	r1, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800262e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002646:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d040      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e073      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06b      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4936      	ldr	r1, [pc, #216]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b8:	f7fe fe5e 	bl	8001378 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fe5a 	bl	8001378 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e053      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b2d      	ldr	r3, [pc, #180]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d210      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4922      	ldr	r1, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4601      	mov	r1, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	fa21 f303 	lsr.w	r3, r1, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1cc>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1d0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fdbc 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40022000 	.word	0x40022000
 800278c:	40021000 	.word	0x40021000
 8002790:	080063e4 	.word	0x080063e4
 8002794:	2000000c 	.word	0x2000000c
 8002798:	20000010 	.word	0x20000010

0800279c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b490      	push	{r4, r7}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_GetSysClockFreq+0xb0>)
 80027a4:	1d3c      	adds	r4, r7, #4
 80027a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d002      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d003      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x46>
 80027da:	e02d      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027de:	623b      	str	r3, [r7, #32]
      break;
 80027e0:	e02d      	b.n	800283e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	0c9b      	lsrs	r3, r3, #18
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ee:	4413      	add	r3, r2
 80027f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c5b      	lsrs	r3, r3, #17
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800280e:	4413      	add	r3, r2
 8002810:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002814:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800281a:	fb02 f203 	mul.w	r2, r2, r3
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e004      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4a0c      	ldr	r2, [pc, #48]	; (800285c <HAL_RCC_GetSysClockFreq+0xc0>)
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	623b      	str	r3, [r7, #32]
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetSysClockFreq+0xbc>)
 800283a:	623b      	str	r3, [r7, #32]
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6a3b      	ldr	r3, [r7, #32]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc90      	pop	{r4, r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	080063d0 	.word	0x080063d0
 8002850:	080063e0 	.word	0x080063e0
 8002854:	40021000 	.word	0x40021000
 8002858:	007a1200 	.word	0x007a1200
 800285c:	003d0900 	.word	0x003d0900

08002860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_RCC_GetHCLKFreq+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	2000000c 	.word	0x2000000c

08002874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002878:	f7ff fff2 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 800287c:	4601      	mov	r1, r0
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	080063f4 	.word	0x080063f4

0800289c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <RCC_Delay+0x34>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <RCC_Delay+0x38>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b8:	bf00      	nop
  }
  while (Delay --);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	60fa      	str	r2, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f9      	bne.n	80028b8 <RCC_Delay+0x1c>
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000000c 	.word	0x2000000c
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <__errno>:
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <__errno+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000018 	.word	0x20000018

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	2500      	movs	r5, #0
 80028e8:	4e0c      	ldr	r6, [pc, #48]	; (800291c <__libc_init_array+0x38>)
 80028ea:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ec:	1ba4      	subs	r4, r4, r6
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	42a5      	cmp	r5, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	f003 fd5e 	bl	80063b4 <_init>
 80028f8:	2500      	movs	r5, #0
 80028fa:	4e0a      	ldr	r6, [pc, #40]	; (8002924 <__libc_init_array+0x40>)
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <__libc_init_array+0x44>)
 80028fe:	1ba4      	subs	r4, r4, r6
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	42a5      	cmp	r5, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800290c:	4798      	blx	r3
 800290e:	3501      	adds	r5, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002916:	4798      	blx	r3
 8002918:	3501      	adds	r5, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	080066b0 	.word	0x080066b0
 8002920:	080066b0 	.word	0x080066b0
 8002924:	080066b0 	.word	0x080066b0
 8002928:	080066b4 	.word	0x080066b4

0800292c <memset>:
 800292c:	4603      	mov	r3, r0
 800292e:	4402      	add	r2, r0
 8002930:	4293      	cmp	r3, r2
 8002932:	d100      	bne.n	8002936 <memset+0xa>
 8002934:	4770      	bx	lr
 8002936:	f803 1b01 	strb.w	r1, [r3], #1
 800293a:	e7f9      	b.n	8002930 <memset+0x4>

0800293c <__cvt>:
 800293c:	2b00      	cmp	r3, #0
 800293e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002942:	461e      	mov	r6, r3
 8002944:	bfbb      	ittet	lt
 8002946:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800294a:	461e      	movlt	r6, r3
 800294c:	2300      	movge	r3, #0
 800294e:	232d      	movlt	r3, #45	; 0x2d
 8002950:	b088      	sub	sp, #32
 8002952:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002954:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002958:	f027 0720 	bic.w	r7, r7, #32
 800295c:	2f46      	cmp	r7, #70	; 0x46
 800295e:	4614      	mov	r4, r2
 8002960:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002962:	700b      	strb	r3, [r1, #0]
 8002964:	d004      	beq.n	8002970 <__cvt+0x34>
 8002966:	2f45      	cmp	r7, #69	; 0x45
 8002968:	d100      	bne.n	800296c <__cvt+0x30>
 800296a:	3501      	adds	r5, #1
 800296c:	2302      	movs	r3, #2
 800296e:	e000      	b.n	8002972 <__cvt+0x36>
 8002970:	2303      	movs	r3, #3
 8002972:	aa07      	add	r2, sp, #28
 8002974:	9204      	str	r2, [sp, #16]
 8002976:	aa06      	add	r2, sp, #24
 8002978:	e9cd a202 	strd	sl, r2, [sp, #8]
 800297c:	e9cd 3500 	strd	r3, r5, [sp]
 8002980:	4622      	mov	r2, r4
 8002982:	4633      	mov	r3, r6
 8002984:	f001 fd7c 	bl	8004480 <_dtoa_r>
 8002988:	2f47      	cmp	r7, #71	; 0x47
 800298a:	4680      	mov	r8, r0
 800298c:	d102      	bne.n	8002994 <__cvt+0x58>
 800298e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002990:	07db      	lsls	r3, r3, #31
 8002992:	d526      	bpl.n	80029e2 <__cvt+0xa6>
 8002994:	2f46      	cmp	r7, #70	; 0x46
 8002996:	eb08 0905 	add.w	r9, r8, r5
 800299a:	d111      	bne.n	80029c0 <__cvt+0x84>
 800299c:	f898 3000 	ldrb.w	r3, [r8]
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d10a      	bne.n	80029ba <__cvt+0x7e>
 80029a4:	2200      	movs	r2, #0
 80029a6:	2300      	movs	r3, #0
 80029a8:	4620      	mov	r0, r4
 80029aa:	4631      	mov	r1, r6
 80029ac:	f7fd fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80029b0:	b918      	cbnz	r0, 80029ba <__cvt+0x7e>
 80029b2:	f1c5 0501 	rsb	r5, r5, #1
 80029b6:	f8ca 5000 	str.w	r5, [sl]
 80029ba:	f8da 3000 	ldr.w	r3, [sl]
 80029be:	4499      	add	r9, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	4620      	mov	r0, r4
 80029c6:	4631      	mov	r1, r6
 80029c8:	f7fd ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80029cc:	b938      	cbnz	r0, 80029de <__cvt+0xa2>
 80029ce:	2230      	movs	r2, #48	; 0x30
 80029d0:	9b07      	ldr	r3, [sp, #28]
 80029d2:	454b      	cmp	r3, r9
 80029d4:	d205      	bcs.n	80029e2 <__cvt+0xa6>
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	9107      	str	r1, [sp, #28]
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e7f8      	b.n	80029d0 <__cvt+0x94>
 80029de:	f8cd 901c 	str.w	r9, [sp, #28]
 80029e2:	4640      	mov	r0, r8
 80029e4:	9b07      	ldr	r3, [sp, #28]
 80029e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80029e8:	eba3 0308 	sub.w	r3, r3, r8
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	b008      	add	sp, #32
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080029f4 <__exponent>:
 80029f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029f6:	2900      	cmp	r1, #0
 80029f8:	bfb4      	ite	lt
 80029fa:	232d      	movlt	r3, #45	; 0x2d
 80029fc:	232b      	movge	r3, #43	; 0x2b
 80029fe:	4604      	mov	r4, r0
 8002a00:	bfb8      	it	lt
 8002a02:	4249      	neglt	r1, r1
 8002a04:	2909      	cmp	r1, #9
 8002a06:	f804 2b02 	strb.w	r2, [r4], #2
 8002a0a:	7043      	strb	r3, [r0, #1]
 8002a0c:	dd21      	ble.n	8002a52 <__exponent+0x5e>
 8002a0e:	f10d 0307 	add.w	r3, sp, #7
 8002a12:	461f      	mov	r7, r3
 8002a14:	260a      	movs	r6, #10
 8002a16:	fb91 f5f6 	sdiv	r5, r1, r6
 8002a1a:	fb06 1115 	mls	r1, r6, r5, r1
 8002a1e:	2d09      	cmp	r5, #9
 8002a20:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002a24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002a28:	f103 32ff 	add.w	r2, r3, #4294967295
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	dc09      	bgt.n	8002a44 <__exponent+0x50>
 8002a30:	3130      	adds	r1, #48	; 0x30
 8002a32:	3b02      	subs	r3, #2
 8002a34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002a38:	42bb      	cmp	r3, r7
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	d304      	bcc.n	8002a48 <__exponent+0x54>
 8002a3e:	1a10      	subs	r0, r2, r0
 8002a40:	b003      	add	sp, #12
 8002a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a44:	4613      	mov	r3, r2
 8002a46:	e7e6      	b.n	8002a16 <__exponent+0x22>
 8002a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a4c:	f804 2b01 	strb.w	r2, [r4], #1
 8002a50:	e7f2      	b.n	8002a38 <__exponent+0x44>
 8002a52:	2330      	movs	r3, #48	; 0x30
 8002a54:	4419      	add	r1, r3
 8002a56:	7083      	strb	r3, [r0, #2]
 8002a58:	1d02      	adds	r2, r0, #4
 8002a5a:	70c1      	strb	r1, [r0, #3]
 8002a5c:	e7ef      	b.n	8002a3e <__exponent+0x4a>
	...

08002a60 <_printf_float>:
 8002a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	b091      	sub	sp, #68	; 0x44
 8002a66:	460c      	mov	r4, r1
 8002a68:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002a6a:	4693      	mov	fp, r2
 8002a6c:	461e      	mov	r6, r3
 8002a6e:	4605      	mov	r5, r0
 8002a70:	f002 fde8 	bl	8005644 <_localeconv_r>
 8002a74:	6803      	ldr	r3, [r0, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	9309      	str	r3, [sp, #36]	; 0x24
 8002a7a:	f7fd fb69 	bl	8000150 <strlen>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	930e      	str	r3, [sp, #56]	; 0x38
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	900a      	str	r0, [sp, #40]	; 0x28
 8002a86:	3307      	adds	r3, #7
 8002a88:	f023 0307 	bic.w	r3, r3, #7
 8002a8c:	f103 0208 	add.w	r2, r3, #8
 8002a90:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002a94:	f8d4 a000 	ldr.w	sl, [r4]
 8002a98:	603a      	str	r2, [r7, #0]
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002aa2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002aa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	4ba6      	ldr	r3, [pc, #664]	; (8002d4c <_printf_float+0x2ec>)
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ab6:	f7fd ffa9 	bl	8000a0c <__aeabi_dcmpun>
 8002aba:	bb68      	cbnz	r0, 8002b18 <_printf_float+0xb8>
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	4ba2      	ldr	r3, [pc, #648]	; (8002d4c <_printf_float+0x2ec>)
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ac6:	f7fd ff83 	bl	80009d0 <__aeabi_dcmple>
 8002aca:	bb28      	cbnz	r0, 8002b18 <_printf_float+0xb8>
 8002acc:	2200      	movs	r2, #0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	f7fd ff72 	bl	80009bc <__aeabi_dcmplt>
 8002ad8:	b110      	cbz	r0, 8002ae0 <_printf_float+0x80>
 8002ada:	232d      	movs	r3, #45	; 0x2d
 8002adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae0:	4f9b      	ldr	r7, [pc, #620]	; (8002d50 <_printf_float+0x2f0>)
 8002ae2:	4b9c      	ldr	r3, [pc, #624]	; (8002d54 <_printf_float+0x2f4>)
 8002ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ae8:	bf98      	it	ls
 8002aea:	461f      	movls	r7, r3
 8002aec:	2303      	movs	r3, #3
 8002aee:	f04f 0900 	mov.w	r9, #0
 8002af2:	6123      	str	r3, [r4, #16]
 8002af4:	f02a 0304 	bic.w	r3, sl, #4
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	9600      	str	r6, [sp, #0]
 8002afc:	465b      	mov	r3, fp
 8002afe:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b00:	4621      	mov	r1, r4
 8002b02:	4628      	mov	r0, r5
 8002b04:	f000 f9e2 	bl	8002ecc <_printf_common>
 8002b08:	3001      	adds	r0, #1
 8002b0a:	f040 8090 	bne.w	8002c2e <_printf_float+0x1ce>
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	b011      	add	sp, #68	; 0x44
 8002b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b18:	463a      	mov	r2, r7
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	4649      	mov	r1, r9
 8002b20:	f7fd ff74 	bl	8000a0c <__aeabi_dcmpun>
 8002b24:	b110      	cbz	r0, 8002b2c <_printf_float+0xcc>
 8002b26:	4f8c      	ldr	r7, [pc, #560]	; (8002d58 <_printf_float+0x2f8>)
 8002b28:	4b8c      	ldr	r3, [pc, #560]	; (8002d5c <_printf_float+0x2fc>)
 8002b2a:	e7db      	b.n	8002ae4 <_printf_float+0x84>
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002b32:	1c59      	adds	r1, r3, #1
 8002b34:	a80d      	add	r0, sp, #52	; 0x34
 8002b36:	a90e      	add	r1, sp, #56	; 0x38
 8002b38:	d140      	bne.n	8002bbc <_printf_float+0x15c>
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	6063      	str	r3, [r4, #4]
 8002b3e:	f04f 0c00 	mov.w	ip, #0
 8002b42:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002b46:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002b4a:	6863      	ldr	r3, [r4, #4]
 8002b4c:	6022      	str	r2, [r4, #0]
 8002b4e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	463a      	mov	r2, r7
 8002b56:	464b      	mov	r3, r9
 8002b58:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7ff feed 	bl	800293c <__cvt>
 8002b62:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002b66:	2b47      	cmp	r3, #71	; 0x47
 8002b68:	4607      	mov	r7, r0
 8002b6a:	d109      	bne.n	8002b80 <_printf_float+0x120>
 8002b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b6e:	1cd8      	adds	r0, r3, #3
 8002b70:	db02      	blt.n	8002b78 <_printf_float+0x118>
 8002b72:	6862      	ldr	r2, [r4, #4]
 8002b74:	4293      	cmp	r3, r2
 8002b76:	dd47      	ble.n	8002c08 <_printf_float+0x1a8>
 8002b78:	f1a8 0802 	sub.w	r8, r8, #2
 8002b7c:	fa5f f888 	uxtb.w	r8, r8
 8002b80:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002b84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b86:	d824      	bhi.n	8002bd2 <_printf_float+0x172>
 8002b88:	3901      	subs	r1, #1
 8002b8a:	4642      	mov	r2, r8
 8002b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b90:	910d      	str	r1, [sp, #52]	; 0x34
 8002b92:	f7ff ff2f 	bl	80029f4 <__exponent>
 8002b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b98:	4681      	mov	r9, r0
 8002b9a:	1813      	adds	r3, r2, r0
 8002b9c:	2a01      	cmp	r2, #1
 8002b9e:	6123      	str	r3, [r4, #16]
 8002ba0:	dc02      	bgt.n	8002ba8 <_printf_float+0x148>
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	07d1      	lsls	r1, r2, #31
 8002ba6:	d501      	bpl.n	8002bac <_printf_float+0x14c>
 8002ba8:	3301      	adds	r3, #1
 8002baa:	6123      	str	r3, [r4, #16]
 8002bac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0a2      	beq.n	8002afa <_printf_float+0x9a>
 8002bb4:	232d      	movs	r3, #45	; 0x2d
 8002bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bba:	e79e      	b.n	8002afa <_printf_float+0x9a>
 8002bbc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002bc0:	f000 816e 	beq.w	8002ea0 <_printf_float+0x440>
 8002bc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bc8:	d1b9      	bne.n	8002b3e <_printf_float+0xde>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1b7      	bne.n	8002b3e <_printf_float+0xde>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e7b4      	b.n	8002b3c <_printf_float+0xdc>
 8002bd2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002bd6:	d119      	bne.n	8002c0c <_printf_float+0x1ac>
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	dd0c      	ble.n	8002bf8 <_printf_float+0x198>
 8002bde:	6121      	str	r1, [r4, #16]
 8002be0:	b913      	cbnz	r3, 8002be8 <_printf_float+0x188>
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	07d2      	lsls	r2, r2, #31
 8002be6:	d502      	bpl.n	8002bee <_printf_float+0x18e>
 8002be8:	3301      	adds	r3, #1
 8002bea:	440b      	add	r3, r1
 8002bec:	6123      	str	r3, [r4, #16]
 8002bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bf0:	f04f 0900 	mov.w	r9, #0
 8002bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bf6:	e7d9      	b.n	8002bac <_printf_float+0x14c>
 8002bf8:	b913      	cbnz	r3, 8002c00 <_printf_float+0x1a0>
 8002bfa:	6822      	ldr	r2, [r4, #0]
 8002bfc:	07d0      	lsls	r0, r2, #31
 8002bfe:	d501      	bpl.n	8002c04 <_printf_float+0x1a4>
 8002c00:	3302      	adds	r3, #2
 8002c02:	e7f3      	b.n	8002bec <_printf_float+0x18c>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e7f1      	b.n	8002bec <_printf_float+0x18c>
 8002c08:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002c0c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002c10:	4293      	cmp	r3, r2
 8002c12:	db05      	blt.n	8002c20 <_printf_float+0x1c0>
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	6123      	str	r3, [r4, #16]
 8002c18:	07d1      	lsls	r1, r2, #31
 8002c1a:	d5e8      	bpl.n	8002bee <_printf_float+0x18e>
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	e7e5      	b.n	8002bec <_printf_float+0x18c>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bfcc      	ite	gt
 8002c24:	2301      	movgt	r3, #1
 8002c26:	f1c3 0302 	rsble	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	e7de      	b.n	8002bec <_printf_float+0x18c>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	055a      	lsls	r2, r3, #21
 8002c32:	d407      	bmi.n	8002c44 <_printf_float+0x1e4>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	463a      	mov	r2, r7
 8002c38:	4659      	mov	r1, fp
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	47b0      	blx	r6
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d129      	bne.n	8002c96 <_printf_float+0x236>
 8002c42:	e764      	b.n	8002b0e <_printf_float+0xae>
 8002c44:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002c48:	f240 80d7 	bls.w	8002dfa <_printf_float+0x39a>
 8002c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c50:	2200      	movs	r2, #0
 8002c52:	2300      	movs	r3, #0
 8002c54:	f7fd fea8 	bl	80009a8 <__aeabi_dcmpeq>
 8002c58:	b388      	cbz	r0, 8002cbe <_printf_float+0x25e>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4a40      	ldr	r2, [pc, #256]	; (8002d60 <_printf_float+0x300>)
 8002c5e:	4659      	mov	r1, fp
 8002c60:	4628      	mov	r0, r5
 8002c62:	47b0      	blx	r6
 8002c64:	3001      	adds	r0, #1
 8002c66:	f43f af52 	beq.w	8002b0e <_printf_float+0xae>
 8002c6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	db02      	blt.n	8002c78 <_printf_float+0x218>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	07d8      	lsls	r0, r3, #31
 8002c76:	d50e      	bpl.n	8002c96 <_printf_float+0x236>
 8002c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	4628      	mov	r0, r5
 8002c80:	47b0      	blx	r6
 8002c82:	3001      	adds	r0, #1
 8002c84:	f43f af43 	beq.w	8002b0e <_printf_float+0xae>
 8002c88:	2700      	movs	r7, #0
 8002c8a:	f104 081a 	add.w	r8, r4, #26
 8002c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c90:	3b01      	subs	r3, #1
 8002c92:	42bb      	cmp	r3, r7
 8002c94:	dc09      	bgt.n	8002caa <_printf_float+0x24a>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	079f      	lsls	r7, r3, #30
 8002c9a:	f100 80fd 	bmi.w	8002e98 <_printf_float+0x438>
 8002c9e:	68e0      	ldr	r0, [r4, #12]
 8002ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ca2:	4298      	cmp	r0, r3
 8002ca4:	bfb8      	it	lt
 8002ca6:	4618      	movlt	r0, r3
 8002ca8:	e733      	b.n	8002b12 <_printf_float+0xb2>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4642      	mov	r2, r8
 8002cae:	4659      	mov	r1, fp
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	47b0      	blx	r6
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	f43f af2a 	beq.w	8002b0e <_printf_float+0xae>
 8002cba:	3701      	adds	r7, #1
 8002cbc:	e7e7      	b.n	8002c8e <_printf_float+0x22e>
 8002cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dc2b      	bgt.n	8002d1c <_printf_float+0x2bc>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <_printf_float+0x300>)
 8002cc8:	4659      	mov	r1, fp
 8002cca:	4628      	mov	r0, r5
 8002ccc:	47b0      	blx	r6
 8002cce:	3001      	adds	r0, #1
 8002cd0:	f43f af1d 	beq.w	8002b0e <_printf_float+0xae>
 8002cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cd6:	b923      	cbnz	r3, 8002ce2 <_printf_float+0x282>
 8002cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cda:	b913      	cbnz	r3, 8002ce2 <_printf_float+0x282>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	07d9      	lsls	r1, r3, #31
 8002ce0:	d5d9      	bpl.n	8002c96 <_printf_float+0x236>
 8002ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	3001      	adds	r0, #1
 8002cee:	f43f af0e 	beq.w	8002b0e <_printf_float+0xae>
 8002cf2:	f04f 0800 	mov.w	r8, #0
 8002cf6:	f104 091a 	add.w	r9, r4, #26
 8002cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	4543      	cmp	r3, r8
 8002d00:	dc01      	bgt.n	8002d06 <_printf_float+0x2a6>
 8002d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d04:	e797      	b.n	8002c36 <_printf_float+0x1d6>
 8002d06:	2301      	movs	r3, #1
 8002d08:	464a      	mov	r2, r9
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	47b0      	blx	r6
 8002d10:	3001      	adds	r0, #1
 8002d12:	f43f aefc 	beq.w	8002b0e <_printf_float+0xae>
 8002d16:	f108 0801 	add.w	r8, r8, #1
 8002d1a:	e7ee      	b.n	8002cfa <_printf_float+0x29a>
 8002d1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d20:	429a      	cmp	r2, r3
 8002d22:	bfa8      	it	ge
 8002d24:	461a      	movge	r2, r3
 8002d26:	2a00      	cmp	r2, #0
 8002d28:	4690      	mov	r8, r2
 8002d2a:	dd07      	ble.n	8002d3c <_printf_float+0x2dc>
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	4659      	mov	r1, fp
 8002d30:	463a      	mov	r2, r7
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b0      	blx	r6
 8002d36:	3001      	adds	r0, #1
 8002d38:	f43f aee9 	beq.w	8002b0e <_printf_float+0xae>
 8002d3c:	f104 031a 	add.w	r3, r4, #26
 8002d40:	f04f 0a00 	mov.w	sl, #0
 8002d44:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002d48:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d4a:	e015      	b.n	8002d78 <_printf_float+0x318>
 8002d4c:	7fefffff 	.word	0x7fefffff
 8002d50:	08006400 	.word	0x08006400
 8002d54:	080063fc 	.word	0x080063fc
 8002d58:	08006408 	.word	0x08006408
 8002d5c:	08006404 	.word	0x08006404
 8002d60:	0800640c 	.word	0x0800640c
 8002d64:	2301      	movs	r3, #1
 8002d66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d68:	4659      	mov	r1, fp
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b0      	blx	r6
 8002d6e:	3001      	adds	r0, #1
 8002d70:	f43f aecd 	beq.w	8002b0e <_printf_float+0xae>
 8002d74:	f10a 0a01 	add.w	sl, sl, #1
 8002d78:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002d7c:	eba9 0308 	sub.w	r3, r9, r8
 8002d80:	4553      	cmp	r3, sl
 8002d82:	dcef      	bgt.n	8002d64 <_printf_float+0x304>
 8002d84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	444f      	add	r7, r9
 8002d8c:	db14      	blt.n	8002db8 <_printf_float+0x358>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	07da      	lsls	r2, r3, #31
 8002d92:	d411      	bmi.n	8002db8 <_printf_float+0x358>
 8002d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d98:	eba3 0209 	sub.w	r2, r3, r9
 8002d9c:	eba3 0901 	sub.w	r9, r3, r1
 8002da0:	4591      	cmp	r9, r2
 8002da2:	bfa8      	it	ge
 8002da4:	4691      	movge	r9, r2
 8002da6:	f1b9 0f00 	cmp.w	r9, #0
 8002daa:	dc0d      	bgt.n	8002dc8 <_printf_float+0x368>
 8002dac:	2700      	movs	r7, #0
 8002dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002db2:	f104 081a 	add.w	r8, r4, #26
 8002db6:	e018      	b.n	8002dea <_printf_float+0x38a>
 8002db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b0      	blx	r6
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d1e6      	bne.n	8002d94 <_printf_float+0x334>
 8002dc6:	e6a2      	b.n	8002b0e <_printf_float+0xae>
 8002dc8:	464b      	mov	r3, r9
 8002dca:	463a      	mov	r2, r7
 8002dcc:	4659      	mov	r1, fp
 8002dce:	4628      	mov	r0, r5
 8002dd0:	47b0      	blx	r6
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d1ea      	bne.n	8002dac <_printf_float+0x34c>
 8002dd6:	e69a      	b.n	8002b0e <_printf_float+0xae>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4642      	mov	r2, r8
 8002ddc:	4659      	mov	r1, fp
 8002dde:	4628      	mov	r0, r5
 8002de0:	47b0      	blx	r6
 8002de2:	3001      	adds	r0, #1
 8002de4:	f43f ae93 	beq.w	8002b0e <_printf_float+0xae>
 8002de8:	3701      	adds	r7, #1
 8002dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	eba3 0309 	sub.w	r3, r3, r9
 8002df4:	42bb      	cmp	r3, r7
 8002df6:	dcef      	bgt.n	8002dd8 <_printf_float+0x378>
 8002df8:	e74d      	b.n	8002c96 <_printf_float+0x236>
 8002dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	dc01      	bgt.n	8002e04 <_printf_float+0x3a4>
 8002e00:	07db      	lsls	r3, r3, #31
 8002e02:	d538      	bpl.n	8002e76 <_printf_float+0x416>
 8002e04:	2301      	movs	r3, #1
 8002e06:	463a      	mov	r2, r7
 8002e08:	4659      	mov	r1, fp
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	47b0      	blx	r6
 8002e0e:	3001      	adds	r0, #1
 8002e10:	f43f ae7d 	beq.w	8002b0e <_printf_float+0xae>
 8002e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e18:	4659      	mov	r1, fp
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	47b0      	blx	r6
 8002e1e:	3001      	adds	r0, #1
 8002e20:	f107 0701 	add.w	r7, r7, #1
 8002e24:	f43f ae73 	beq.w	8002b0e <_printf_float+0xae>
 8002e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f103 38ff 	add.w	r8, r3, #4294967295
 8002e34:	2300      	movs	r3, #0
 8002e36:	f7fd fdb7 	bl	80009a8 <__aeabi_dcmpeq>
 8002e3a:	b9c0      	cbnz	r0, 8002e6e <_printf_float+0x40e>
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	463a      	mov	r2, r7
 8002e40:	4659      	mov	r1, fp
 8002e42:	4628      	mov	r0, r5
 8002e44:	47b0      	blx	r6
 8002e46:	3001      	adds	r0, #1
 8002e48:	d10d      	bne.n	8002e66 <_printf_float+0x406>
 8002e4a:	e660      	b.n	8002b0e <_printf_float+0xae>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4642      	mov	r2, r8
 8002e50:	4659      	mov	r1, fp
 8002e52:	4628      	mov	r0, r5
 8002e54:	47b0      	blx	r6
 8002e56:	3001      	adds	r0, #1
 8002e58:	f43f ae59 	beq.w	8002b0e <_printf_float+0xae>
 8002e5c:	3701      	adds	r7, #1
 8002e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e60:	3b01      	subs	r3, #1
 8002e62:	42bb      	cmp	r3, r7
 8002e64:	dcf2      	bgt.n	8002e4c <_printf_float+0x3ec>
 8002e66:	464b      	mov	r3, r9
 8002e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e6c:	e6e4      	b.n	8002c38 <_printf_float+0x1d8>
 8002e6e:	2700      	movs	r7, #0
 8002e70:	f104 081a 	add.w	r8, r4, #26
 8002e74:	e7f3      	b.n	8002e5e <_printf_float+0x3fe>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e7e1      	b.n	8002e3e <_printf_float+0x3de>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	4659      	mov	r1, fp
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b0      	blx	r6
 8002e84:	3001      	adds	r0, #1
 8002e86:	f43f ae42 	beq.w	8002b0e <_printf_float+0xae>
 8002e8a:	3701      	adds	r7, #1
 8002e8c:	68e3      	ldr	r3, [r4, #12]
 8002e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	42bb      	cmp	r3, r7
 8002e94:	dcf1      	bgt.n	8002e7a <_printf_float+0x41a>
 8002e96:	e702      	b.n	8002c9e <_printf_float+0x23e>
 8002e98:	2700      	movs	r7, #0
 8002e9a:	f104 0819 	add.w	r8, r4, #25
 8002e9e:	e7f5      	b.n	8002e8c <_printf_float+0x42c>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f43f ae94 	beq.w	8002bce <_printf_float+0x16e>
 8002ea6:	f04f 0c00 	mov.w	ip, #0
 8002eaa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002eae:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002eb2:	6022      	str	r2, [r4, #0]
 8002eb4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002eb8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	463a      	mov	r2, r7
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7ff fd3a 	bl	800293c <__cvt>
 8002ec8:	4607      	mov	r7, r0
 8002eca:	e64f      	b.n	8002b6c <_printf_float+0x10c>

08002ecc <_printf_common>:
 8002ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed0:	4691      	mov	r9, r2
 8002ed2:	461f      	mov	r7, r3
 8002ed4:	688a      	ldr	r2, [r1, #8]
 8002ed6:	690b      	ldr	r3, [r1, #16]
 8002ed8:	4606      	mov	r6, r0
 8002eda:	4293      	cmp	r3, r2
 8002edc:	bfb8      	it	lt
 8002ede:	4613      	movlt	r3, r2
 8002ee0:	f8c9 3000 	str.w	r3, [r9]
 8002ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ee8:	460c      	mov	r4, r1
 8002eea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eee:	b112      	cbz	r2, 8002ef6 <_printf_common+0x2a>
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f8c9 3000 	str.w	r3, [r9]
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	0699      	lsls	r1, r3, #26
 8002efa:	bf42      	ittt	mi
 8002efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f00:	3302      	addmi	r3, #2
 8002f02:	f8c9 3000 	strmi.w	r3, [r9]
 8002f06:	6825      	ldr	r5, [r4, #0]
 8002f08:	f015 0506 	ands.w	r5, r5, #6
 8002f0c:	d107      	bne.n	8002f1e <_printf_common+0x52>
 8002f0e:	f104 0a19 	add.w	sl, r4, #25
 8002f12:	68e3      	ldr	r3, [r4, #12]
 8002f14:	f8d9 2000 	ldr.w	r2, [r9]
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	42ab      	cmp	r3, r5
 8002f1c:	dc29      	bgt.n	8002f72 <_printf_common+0xa6>
 8002f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	3300      	adds	r3, #0
 8002f26:	bf18      	it	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	0692      	lsls	r2, r2, #26
 8002f2c:	d42e      	bmi.n	8002f8c <_printf_common+0xc0>
 8002f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f32:	4639      	mov	r1, r7
 8002f34:	4630      	mov	r0, r6
 8002f36:	47c0      	blx	r8
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d021      	beq.n	8002f80 <_printf_common+0xb4>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	68e5      	ldr	r5, [r4, #12]
 8002f40:	f003 0306 	and.w	r3, r3, #6
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	bf18      	it	ne
 8002f48:	2500      	movne	r5, #0
 8002f4a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f4e:	f04f 0900 	mov.w	r9, #0
 8002f52:	bf08      	it	eq
 8002f54:	1aad      	subeq	r5, r5, r2
 8002f56:	68a3      	ldr	r3, [r4, #8]
 8002f58:	6922      	ldr	r2, [r4, #16]
 8002f5a:	bf08      	it	eq
 8002f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bfc4      	itt	gt
 8002f64:	1a9b      	subgt	r3, r3, r2
 8002f66:	18ed      	addgt	r5, r5, r3
 8002f68:	341a      	adds	r4, #26
 8002f6a:	454d      	cmp	r5, r9
 8002f6c:	d11a      	bne.n	8002fa4 <_printf_common+0xd8>
 8002f6e:	2000      	movs	r0, #0
 8002f70:	e008      	b.n	8002f84 <_printf_common+0xb8>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4652      	mov	r2, sl
 8002f76:	4639      	mov	r1, r7
 8002f78:	4630      	mov	r0, r6
 8002f7a:	47c0      	blx	r8
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d103      	bne.n	8002f88 <_printf_common+0xbc>
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f88:	3501      	adds	r5, #1
 8002f8a:	e7c2      	b.n	8002f12 <_printf_common+0x46>
 8002f8c:	2030      	movs	r0, #48	; 0x30
 8002f8e:	18e1      	adds	r1, r4, r3
 8002f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f9a:	4422      	add	r2, r4
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fa2:	e7c4      	b.n	8002f2e <_printf_common+0x62>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	4639      	mov	r1, r7
 8002faa:	4630      	mov	r0, r6
 8002fac:	47c0      	blx	r8
 8002fae:	3001      	adds	r0, #1
 8002fb0:	d0e6      	beq.n	8002f80 <_printf_common+0xb4>
 8002fb2:	f109 0901 	add.w	r9, r9, #1
 8002fb6:	e7d8      	b.n	8002f6a <_printf_common+0x9e>

08002fb8 <_printf_i>:
 8002fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	7e09      	ldrb	r1, [r1, #24]
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	296e      	cmp	r1, #110	; 0x6e
 8002fc8:	4617      	mov	r7, r2
 8002fca:	4606      	mov	r6, r0
 8002fcc:	4698      	mov	r8, r3
 8002fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fd0:	f000 80b3 	beq.w	800313a <_printf_i+0x182>
 8002fd4:	d822      	bhi.n	800301c <_printf_i+0x64>
 8002fd6:	2963      	cmp	r1, #99	; 0x63
 8002fd8:	d036      	beq.n	8003048 <_printf_i+0x90>
 8002fda:	d80a      	bhi.n	8002ff2 <_printf_i+0x3a>
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	f000 80b9 	beq.w	8003154 <_printf_i+0x19c>
 8002fe2:	2958      	cmp	r1, #88	; 0x58
 8002fe4:	f000 8083 	beq.w	80030ee <_printf_i+0x136>
 8002fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ff0:	e032      	b.n	8003058 <_printf_i+0xa0>
 8002ff2:	2964      	cmp	r1, #100	; 0x64
 8002ff4:	d001      	beq.n	8002ffa <_printf_i+0x42>
 8002ff6:	2969      	cmp	r1, #105	; 0x69
 8002ff8:	d1f6      	bne.n	8002fe8 <_printf_i+0x30>
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	6813      	ldr	r3, [r2, #0]
 8002ffe:	0605      	lsls	r5, r0, #24
 8003000:	f103 0104 	add.w	r1, r3, #4
 8003004:	d52a      	bpl.n	800305c <_printf_i+0xa4>
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6011      	str	r1, [r2, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da03      	bge.n	8003016 <_printf_i+0x5e>
 800300e:	222d      	movs	r2, #45	; 0x2d
 8003010:	425b      	negs	r3, r3
 8003012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003016:	486f      	ldr	r0, [pc, #444]	; (80031d4 <_printf_i+0x21c>)
 8003018:	220a      	movs	r2, #10
 800301a:	e039      	b.n	8003090 <_printf_i+0xd8>
 800301c:	2973      	cmp	r1, #115	; 0x73
 800301e:	f000 809d 	beq.w	800315c <_printf_i+0x1a4>
 8003022:	d808      	bhi.n	8003036 <_printf_i+0x7e>
 8003024:	296f      	cmp	r1, #111	; 0x6f
 8003026:	d020      	beq.n	800306a <_printf_i+0xb2>
 8003028:	2970      	cmp	r1, #112	; 0x70
 800302a:	d1dd      	bne.n	8002fe8 <_printf_i+0x30>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f043 0320 	orr.w	r3, r3, #32
 8003032:	6023      	str	r3, [r4, #0]
 8003034:	e003      	b.n	800303e <_printf_i+0x86>
 8003036:	2975      	cmp	r1, #117	; 0x75
 8003038:	d017      	beq.n	800306a <_printf_i+0xb2>
 800303a:	2978      	cmp	r1, #120	; 0x78
 800303c:	d1d4      	bne.n	8002fe8 <_printf_i+0x30>
 800303e:	2378      	movs	r3, #120	; 0x78
 8003040:	4865      	ldr	r0, [pc, #404]	; (80031d8 <_printf_i+0x220>)
 8003042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003046:	e055      	b.n	80030f4 <_printf_i+0x13c>
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800304e:	1d19      	adds	r1, r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003058:	2301      	movs	r3, #1
 800305a:	e08c      	b.n	8003176 <_printf_i+0x1be>
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003062:	6011      	str	r1, [r2, #0]
 8003064:	bf18      	it	ne
 8003066:	b21b      	sxthne	r3, r3
 8003068:	e7cf      	b.n	800300a <_printf_i+0x52>
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	6825      	ldr	r5, [r4, #0]
 800306e:	1d18      	adds	r0, r3, #4
 8003070:	6010      	str	r0, [r2, #0]
 8003072:	0628      	lsls	r0, r5, #24
 8003074:	d501      	bpl.n	800307a <_printf_i+0xc2>
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e002      	b.n	8003080 <_printf_i+0xc8>
 800307a:	0668      	lsls	r0, r5, #25
 800307c:	d5fb      	bpl.n	8003076 <_printf_i+0xbe>
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	296f      	cmp	r1, #111	; 0x6f
 8003082:	bf14      	ite	ne
 8003084:	220a      	movne	r2, #10
 8003086:	2208      	moveq	r2, #8
 8003088:	4852      	ldr	r0, [pc, #328]	; (80031d4 <_printf_i+0x21c>)
 800308a:	2100      	movs	r1, #0
 800308c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003090:	6865      	ldr	r5, [r4, #4]
 8003092:	2d00      	cmp	r5, #0
 8003094:	60a5      	str	r5, [r4, #8]
 8003096:	f2c0 8095 	blt.w	80031c4 <_printf_i+0x20c>
 800309a:	6821      	ldr	r1, [r4, #0]
 800309c:	f021 0104 	bic.w	r1, r1, #4
 80030a0:	6021      	str	r1, [r4, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13d      	bne.n	8003122 <_printf_i+0x16a>
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	f040 808e 	bne.w	80031c8 <_printf_i+0x210>
 80030ac:	4665      	mov	r5, ip
 80030ae:	2a08      	cmp	r2, #8
 80030b0:	d10b      	bne.n	80030ca <_printf_i+0x112>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	07db      	lsls	r3, r3, #31
 80030b6:	d508      	bpl.n	80030ca <_printf_i+0x112>
 80030b8:	6923      	ldr	r3, [r4, #16]
 80030ba:	6862      	ldr	r2, [r4, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	bfde      	ittt	le
 80030c0:	2330      	movle	r3, #48	; 0x30
 80030c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030ca:	ebac 0305 	sub.w	r3, ip, r5
 80030ce:	6123      	str	r3, [r4, #16]
 80030d0:	f8cd 8000 	str.w	r8, [sp]
 80030d4:	463b      	mov	r3, r7
 80030d6:	aa03      	add	r2, sp, #12
 80030d8:	4621      	mov	r1, r4
 80030da:	4630      	mov	r0, r6
 80030dc:	f7ff fef6 	bl	8002ecc <_printf_common>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d14d      	bne.n	8003180 <_printf_i+0x1c8>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	b005      	add	sp, #20
 80030ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030ee:	4839      	ldr	r0, [pc, #228]	; (80031d4 <_printf_i+0x21c>)
 80030f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	6821      	ldr	r1, [r4, #0]
 80030f8:	1d1d      	adds	r5, r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6015      	str	r5, [r2, #0]
 80030fe:	060a      	lsls	r2, r1, #24
 8003100:	d50b      	bpl.n	800311a <_printf_i+0x162>
 8003102:	07ca      	lsls	r2, r1, #31
 8003104:	bf44      	itt	mi
 8003106:	f041 0120 	orrmi.w	r1, r1, #32
 800310a:	6021      	strmi	r1, [r4, #0]
 800310c:	b91b      	cbnz	r3, 8003116 <_printf_i+0x15e>
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	f022 0220 	bic.w	r2, r2, #32
 8003114:	6022      	str	r2, [r4, #0]
 8003116:	2210      	movs	r2, #16
 8003118:	e7b7      	b.n	800308a <_printf_i+0xd2>
 800311a:	064d      	lsls	r5, r1, #25
 800311c:	bf48      	it	mi
 800311e:	b29b      	uxthmi	r3, r3
 8003120:	e7ef      	b.n	8003102 <_printf_i+0x14a>
 8003122:	4665      	mov	r5, ip
 8003124:	fbb3 f1f2 	udiv	r1, r3, r2
 8003128:	fb02 3311 	mls	r3, r2, r1, r3
 800312c:	5cc3      	ldrb	r3, [r0, r3]
 800312e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003132:	460b      	mov	r3, r1
 8003134:	2900      	cmp	r1, #0
 8003136:	d1f5      	bne.n	8003124 <_printf_i+0x16c>
 8003138:	e7b9      	b.n	80030ae <_printf_i+0xf6>
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	6825      	ldr	r5, [r4, #0]
 800313e:	1d18      	adds	r0, r3, #4
 8003140:	6961      	ldr	r1, [r4, #20]
 8003142:	6010      	str	r0, [r2, #0]
 8003144:	0628      	lsls	r0, r5, #24
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	d501      	bpl.n	800314e <_printf_i+0x196>
 800314a:	6019      	str	r1, [r3, #0]
 800314c:	e002      	b.n	8003154 <_printf_i+0x19c>
 800314e:	066a      	lsls	r2, r5, #25
 8003150:	d5fb      	bpl.n	800314a <_printf_i+0x192>
 8003152:	8019      	strh	r1, [r3, #0]
 8003154:	2300      	movs	r3, #0
 8003156:	4665      	mov	r5, ip
 8003158:	6123      	str	r3, [r4, #16]
 800315a:	e7b9      	b.n	80030d0 <_printf_i+0x118>
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	1d19      	adds	r1, r3, #4
 8003160:	6011      	str	r1, [r2, #0]
 8003162:	681d      	ldr	r5, [r3, #0]
 8003164:	6862      	ldr	r2, [r4, #4]
 8003166:	2100      	movs	r1, #0
 8003168:	4628      	mov	r0, r5
 800316a:	f002 fa93 	bl	8005694 <memchr>
 800316e:	b108      	cbz	r0, 8003174 <_printf_i+0x1bc>
 8003170:	1b40      	subs	r0, r0, r5
 8003172:	6060      	str	r0, [r4, #4]
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	6123      	str	r3, [r4, #16]
 8003178:	2300      	movs	r3, #0
 800317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800317e:	e7a7      	b.n	80030d0 <_printf_i+0x118>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	462a      	mov	r2, r5
 8003184:	4639      	mov	r1, r7
 8003186:	4630      	mov	r0, r6
 8003188:	47c0      	blx	r8
 800318a:	3001      	adds	r0, #1
 800318c:	d0aa      	beq.n	80030e4 <_printf_i+0x12c>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	079b      	lsls	r3, r3, #30
 8003192:	d413      	bmi.n	80031bc <_printf_i+0x204>
 8003194:	68e0      	ldr	r0, [r4, #12]
 8003196:	9b03      	ldr	r3, [sp, #12]
 8003198:	4298      	cmp	r0, r3
 800319a:	bfb8      	it	lt
 800319c:	4618      	movlt	r0, r3
 800319e:	e7a3      	b.n	80030e8 <_printf_i+0x130>
 80031a0:	2301      	movs	r3, #1
 80031a2:	464a      	mov	r2, r9
 80031a4:	4639      	mov	r1, r7
 80031a6:	4630      	mov	r0, r6
 80031a8:	47c0      	blx	r8
 80031aa:	3001      	adds	r0, #1
 80031ac:	d09a      	beq.n	80030e4 <_printf_i+0x12c>
 80031ae:	3501      	adds	r5, #1
 80031b0:	68e3      	ldr	r3, [r4, #12]
 80031b2:	9a03      	ldr	r2, [sp, #12]
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	42ab      	cmp	r3, r5
 80031b8:	dcf2      	bgt.n	80031a0 <_printf_i+0x1e8>
 80031ba:	e7eb      	b.n	8003194 <_printf_i+0x1dc>
 80031bc:	2500      	movs	r5, #0
 80031be:	f104 0919 	add.w	r9, r4, #25
 80031c2:	e7f5      	b.n	80031b0 <_printf_i+0x1f8>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ac      	bne.n	8003122 <_printf_i+0x16a>
 80031c8:	7803      	ldrb	r3, [r0, #0]
 80031ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031d2:	e76c      	b.n	80030ae <_printf_i+0xf6>
 80031d4:	0800640e 	.word	0x0800640e
 80031d8:	0800641f 	.word	0x0800641f

080031dc <_scanf_float>:
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	469a      	mov	sl, r3
 80031e2:	688b      	ldr	r3, [r1, #8]
 80031e4:	4616      	mov	r6, r2
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80031ec:	bf88      	it	hi
 80031ee:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80031f2:	b087      	sub	sp, #28
 80031f4:	bf85      	ittet	hi
 80031f6:	189b      	addhi	r3, r3, r2
 80031f8:	9301      	strhi	r3, [sp, #4]
 80031fa:	2300      	movls	r3, #0
 80031fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003200:	4688      	mov	r8, r1
 8003202:	f04f 0b00 	mov.w	fp, #0
 8003206:	bf8c      	ite	hi
 8003208:	608b      	strhi	r3, [r1, #8]
 800320a:	9301      	strls	r3, [sp, #4]
 800320c:	680b      	ldr	r3, [r1, #0]
 800320e:	4607      	mov	r7, r0
 8003210:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003214:	f848 3b1c 	str.w	r3, [r8], #28
 8003218:	460c      	mov	r4, r1
 800321a:	4645      	mov	r5, r8
 800321c:	465a      	mov	r2, fp
 800321e:	46d9      	mov	r9, fp
 8003220:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003224:	f8cd b008 	str.w	fp, [sp, #8]
 8003228:	68a1      	ldr	r1, [r4, #8]
 800322a:	b181      	cbz	r1, 800324e <_scanf_float+0x72>
 800322c:	6833      	ldr	r3, [r6, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b49      	cmp	r3, #73	; 0x49
 8003232:	d071      	beq.n	8003318 <_scanf_float+0x13c>
 8003234:	d84d      	bhi.n	80032d2 <_scanf_float+0xf6>
 8003236:	2b39      	cmp	r3, #57	; 0x39
 8003238:	d840      	bhi.n	80032bc <_scanf_float+0xe0>
 800323a:	2b31      	cmp	r3, #49	; 0x31
 800323c:	f080 8088 	bcs.w	8003350 <_scanf_float+0x174>
 8003240:	2b2d      	cmp	r3, #45	; 0x2d
 8003242:	f000 8090 	beq.w	8003366 <_scanf_float+0x18a>
 8003246:	d815      	bhi.n	8003274 <_scanf_float+0x98>
 8003248:	2b2b      	cmp	r3, #43	; 0x2b
 800324a:	f000 808c 	beq.w	8003366 <_scanf_float+0x18a>
 800324e:	f1b9 0f00 	cmp.w	r9, #0
 8003252:	d003      	beq.n	800325c <_scanf_float+0x80>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	3a01      	subs	r2, #1
 800325e:	2a01      	cmp	r2, #1
 8003260:	f200 80ea 	bhi.w	8003438 <_scanf_float+0x25c>
 8003264:	4545      	cmp	r5, r8
 8003266:	f200 80dc 	bhi.w	8003422 <_scanf_float+0x246>
 800326a:	2601      	movs	r6, #1
 800326c:	4630      	mov	r0, r6
 800326e:	b007      	add	sp, #28
 8003270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003274:	2b2e      	cmp	r3, #46	; 0x2e
 8003276:	f000 809f 	beq.w	80033b8 <_scanf_float+0x1dc>
 800327a:	2b30      	cmp	r3, #48	; 0x30
 800327c:	d1e7      	bne.n	800324e <_scanf_float+0x72>
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003284:	d064      	beq.n	8003350 <_scanf_float+0x174>
 8003286:	9b01      	ldr	r3, [sp, #4]
 8003288:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800328c:	6020      	str	r0, [r4, #0]
 800328e:	f109 0901 	add.w	r9, r9, #1
 8003292:	b11b      	cbz	r3, 800329c <_scanf_float+0xc0>
 8003294:	3b01      	subs	r3, #1
 8003296:	3101      	adds	r1, #1
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	60a1      	str	r1, [r4, #8]
 800329c:	68a3      	ldr	r3, [r4, #8]
 800329e:	3b01      	subs	r3, #1
 80032a0:	60a3      	str	r3, [r4, #8]
 80032a2:	6923      	ldr	r3, [r4, #16]
 80032a4:	3301      	adds	r3, #1
 80032a6:	6123      	str	r3, [r4, #16]
 80032a8:	6873      	ldr	r3, [r6, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	6073      	str	r3, [r6, #4]
 80032b0:	f340 80ac 	ble.w	800340c <_scanf_float+0x230>
 80032b4:	6833      	ldr	r3, [r6, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	e7b5      	b.n	8003228 <_scanf_float+0x4c>
 80032bc:	2b45      	cmp	r3, #69	; 0x45
 80032be:	f000 8085 	beq.w	80033cc <_scanf_float+0x1f0>
 80032c2:	2b46      	cmp	r3, #70	; 0x46
 80032c4:	d06a      	beq.n	800339c <_scanf_float+0x1c0>
 80032c6:	2b41      	cmp	r3, #65	; 0x41
 80032c8:	d1c1      	bne.n	800324e <_scanf_float+0x72>
 80032ca:	2a01      	cmp	r2, #1
 80032cc:	d1bf      	bne.n	800324e <_scanf_float+0x72>
 80032ce:	2202      	movs	r2, #2
 80032d0:	e046      	b.n	8003360 <_scanf_float+0x184>
 80032d2:	2b65      	cmp	r3, #101	; 0x65
 80032d4:	d07a      	beq.n	80033cc <_scanf_float+0x1f0>
 80032d6:	d818      	bhi.n	800330a <_scanf_float+0x12e>
 80032d8:	2b54      	cmp	r3, #84	; 0x54
 80032da:	d066      	beq.n	80033aa <_scanf_float+0x1ce>
 80032dc:	d811      	bhi.n	8003302 <_scanf_float+0x126>
 80032de:	2b4e      	cmp	r3, #78	; 0x4e
 80032e0:	d1b5      	bne.n	800324e <_scanf_float+0x72>
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d146      	bne.n	8003374 <_scanf_float+0x198>
 80032e6:	f1b9 0f00 	cmp.w	r9, #0
 80032ea:	d145      	bne.n	8003378 <_scanf_float+0x19c>
 80032ec:	6821      	ldr	r1, [r4, #0]
 80032ee:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80032f2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80032f6:	d13f      	bne.n	8003378 <_scanf_float+0x19c>
 80032f8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80032fc:	6021      	str	r1, [r4, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	e02e      	b.n	8003360 <_scanf_float+0x184>
 8003302:	2b59      	cmp	r3, #89	; 0x59
 8003304:	d01e      	beq.n	8003344 <_scanf_float+0x168>
 8003306:	2b61      	cmp	r3, #97	; 0x61
 8003308:	e7de      	b.n	80032c8 <_scanf_float+0xec>
 800330a:	2b6e      	cmp	r3, #110	; 0x6e
 800330c:	d0e9      	beq.n	80032e2 <_scanf_float+0x106>
 800330e:	d815      	bhi.n	800333c <_scanf_float+0x160>
 8003310:	2b66      	cmp	r3, #102	; 0x66
 8003312:	d043      	beq.n	800339c <_scanf_float+0x1c0>
 8003314:	2b69      	cmp	r3, #105	; 0x69
 8003316:	d19a      	bne.n	800324e <_scanf_float+0x72>
 8003318:	f1bb 0f00 	cmp.w	fp, #0
 800331c:	d138      	bne.n	8003390 <_scanf_float+0x1b4>
 800331e:	f1b9 0f00 	cmp.w	r9, #0
 8003322:	d197      	bne.n	8003254 <_scanf_float+0x78>
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800332a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800332e:	d195      	bne.n	800325c <_scanf_float+0x80>
 8003330:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003334:	6021      	str	r1, [r4, #0]
 8003336:	f04f 0b01 	mov.w	fp, #1
 800333a:	e011      	b.n	8003360 <_scanf_float+0x184>
 800333c:	2b74      	cmp	r3, #116	; 0x74
 800333e:	d034      	beq.n	80033aa <_scanf_float+0x1ce>
 8003340:	2b79      	cmp	r3, #121	; 0x79
 8003342:	d184      	bne.n	800324e <_scanf_float+0x72>
 8003344:	f1bb 0f07 	cmp.w	fp, #7
 8003348:	d181      	bne.n	800324e <_scanf_float+0x72>
 800334a:	f04f 0b08 	mov.w	fp, #8
 800334e:	e007      	b.n	8003360 <_scanf_float+0x184>
 8003350:	eb12 0f0b 	cmn.w	r2, fp
 8003354:	f47f af7b 	bne.w	800324e <_scanf_float+0x72>
 8003358:	6821      	ldr	r1, [r4, #0]
 800335a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800335e:	6021      	str	r1, [r4, #0]
 8003360:	702b      	strb	r3, [r5, #0]
 8003362:	3501      	adds	r5, #1
 8003364:	e79a      	b.n	800329c <_scanf_float+0xc0>
 8003366:	6821      	ldr	r1, [r4, #0]
 8003368:	0608      	lsls	r0, r1, #24
 800336a:	f57f af70 	bpl.w	800324e <_scanf_float+0x72>
 800336e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003372:	e7f4      	b.n	800335e <_scanf_float+0x182>
 8003374:	2a02      	cmp	r2, #2
 8003376:	d047      	beq.n	8003408 <_scanf_float+0x22c>
 8003378:	f1bb 0f01 	cmp.w	fp, #1
 800337c:	d003      	beq.n	8003386 <_scanf_float+0x1aa>
 800337e:	f1bb 0f04 	cmp.w	fp, #4
 8003382:	f47f af64 	bne.w	800324e <_scanf_float+0x72>
 8003386:	f10b 0b01 	add.w	fp, fp, #1
 800338a:	fa5f fb8b 	uxtb.w	fp, fp
 800338e:	e7e7      	b.n	8003360 <_scanf_float+0x184>
 8003390:	f1bb 0f03 	cmp.w	fp, #3
 8003394:	d0f7      	beq.n	8003386 <_scanf_float+0x1aa>
 8003396:	f1bb 0f05 	cmp.w	fp, #5
 800339a:	e7f2      	b.n	8003382 <_scanf_float+0x1a6>
 800339c:	f1bb 0f02 	cmp.w	fp, #2
 80033a0:	f47f af55 	bne.w	800324e <_scanf_float+0x72>
 80033a4:	f04f 0b03 	mov.w	fp, #3
 80033a8:	e7da      	b.n	8003360 <_scanf_float+0x184>
 80033aa:	f1bb 0f06 	cmp.w	fp, #6
 80033ae:	f47f af4e 	bne.w	800324e <_scanf_float+0x72>
 80033b2:	f04f 0b07 	mov.w	fp, #7
 80033b6:	e7d3      	b.n	8003360 <_scanf_float+0x184>
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	0588      	lsls	r0, r1, #22
 80033bc:	f57f af47 	bpl.w	800324e <_scanf_float+0x72>
 80033c0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80033c4:	6021      	str	r1, [r4, #0]
 80033c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80033ca:	e7c9      	b.n	8003360 <_scanf_float+0x184>
 80033cc:	6821      	ldr	r1, [r4, #0]
 80033ce:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80033d2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80033d6:	d006      	beq.n	80033e6 <_scanf_float+0x20a>
 80033d8:	0548      	lsls	r0, r1, #21
 80033da:	f57f af38 	bpl.w	800324e <_scanf_float+0x72>
 80033de:	f1b9 0f00 	cmp.w	r9, #0
 80033e2:	f43f af3b 	beq.w	800325c <_scanf_float+0x80>
 80033e6:	0588      	lsls	r0, r1, #22
 80033e8:	bf58      	it	pl
 80033ea:	9802      	ldrpl	r0, [sp, #8]
 80033ec:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80033f0:	bf58      	it	pl
 80033f2:	eba9 0000 	subpl.w	r0, r9, r0
 80033f6:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80033fa:	bf58      	it	pl
 80033fc:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003400:	6021      	str	r1, [r4, #0]
 8003402:	f04f 0900 	mov.w	r9, #0
 8003406:	e7ab      	b.n	8003360 <_scanf_float+0x184>
 8003408:	2203      	movs	r2, #3
 800340a:	e7a9      	b.n	8003360 <_scanf_float+0x184>
 800340c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003410:	4631      	mov	r1, r6
 8003412:	4638      	mov	r0, r7
 8003414:	9205      	str	r2, [sp, #20]
 8003416:	4798      	blx	r3
 8003418:	9a05      	ldr	r2, [sp, #20]
 800341a:	2800      	cmp	r0, #0
 800341c:	f43f af04 	beq.w	8003228 <_scanf_float+0x4c>
 8003420:	e715      	b.n	800324e <_scanf_float+0x72>
 8003422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003426:	4632      	mov	r2, r6
 8003428:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800342c:	4638      	mov	r0, r7
 800342e:	4798      	blx	r3
 8003430:	6923      	ldr	r3, [r4, #16]
 8003432:	3b01      	subs	r3, #1
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	e715      	b.n	8003264 <_scanf_float+0x88>
 8003438:	f10b 33ff 	add.w	r3, fp, #4294967295
 800343c:	2b06      	cmp	r3, #6
 800343e:	d80a      	bhi.n	8003456 <_scanf_float+0x27a>
 8003440:	f1bb 0f02 	cmp.w	fp, #2
 8003444:	d967      	bls.n	8003516 <_scanf_float+0x33a>
 8003446:	f1ab 0b03 	sub.w	fp, fp, #3
 800344a:	fa5f fb8b 	uxtb.w	fp, fp
 800344e:	eba5 0b0b 	sub.w	fp, r5, fp
 8003452:	455d      	cmp	r5, fp
 8003454:	d14a      	bne.n	80034ec <_scanf_float+0x310>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	05da      	lsls	r2, r3, #23
 800345a:	d51f      	bpl.n	800349c <_scanf_float+0x2c0>
 800345c:	055b      	lsls	r3, r3, #21
 800345e:	d467      	bmi.n	8003530 <_scanf_float+0x354>
 8003460:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	2965      	cmp	r1, #101	; 0x65
 8003468:	f103 33ff 	add.w	r3, r3, #4294967295
 800346c:	f105 3bff 	add.w	fp, r5, #4294967295
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	d00d      	beq.n	8003490 <_scanf_float+0x2b4>
 8003474:	2945      	cmp	r1, #69	; 0x45
 8003476:	d00b      	beq.n	8003490 <_scanf_float+0x2b4>
 8003478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800347c:	4632      	mov	r2, r6
 800347e:	4638      	mov	r0, r7
 8003480:	4798      	blx	r3
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003488:	3b01      	subs	r3, #1
 800348a:	f1a5 0b02 	sub.w	fp, r5, #2
 800348e:	6123      	str	r3, [r4, #16]
 8003490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003494:	4632      	mov	r2, r6
 8003496:	4638      	mov	r0, r7
 8003498:	4798      	blx	r3
 800349a:	465d      	mov	r5, fp
 800349c:	6826      	ldr	r6, [r4, #0]
 800349e:	f016 0610 	ands.w	r6, r6, #16
 80034a2:	d176      	bne.n	8003592 <_scanf_float+0x3b6>
 80034a4:	702e      	strb	r6, [r5, #0]
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d141      	bne.n	8003536 <_scanf_float+0x35a>
 80034b2:	9b02      	ldr	r3, [sp, #8]
 80034b4:	eba9 0303 	sub.w	r3, r9, r3
 80034b8:	425a      	negs	r2, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d148      	bne.n	8003550 <_scanf_float+0x374>
 80034be:	4641      	mov	r1, r8
 80034c0:	2200      	movs	r2, #0
 80034c2:	4638      	mov	r0, r7
 80034c4:	f000 feb0 	bl	8004228 <_strtod_r>
 80034c8:	6825      	ldr	r5, [r4, #0]
 80034ca:	4680      	mov	r8, r0
 80034cc:	f015 0f02 	tst.w	r5, #2
 80034d0:	4689      	mov	r9, r1
 80034d2:	f8da 3000 	ldr.w	r3, [sl]
 80034d6:	d046      	beq.n	8003566 <_scanf_float+0x38a>
 80034d8:	1d1a      	adds	r2, r3, #4
 80034da:	f8ca 2000 	str.w	r2, [sl]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	e9c3 8900 	strd	r8, r9, [r3]
 80034e4:	68e3      	ldr	r3, [r4, #12]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60e3      	str	r3, [r4, #12]
 80034ea:	e6bf      	b.n	800326c <_scanf_float+0x90>
 80034ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034f0:	4632      	mov	r2, r6
 80034f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80034f6:	4638      	mov	r0, r7
 80034f8:	4798      	blx	r3
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	6123      	str	r3, [r4, #16]
 8003500:	e7a7      	b.n	8003452 <_scanf_float+0x276>
 8003502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003506:	4632      	mov	r2, r6
 8003508:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800350c:	4638      	mov	r0, r7
 800350e:	4798      	blx	r3
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	3b01      	subs	r3, #1
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	4545      	cmp	r5, r8
 8003518:	d8f3      	bhi.n	8003502 <_scanf_float+0x326>
 800351a:	e6a6      	b.n	800326a <_scanf_float+0x8e>
 800351c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003520:	4632      	mov	r2, r6
 8003522:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003526:	4638      	mov	r0, r7
 8003528:	4798      	blx	r3
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	3b01      	subs	r3, #1
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	4545      	cmp	r5, r8
 8003532:	d8f3      	bhi.n	800351c <_scanf_float+0x340>
 8003534:	e699      	b.n	800326a <_scanf_float+0x8e>
 8003536:	9b03      	ldr	r3, [sp, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0c0      	beq.n	80034be <_scanf_float+0x2e2>
 800353c:	9904      	ldr	r1, [sp, #16]
 800353e:	230a      	movs	r3, #10
 8003540:	4632      	mov	r2, r6
 8003542:	3101      	adds	r1, #1
 8003544:	4638      	mov	r0, r7
 8003546:	f000 fefb 	bl	8004340 <_strtol_r>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	9d04      	ldr	r5, [sp, #16]
 800354e:	1ac2      	subs	r2, r0, r3
 8003550:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003554:	429d      	cmp	r5, r3
 8003556:	bf28      	it	cs
 8003558:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <_scanf_float+0x3bc>)
 800355e:	4628      	mov	r0, r5
 8003560:	f000 f820 	bl	80035a4 <siprintf>
 8003564:	e7ab      	b.n	80034be <_scanf_float+0x2e2>
 8003566:	1d1f      	adds	r7, r3, #4
 8003568:	f015 0504 	ands.w	r5, r5, #4
 800356c:	f8ca 7000 	str.w	r7, [sl]
 8003570:	d1b5      	bne.n	80034de <_scanf_float+0x302>
 8003572:	681f      	ldr	r7, [r3, #0]
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	f7fd fa48 	bl	8000a0c <__aeabi_dcmpun>
 800357c:	b120      	cbz	r0, 8003588 <_scanf_float+0x3ac>
 800357e:	4628      	mov	r0, r5
 8003580:	f000 f80c 	bl	800359c <nanf>
 8003584:	6038      	str	r0, [r7, #0]
 8003586:	e7ad      	b.n	80034e4 <_scanf_float+0x308>
 8003588:	4640      	mov	r0, r8
 800358a:	4649      	mov	r1, r9
 800358c:	f7fd fa9c 	bl	8000ac8 <__aeabi_d2f>
 8003590:	e7f8      	b.n	8003584 <_scanf_float+0x3a8>
 8003592:	2600      	movs	r6, #0
 8003594:	e66a      	b.n	800326c <_scanf_float+0x90>
 8003596:	bf00      	nop
 8003598:	08006430 	.word	0x08006430

0800359c <nanf>:
 800359c:	4800      	ldr	r0, [pc, #0]	; (80035a0 <nanf+0x4>)
 800359e:	4770      	bx	lr
 80035a0:	7fc00000 	.word	0x7fc00000

080035a4 <siprintf>:
 80035a4:	b40e      	push	{r1, r2, r3}
 80035a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035aa:	b500      	push	{lr}
 80035ac:	b09c      	sub	sp, #112	; 0x70
 80035ae:	ab1d      	add	r3, sp, #116	; 0x74
 80035b0:	9002      	str	r0, [sp, #8]
 80035b2:	9006      	str	r0, [sp, #24]
 80035b4:	9107      	str	r1, [sp, #28]
 80035b6:	9104      	str	r1, [sp, #16]
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <siprintf+0x38>)
 80035ba:	4909      	ldr	r1, [pc, #36]	; (80035e0 <siprintf+0x3c>)
 80035bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80035c0:	9105      	str	r1, [sp, #20]
 80035c2:	6800      	ldr	r0, [r0, #0]
 80035c4:	a902      	add	r1, sp, #8
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	f002 fd84 	bl	80060d4 <_svfiprintf_r>
 80035cc:	2200      	movs	r2, #0
 80035ce:	9b02      	ldr	r3, [sp, #8]
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	b01c      	add	sp, #112	; 0x70
 80035d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035d8:	b003      	add	sp, #12
 80035da:	4770      	bx	lr
 80035dc:	20000018 	.word	0x20000018
 80035e0:	ffff0208 	.word	0xffff0208

080035e4 <sulp>:
 80035e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e8:	460f      	mov	r7, r1
 80035ea:	4690      	mov	r8, r2
 80035ec:	f002 fb36 	bl	8005c5c <__ulp>
 80035f0:	4604      	mov	r4, r0
 80035f2:	460d      	mov	r5, r1
 80035f4:	f1b8 0f00 	cmp.w	r8, #0
 80035f8:	d011      	beq.n	800361e <sulp+0x3a>
 80035fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80035fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003602:	2b00      	cmp	r3, #0
 8003604:	dd0b      	ble.n	800361e <sulp+0x3a>
 8003606:	2400      	movs	r4, #0
 8003608:	051b      	lsls	r3, r3, #20
 800360a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800360e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	f7fc ff5f 	bl	80004d8 <__aeabi_dmul>
 800361a:	4604      	mov	r4, r0
 800361c:	460d      	mov	r5, r1
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003628 <_strtod_l>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	461f      	mov	r7, r3
 800362e:	2300      	movs	r3, #0
 8003630:	b0a1      	sub	sp, #132	; 0x84
 8003632:	4683      	mov	fp, r0
 8003634:	4638      	mov	r0, r7
 8003636:	460e      	mov	r6, r1
 8003638:	9217      	str	r2, [sp, #92]	; 0x5c
 800363a:	931c      	str	r3, [sp, #112]	; 0x70
 800363c:	f001 ffff 	bl	800563e <__localeconv_l>
 8003640:	4680      	mov	r8, r0
 8003642:	6800      	ldr	r0, [r0, #0]
 8003644:	f7fc fd84 	bl	8000150 <strlen>
 8003648:	f04f 0900 	mov.w	r9, #0
 800364c:	4604      	mov	r4, r0
 800364e:	f04f 0a00 	mov.w	sl, #0
 8003652:	961b      	str	r6, [sp, #108]	; 0x6c
 8003654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	2a0d      	cmp	r2, #13
 800365a:	d832      	bhi.n	80036c2 <_strtod_l+0x9a>
 800365c:	2a09      	cmp	r2, #9
 800365e:	d236      	bcs.n	80036ce <_strtod_l+0xa6>
 8003660:	2a00      	cmp	r2, #0
 8003662:	d03e      	beq.n	80036e2 <_strtod_l+0xba>
 8003664:	2300      	movs	r3, #0
 8003666:	930d      	str	r3, [sp, #52]	; 0x34
 8003668:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800366a:	782b      	ldrb	r3, [r5, #0]
 800366c:	2b30      	cmp	r3, #48	; 0x30
 800366e:	f040 80ac 	bne.w	80037ca <_strtod_l+0x1a2>
 8003672:	786b      	ldrb	r3, [r5, #1]
 8003674:	2b58      	cmp	r3, #88	; 0x58
 8003676:	d001      	beq.n	800367c <_strtod_l+0x54>
 8003678:	2b78      	cmp	r3, #120	; 0x78
 800367a:	d167      	bne.n	800374c <_strtod_l+0x124>
 800367c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800367e:	9702      	str	r7, [sp, #8]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	ab1c      	add	r3, sp, #112	; 0x70
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4a89      	ldr	r2, [pc, #548]	; (80038ac <_strtod_l+0x284>)
 8003688:	ab1d      	add	r3, sp, #116	; 0x74
 800368a:	a91b      	add	r1, sp, #108	; 0x6c
 800368c:	4658      	mov	r0, fp
 800368e:	f001 fcfb 	bl	8005088 <__gethex>
 8003692:	f010 0407 	ands.w	r4, r0, #7
 8003696:	4606      	mov	r6, r0
 8003698:	d005      	beq.n	80036a6 <_strtod_l+0x7e>
 800369a:	2c06      	cmp	r4, #6
 800369c:	d12b      	bne.n	80036f6 <_strtod_l+0xce>
 800369e:	2300      	movs	r3, #0
 80036a0:	3501      	adds	r5, #1
 80036a2:	951b      	str	r5, [sp, #108]	; 0x6c
 80036a4:	930d      	str	r3, [sp, #52]	; 0x34
 80036a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 85a6 	bne.w	80041fa <_strtod_l+0xbd2>
 80036ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036b0:	b1e3      	cbz	r3, 80036ec <_strtod_l+0xc4>
 80036b2:	464a      	mov	r2, r9
 80036b4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	b021      	add	sp, #132	; 0x84
 80036be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c2:	2a2b      	cmp	r2, #43	; 0x2b
 80036c4:	d015      	beq.n	80036f2 <_strtod_l+0xca>
 80036c6:	2a2d      	cmp	r2, #45	; 0x2d
 80036c8:	d004      	beq.n	80036d4 <_strtod_l+0xac>
 80036ca:	2a20      	cmp	r2, #32
 80036cc:	d1ca      	bne.n	8003664 <_strtod_l+0x3c>
 80036ce:	3301      	adds	r3, #1
 80036d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80036d2:	e7bf      	b.n	8003654 <_strtod_l+0x2c>
 80036d4:	2201      	movs	r2, #1
 80036d6:	920d      	str	r2, [sp, #52]	; 0x34
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	921b      	str	r2, [sp, #108]	; 0x6c
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1c2      	bne.n	8003668 <_strtod_l+0x40>
 80036e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 8585 	bne.w	80041f6 <_strtod_l+0xbce>
 80036ec:	464a      	mov	r2, r9
 80036ee:	4653      	mov	r3, sl
 80036f0:	e7e2      	b.n	80036b8 <_strtod_l+0x90>
 80036f2:	2200      	movs	r2, #0
 80036f4:	e7ef      	b.n	80036d6 <_strtod_l+0xae>
 80036f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80036f8:	b13a      	cbz	r2, 800370a <_strtod_l+0xe2>
 80036fa:	2135      	movs	r1, #53	; 0x35
 80036fc:	a81e      	add	r0, sp, #120	; 0x78
 80036fe:	f002 fba0 	bl	8005e42 <__copybits>
 8003702:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003704:	4658      	mov	r0, fp
 8003706:	f002 f812 	bl	800572e <_Bfree>
 800370a:	3c01      	subs	r4, #1
 800370c:	2c04      	cmp	r4, #4
 800370e:	d806      	bhi.n	800371e <_strtod_l+0xf6>
 8003710:	e8df f004 	tbb	[pc, r4]
 8003714:	1714030a 	.word	0x1714030a
 8003718:	0a          	.byte	0x0a
 8003719:	00          	.byte	0x00
 800371a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800371e:	0731      	lsls	r1, r6, #28
 8003720:	d5c1      	bpl.n	80036a6 <_strtod_l+0x7e>
 8003722:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003726:	e7be      	b.n	80036a6 <_strtod_l+0x7e>
 8003728:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800372a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800372e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003732:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003736:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800373a:	e7f0      	b.n	800371e <_strtod_l+0xf6>
 800373c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80038b0 <_strtod_l+0x288>
 8003740:	e7ed      	b.n	800371e <_strtod_l+0xf6>
 8003742:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003746:	f04f 39ff 	mov.w	r9, #4294967295
 800374a:	e7e8      	b.n	800371e <_strtod_l+0xf6>
 800374c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	921b      	str	r2, [sp, #108]	; 0x6c
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b30      	cmp	r3, #48	; 0x30
 8003756:	d0f9      	beq.n	800374c <_strtod_l+0x124>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0a4      	beq.n	80036a6 <_strtod_l+0x7e>
 800375c:	2301      	movs	r3, #1
 800375e:	2500      	movs	r5, #0
 8003760:	220a      	movs	r2, #10
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003766:	9506      	str	r5, [sp, #24]
 8003768:	9308      	str	r3, [sp, #32]
 800376a:	9504      	str	r5, [sp, #16]
 800376c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800376e:	7807      	ldrb	r7, [r0, #0]
 8003770:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003774:	b2d9      	uxtb	r1, r3
 8003776:	2909      	cmp	r1, #9
 8003778:	d929      	bls.n	80037ce <_strtod_l+0x1a6>
 800377a:	4622      	mov	r2, r4
 800377c:	f8d8 1000 	ldr.w	r1, [r8]
 8003780:	f002 fdb0 	bl	80062e4 <strncmp>
 8003784:	2800      	cmp	r0, #0
 8003786:	d031      	beq.n	80037ec <_strtod_l+0x1c4>
 8003788:	2000      	movs	r0, #0
 800378a:	463b      	mov	r3, r7
 800378c:	4602      	mov	r2, r0
 800378e:	9c04      	ldr	r4, [sp, #16]
 8003790:	9005      	str	r0, [sp, #20]
 8003792:	2b65      	cmp	r3, #101	; 0x65
 8003794:	d001      	beq.n	800379a <_strtod_l+0x172>
 8003796:	2b45      	cmp	r3, #69	; 0x45
 8003798:	d114      	bne.n	80037c4 <_strtod_l+0x19c>
 800379a:	b924      	cbnz	r4, 80037a6 <_strtod_l+0x17e>
 800379c:	b910      	cbnz	r0, 80037a4 <_strtod_l+0x17c>
 800379e:	9b07      	ldr	r3, [sp, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d09e      	beq.n	80036e2 <_strtod_l+0xba>
 80037a4:	2400      	movs	r4, #0
 80037a6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80037a8:	1c73      	adds	r3, r6, #1
 80037aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80037ac:	7873      	ldrb	r3, [r6, #1]
 80037ae:	2b2b      	cmp	r3, #43	; 0x2b
 80037b0:	d078      	beq.n	80038a4 <_strtod_l+0x27c>
 80037b2:	2b2d      	cmp	r3, #45	; 0x2d
 80037b4:	d070      	beq.n	8003898 <_strtod_l+0x270>
 80037b6:	f04f 0c00 	mov.w	ip, #0
 80037ba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80037be:	2f09      	cmp	r7, #9
 80037c0:	d97c      	bls.n	80038bc <_strtod_l+0x294>
 80037c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80037c4:	f04f 0e00 	mov.w	lr, #0
 80037c8:	e09a      	b.n	8003900 <_strtod_l+0x2d8>
 80037ca:	2300      	movs	r3, #0
 80037cc:	e7c7      	b.n	800375e <_strtod_l+0x136>
 80037ce:	9904      	ldr	r1, [sp, #16]
 80037d0:	3001      	adds	r0, #1
 80037d2:	2908      	cmp	r1, #8
 80037d4:	bfd7      	itett	le
 80037d6:	9906      	ldrle	r1, [sp, #24]
 80037d8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80037dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80037e0:	9306      	strle	r3, [sp, #24]
 80037e2:	9b04      	ldr	r3, [sp, #16]
 80037e4:	901b      	str	r0, [sp, #108]	; 0x6c
 80037e6:	3301      	adds	r3, #1
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	e7bf      	b.n	800376c <_strtod_l+0x144>
 80037ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80037ee:	191a      	adds	r2, r3, r4
 80037f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80037f2:	9a04      	ldr	r2, [sp, #16]
 80037f4:	5d1b      	ldrb	r3, [r3, r4]
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d037      	beq.n	800386a <_strtod_l+0x242>
 80037fa:	4602      	mov	r2, r0
 80037fc:	9c04      	ldr	r4, [sp, #16]
 80037fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003802:	2909      	cmp	r1, #9
 8003804:	d913      	bls.n	800382e <_strtod_l+0x206>
 8003806:	2101      	movs	r1, #1
 8003808:	9105      	str	r1, [sp, #20]
 800380a:	e7c2      	b.n	8003792 <_strtod_l+0x16a>
 800380c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800380e:	3001      	adds	r0, #1
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	921b      	str	r2, [sp, #108]	; 0x6c
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	2b30      	cmp	r3, #48	; 0x30
 8003818:	d0f8      	beq.n	800380c <_strtod_l+0x1e4>
 800381a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800381e:	2a08      	cmp	r2, #8
 8003820:	f200 84f0 	bhi.w	8004204 <_strtod_l+0xbdc>
 8003824:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003826:	9208      	str	r2, [sp, #32]
 8003828:	4602      	mov	r2, r0
 800382a:	2000      	movs	r0, #0
 800382c:	4604      	mov	r4, r0
 800382e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003832:	f100 0101 	add.w	r1, r0, #1
 8003836:	d012      	beq.n	800385e <_strtod_l+0x236>
 8003838:	440a      	add	r2, r1
 800383a:	270a      	movs	r7, #10
 800383c:	4621      	mov	r1, r4
 800383e:	eb00 0c04 	add.w	ip, r0, r4
 8003842:	458c      	cmp	ip, r1
 8003844:	d113      	bne.n	800386e <_strtod_l+0x246>
 8003846:	1821      	adds	r1, r4, r0
 8003848:	2908      	cmp	r1, #8
 800384a:	f104 0401 	add.w	r4, r4, #1
 800384e:	4404      	add	r4, r0
 8003850:	dc19      	bgt.n	8003886 <_strtod_l+0x25e>
 8003852:	210a      	movs	r1, #10
 8003854:	9b06      	ldr	r3, [sp, #24]
 8003856:	fb01 e303 	mla	r3, r1, r3, lr
 800385a:	9306      	str	r3, [sp, #24]
 800385c:	2100      	movs	r1, #0
 800385e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003860:	1c58      	adds	r0, r3, #1
 8003862:	901b      	str	r0, [sp, #108]	; 0x6c
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	4608      	mov	r0, r1
 8003868:	e7c9      	b.n	80037fe <_strtod_l+0x1d6>
 800386a:	9804      	ldr	r0, [sp, #16]
 800386c:	e7d3      	b.n	8003816 <_strtod_l+0x1ee>
 800386e:	2908      	cmp	r1, #8
 8003870:	f101 0101 	add.w	r1, r1, #1
 8003874:	dc03      	bgt.n	800387e <_strtod_l+0x256>
 8003876:	9b06      	ldr	r3, [sp, #24]
 8003878:	437b      	muls	r3, r7
 800387a:	9306      	str	r3, [sp, #24]
 800387c:	e7e1      	b.n	8003842 <_strtod_l+0x21a>
 800387e:	2910      	cmp	r1, #16
 8003880:	bfd8      	it	le
 8003882:	437d      	mulle	r5, r7
 8003884:	e7dd      	b.n	8003842 <_strtod_l+0x21a>
 8003886:	2c10      	cmp	r4, #16
 8003888:	bfdc      	itt	le
 800388a:	210a      	movle	r1, #10
 800388c:	fb01 e505 	mlale	r5, r1, r5, lr
 8003890:	e7e4      	b.n	800385c <_strtod_l+0x234>
 8003892:	2301      	movs	r3, #1
 8003894:	9305      	str	r3, [sp, #20]
 8003896:	e781      	b.n	800379c <_strtod_l+0x174>
 8003898:	f04f 0c01 	mov.w	ip, #1
 800389c:	1cb3      	adds	r3, r6, #2
 800389e:	931b      	str	r3, [sp, #108]	; 0x6c
 80038a0:	78b3      	ldrb	r3, [r6, #2]
 80038a2:	e78a      	b.n	80037ba <_strtod_l+0x192>
 80038a4:	f04f 0c00 	mov.w	ip, #0
 80038a8:	e7f8      	b.n	800389c <_strtod_l+0x274>
 80038aa:	bf00      	nop
 80038ac:	08006438 	.word	0x08006438
 80038b0:	7ff00000 	.word	0x7ff00000
 80038b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038b6:	1c5f      	adds	r7, r3, #1
 80038b8:	971b      	str	r7, [sp, #108]	; 0x6c
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d0f9      	beq.n	80038b4 <_strtod_l+0x28c>
 80038c0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80038c4:	2f08      	cmp	r7, #8
 80038c6:	f63f af7d 	bhi.w	80037c4 <_strtod_l+0x19c>
 80038ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80038ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038d0:	9309      	str	r3, [sp, #36]	; 0x24
 80038d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80038d4:	1c5f      	adds	r7, r3, #1
 80038d6:	971b      	str	r7, [sp, #108]	; 0x6c
 80038d8:	785b      	ldrb	r3, [r3, #1]
 80038da:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80038de:	f1b8 0f09 	cmp.w	r8, #9
 80038e2:	d937      	bls.n	8003954 <_strtod_l+0x32c>
 80038e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038e6:	1a7f      	subs	r7, r7, r1
 80038e8:	2f08      	cmp	r7, #8
 80038ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80038ee:	dc37      	bgt.n	8003960 <_strtod_l+0x338>
 80038f0:	45be      	cmp	lr, r7
 80038f2:	bfa8      	it	ge
 80038f4:	46be      	movge	lr, r7
 80038f6:	f1bc 0f00 	cmp.w	ip, #0
 80038fa:	d001      	beq.n	8003900 <_strtod_l+0x2d8>
 80038fc:	f1ce 0e00 	rsb	lr, lr, #0
 8003900:	2c00      	cmp	r4, #0
 8003902:	d151      	bne.n	80039a8 <_strtod_l+0x380>
 8003904:	2800      	cmp	r0, #0
 8003906:	f47f aece 	bne.w	80036a6 <_strtod_l+0x7e>
 800390a:	9a07      	ldr	r2, [sp, #28]
 800390c:	2a00      	cmp	r2, #0
 800390e:	f47f aeca 	bne.w	80036a6 <_strtod_l+0x7e>
 8003912:	9a05      	ldr	r2, [sp, #20]
 8003914:	2a00      	cmp	r2, #0
 8003916:	f47f aee4 	bne.w	80036e2 <_strtod_l+0xba>
 800391a:	2b4e      	cmp	r3, #78	; 0x4e
 800391c:	d027      	beq.n	800396e <_strtod_l+0x346>
 800391e:	dc21      	bgt.n	8003964 <_strtod_l+0x33c>
 8003920:	2b49      	cmp	r3, #73	; 0x49
 8003922:	f47f aede 	bne.w	80036e2 <_strtod_l+0xba>
 8003926:	49a4      	ldr	r1, [pc, #656]	; (8003bb8 <_strtod_l+0x590>)
 8003928:	a81b      	add	r0, sp, #108	; 0x6c
 800392a:	f001 fde1 	bl	80054f0 <__match>
 800392e:	2800      	cmp	r0, #0
 8003930:	f43f aed7 	beq.w	80036e2 <_strtod_l+0xba>
 8003934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003936:	49a1      	ldr	r1, [pc, #644]	; (8003bbc <_strtod_l+0x594>)
 8003938:	3b01      	subs	r3, #1
 800393a:	a81b      	add	r0, sp, #108	; 0x6c
 800393c:	931b      	str	r3, [sp, #108]	; 0x6c
 800393e:	f001 fdd7 	bl	80054f0 <__match>
 8003942:	b910      	cbnz	r0, 800394a <_strtod_l+0x322>
 8003944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003946:	3301      	adds	r3, #1
 8003948:	931b      	str	r3, [sp, #108]	; 0x6c
 800394a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003bd0 <_strtod_l+0x5a8>
 800394e:	f04f 0900 	mov.w	r9, #0
 8003952:	e6a8      	b.n	80036a6 <_strtod_l+0x7e>
 8003954:	210a      	movs	r1, #10
 8003956:	fb01 3e0e 	mla	lr, r1, lr, r3
 800395a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800395e:	e7b8      	b.n	80038d2 <_strtod_l+0x2aa>
 8003960:	46be      	mov	lr, r7
 8003962:	e7c8      	b.n	80038f6 <_strtod_l+0x2ce>
 8003964:	2b69      	cmp	r3, #105	; 0x69
 8003966:	d0de      	beq.n	8003926 <_strtod_l+0x2fe>
 8003968:	2b6e      	cmp	r3, #110	; 0x6e
 800396a:	f47f aeba 	bne.w	80036e2 <_strtod_l+0xba>
 800396e:	4994      	ldr	r1, [pc, #592]	; (8003bc0 <_strtod_l+0x598>)
 8003970:	a81b      	add	r0, sp, #108	; 0x6c
 8003972:	f001 fdbd 	bl	80054f0 <__match>
 8003976:	2800      	cmp	r0, #0
 8003978:	f43f aeb3 	beq.w	80036e2 <_strtod_l+0xba>
 800397c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b28      	cmp	r3, #40	; 0x28
 8003982:	d10e      	bne.n	80039a2 <_strtod_l+0x37a>
 8003984:	aa1e      	add	r2, sp, #120	; 0x78
 8003986:	498f      	ldr	r1, [pc, #572]	; (8003bc4 <_strtod_l+0x59c>)
 8003988:	a81b      	add	r0, sp, #108	; 0x6c
 800398a:	f001 fdc5 	bl	8005518 <__hexnan>
 800398e:	2805      	cmp	r0, #5
 8003990:	d107      	bne.n	80039a2 <_strtod_l+0x37a>
 8003992:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003994:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8003998:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800399c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80039a0:	e681      	b.n	80036a6 <_strtod_l+0x7e>
 80039a2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003bd8 <_strtod_l+0x5b0>
 80039a6:	e7d2      	b.n	800394e <_strtod_l+0x326>
 80039a8:	ebae 0302 	sub.w	r3, lr, r2
 80039ac:	9307      	str	r3, [sp, #28]
 80039ae:	9b04      	ldr	r3, [sp, #16]
 80039b0:	9806      	ldr	r0, [sp, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf08      	it	eq
 80039b6:	4623      	moveq	r3, r4
 80039b8:	2c10      	cmp	r4, #16
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	46a0      	mov	r8, r4
 80039be:	bfa8      	it	ge
 80039c0:	f04f 0810 	movge.w	r8, #16
 80039c4:	f7fc fd0e 	bl	80003e4 <__aeabi_ui2d>
 80039c8:	2c09      	cmp	r4, #9
 80039ca:	4681      	mov	r9, r0
 80039cc:	468a      	mov	sl, r1
 80039ce:	dc13      	bgt.n	80039f8 <_strtod_l+0x3d0>
 80039d0:	9b07      	ldr	r3, [sp, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f43f ae67 	beq.w	80036a6 <_strtod_l+0x7e>
 80039d8:	9b07      	ldr	r3, [sp, #28]
 80039da:	dd7e      	ble.n	8003ada <_strtod_l+0x4b2>
 80039dc:	2b16      	cmp	r3, #22
 80039de:	dc65      	bgt.n	8003aac <_strtod_l+0x484>
 80039e0:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <_strtod_l+0x5a0>)
 80039e2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80039e6:	464a      	mov	r2, r9
 80039e8:	e9de 0100 	ldrd	r0, r1, [lr]
 80039ec:	4653      	mov	r3, sl
 80039ee:	f7fc fd73 	bl	80004d8 <__aeabi_dmul>
 80039f2:	4681      	mov	r9, r0
 80039f4:	468a      	mov	sl, r1
 80039f6:	e656      	b.n	80036a6 <_strtod_l+0x7e>
 80039f8:	4b73      	ldr	r3, [pc, #460]	; (8003bc8 <_strtod_l+0x5a0>)
 80039fa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80039fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003a02:	f7fc fd69 	bl	80004d8 <__aeabi_dmul>
 8003a06:	4606      	mov	r6, r0
 8003a08:	4628      	mov	r0, r5
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	f7fc fcea 	bl	80003e4 <__aeabi_ui2d>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4630      	mov	r0, r6
 8003a16:	4639      	mov	r1, r7
 8003a18:	f7fc fba8 	bl	800016c <__adddf3>
 8003a1c:	2c0f      	cmp	r4, #15
 8003a1e:	4681      	mov	r9, r0
 8003a20:	468a      	mov	sl, r1
 8003a22:	ddd5      	ble.n	80039d0 <_strtod_l+0x3a8>
 8003a24:	9b07      	ldr	r3, [sp, #28]
 8003a26:	eba4 0808 	sub.w	r8, r4, r8
 8003a2a:	4498      	add	r8, r3
 8003a2c:	f1b8 0f00 	cmp.w	r8, #0
 8003a30:	f340 809a 	ble.w	8003b68 <_strtod_l+0x540>
 8003a34:	f018 030f 	ands.w	r3, r8, #15
 8003a38:	d00a      	beq.n	8003a50 <_strtod_l+0x428>
 8003a3a:	4963      	ldr	r1, [pc, #396]	; (8003bc8 <_strtod_l+0x5a0>)
 8003a3c:	464a      	mov	r2, r9
 8003a3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a46:	4653      	mov	r3, sl
 8003a48:	f7fc fd46 	bl	80004d8 <__aeabi_dmul>
 8003a4c:	4681      	mov	r9, r0
 8003a4e:	468a      	mov	sl, r1
 8003a50:	f038 080f 	bics.w	r8, r8, #15
 8003a54:	d077      	beq.n	8003b46 <_strtod_l+0x51e>
 8003a56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003a5a:	dd4b      	ble.n	8003af4 <_strtod_l+0x4cc>
 8003a5c:	f04f 0800 	mov.w	r8, #0
 8003a60:	f8cd 8010 	str.w	r8, [sp, #16]
 8003a64:	f8cd 8020 	str.w	r8, [sp, #32]
 8003a68:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a6c:	2322      	movs	r3, #34	; 0x22
 8003a6e:	f04f 0900 	mov.w	r9, #0
 8003a72:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003bd0 <_strtod_l+0x5a8>
 8003a76:	f8cb 3000 	str.w	r3, [fp]
 8003a7a:	9b08      	ldr	r3, [sp, #32]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f43f ae12 	beq.w	80036a6 <_strtod_l+0x7e>
 8003a82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a84:	4658      	mov	r0, fp
 8003a86:	f001 fe52 	bl	800572e <_Bfree>
 8003a8a:	9906      	ldr	r1, [sp, #24]
 8003a8c:	4658      	mov	r0, fp
 8003a8e:	f001 fe4e 	bl	800572e <_Bfree>
 8003a92:	9904      	ldr	r1, [sp, #16]
 8003a94:	4658      	mov	r0, fp
 8003a96:	f001 fe4a 	bl	800572e <_Bfree>
 8003a9a:	9908      	ldr	r1, [sp, #32]
 8003a9c:	4658      	mov	r0, fp
 8003a9e:	f001 fe46 	bl	800572e <_Bfree>
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	4658      	mov	r0, fp
 8003aa6:	f001 fe42 	bl	800572e <_Bfree>
 8003aaa:	e5fc      	b.n	80036a6 <_strtod_l+0x7e>
 8003aac:	9a07      	ldr	r2, [sp, #28]
 8003aae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	dbb6      	blt.n	8003a24 <_strtod_l+0x3fc>
 8003ab6:	4d44      	ldr	r5, [pc, #272]	; (8003bc8 <_strtod_l+0x5a0>)
 8003ab8:	f1c4 040f 	rsb	r4, r4, #15
 8003abc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003ac0:	464a      	mov	r2, r9
 8003ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ac6:	4653      	mov	r3, sl
 8003ac8:	f7fc fd06 	bl	80004d8 <__aeabi_dmul>
 8003acc:	9b07      	ldr	r3, [sp, #28]
 8003ace:	1b1c      	subs	r4, r3, r4
 8003ad0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003ad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ad8:	e789      	b.n	80039ee <_strtod_l+0x3c6>
 8003ada:	f113 0f16 	cmn.w	r3, #22
 8003ade:	dba1      	blt.n	8003a24 <_strtod_l+0x3fc>
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <_strtod_l+0x5a0>)
 8003ae2:	4648      	mov	r0, r9
 8003ae4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003ae8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003aec:	4651      	mov	r1, sl
 8003aee:	f7fc fe1d 	bl	800072c <__aeabi_ddiv>
 8003af2:	e77e      	b.n	80039f2 <_strtod_l+0x3ca>
 8003af4:	2300      	movs	r3, #0
 8003af6:	4648      	mov	r0, r9
 8003af8:	4651      	mov	r1, sl
 8003afa:	461d      	mov	r5, r3
 8003afc:	4e33      	ldr	r6, [pc, #204]	; (8003bcc <_strtod_l+0x5a4>)
 8003afe:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003b02:	f1b8 0f01 	cmp.w	r8, #1
 8003b06:	dc21      	bgt.n	8003b4c <_strtod_l+0x524>
 8003b08:	b10b      	cbz	r3, 8003b0e <_strtod_l+0x4e6>
 8003b0a:	4681      	mov	r9, r0
 8003b0c:	468a      	mov	sl, r1
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <_strtod_l+0x5a4>)
 8003b10:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8003b14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003b18:	464a      	mov	r2, r9
 8003b1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003b1e:	4653      	mov	r3, sl
 8003b20:	f7fc fcda 	bl	80004d8 <__aeabi_dmul>
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <_strtod_l+0x5a8>)
 8003b26:	460a      	mov	r2, r1
 8003b28:	400b      	ands	r3, r1
 8003b2a:	492a      	ldr	r1, [pc, #168]	; (8003bd4 <_strtod_l+0x5ac>)
 8003b2c:	4681      	mov	r9, r0
 8003b2e:	428b      	cmp	r3, r1
 8003b30:	d894      	bhi.n	8003a5c <_strtod_l+0x434>
 8003b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003b36:	428b      	cmp	r3, r1
 8003b38:	bf86      	itte	hi
 8003b3a:	f04f 39ff 	movhi.w	r9, #4294967295
 8003b3e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8003bdc <_strtod_l+0x5b4>
 8003b42:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8003b46:	2300      	movs	r3, #0
 8003b48:	9305      	str	r3, [sp, #20]
 8003b4a:	e07b      	b.n	8003c44 <_strtod_l+0x61c>
 8003b4c:	f018 0f01 	tst.w	r8, #1
 8003b50:	d006      	beq.n	8003b60 <_strtod_l+0x538>
 8003b52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fcbd 	bl	80004d8 <__aeabi_dmul>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	3501      	adds	r5, #1
 8003b62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003b66:	e7cc      	b.n	8003b02 <_strtod_l+0x4da>
 8003b68:	d0ed      	beq.n	8003b46 <_strtod_l+0x51e>
 8003b6a:	f1c8 0800 	rsb	r8, r8, #0
 8003b6e:	f018 020f 	ands.w	r2, r8, #15
 8003b72:	d00a      	beq.n	8003b8a <_strtod_l+0x562>
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <_strtod_l+0x5a0>)
 8003b76:	4648      	mov	r0, r9
 8003b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fdd3 	bl	800072c <__aeabi_ddiv>
 8003b86:	4681      	mov	r9, r0
 8003b88:	468a      	mov	sl, r1
 8003b8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003b8e:	d0da      	beq.n	8003b46 <_strtod_l+0x51e>
 8003b90:	f1b8 0f1f 	cmp.w	r8, #31
 8003b94:	dd24      	ble.n	8003be0 <_strtod_l+0x5b8>
 8003b96:	f04f 0800 	mov.w	r8, #0
 8003b9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8003b9e:	f8cd 8020 	str.w	r8, [sp, #32]
 8003ba2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ba6:	2322      	movs	r3, #34	; 0x22
 8003ba8:	f04f 0900 	mov.w	r9, #0
 8003bac:	f04f 0a00 	mov.w	sl, #0
 8003bb0:	f8cb 3000 	str.w	r3, [fp]
 8003bb4:	e761      	b.n	8003a7a <_strtod_l+0x452>
 8003bb6:	bf00      	nop
 8003bb8:	08006401 	.word	0x08006401
 8003bbc:	0800648b 	.word	0x0800648b
 8003bc0:	08006409 	.word	0x08006409
 8003bc4:	0800644c 	.word	0x0800644c
 8003bc8:	080064c8 	.word	0x080064c8
 8003bcc:	080064a0 	.word	0x080064a0
 8003bd0:	7ff00000 	.word	0x7ff00000
 8003bd4:	7ca00000 	.word	0x7ca00000
 8003bd8:	fff80000 	.word	0xfff80000
 8003bdc:	7fefffff 	.word	0x7fefffff
 8003be0:	f018 0310 	ands.w	r3, r8, #16
 8003be4:	bf18      	it	ne
 8003be6:	236a      	movne	r3, #106	; 0x6a
 8003be8:	4648      	mov	r0, r9
 8003bea:	9305      	str	r3, [sp, #20]
 8003bec:	4651      	mov	r1, sl
 8003bee:	2300      	movs	r3, #0
 8003bf0:	4da1      	ldr	r5, [pc, #644]	; (8003e78 <_strtod_l+0x850>)
 8003bf2:	f1b8 0f00 	cmp.w	r8, #0
 8003bf6:	f300 8113 	bgt.w	8003e20 <_strtod_l+0x7f8>
 8003bfa:	b10b      	cbz	r3, 8003c00 <_strtod_l+0x5d8>
 8003bfc:	4681      	mov	r9, r0
 8003bfe:	468a      	mov	sl, r1
 8003c00:	9b05      	ldr	r3, [sp, #20]
 8003c02:	b1bb      	cbz	r3, 8003c34 <_strtod_l+0x60c>
 8003c04:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003c08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	4651      	mov	r1, sl
 8003c10:	dd10      	ble.n	8003c34 <_strtod_l+0x60c>
 8003c12:	2b1f      	cmp	r3, #31
 8003c14:	f340 8110 	ble.w	8003e38 <_strtod_l+0x810>
 8003c18:	2b34      	cmp	r3, #52	; 0x34
 8003c1a:	bfd8      	it	le
 8003c1c:	f04f 32ff 	movle.w	r2, #4294967295
 8003c20:	f04f 0900 	mov.w	r9, #0
 8003c24:	bfcf      	iteee	gt
 8003c26:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8003c2a:	3b20      	suble	r3, #32
 8003c2c:	fa02 f303 	lslle.w	r3, r2, r3
 8003c30:	ea03 0a01 	andle.w	sl, r3, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	2300      	movs	r3, #0
 8003c38:	4648      	mov	r0, r9
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	f7fc feb4 	bl	80009a8 <__aeabi_dcmpeq>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d1a8      	bne.n	8003b96 <_strtod_l+0x56e>
 8003c44:	9b06      	ldr	r3, [sp, #24]
 8003c46:	9a04      	ldr	r2, [sp, #16]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	9908      	ldr	r1, [sp, #32]
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	4658      	mov	r0, fp
 8003c50:	f001 fdbf 	bl	80057d2 <__s2b>
 8003c54:	9008      	str	r0, [sp, #32]
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f43f af00 	beq.w	8003a5c <_strtod_l+0x434>
 8003c5c:	9a07      	ldr	r2, [sp, #28]
 8003c5e:	9b07      	ldr	r3, [sp, #28]
 8003c60:	2a00      	cmp	r2, #0
 8003c62:	f1c3 0300 	rsb	r3, r3, #0
 8003c66:	bfa8      	it	ge
 8003c68:	2300      	movge	r3, #0
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	930e      	str	r3, [sp, #56]	; 0x38
 8003c70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003c74:	9316      	str	r3, [sp, #88]	; 0x58
 8003c76:	f8cd 8010 	str.w	r8, [sp, #16]
 8003c7a:	9b08      	ldr	r3, [sp, #32]
 8003c7c:	4658      	mov	r0, fp
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	f001 fd21 	bl	80056c6 <_Balloc>
 8003c84:	9006      	str	r0, [sp, #24]
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f43f aef0 	beq.w	8003a6c <_strtod_l+0x444>
 8003c8c:	9b08      	ldr	r3, [sp, #32]
 8003c8e:	300c      	adds	r0, #12
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	f103 010c 	add.w	r1, r3, #12
 8003c96:	3202      	adds	r2, #2
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	f001 fd09 	bl	80056b0 <memcpy>
 8003c9e:	ab1e      	add	r3, sp, #120	; 0x78
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	464a      	mov	r2, r9
 8003ca8:	4653      	mov	r3, sl
 8003caa:	4658      	mov	r0, fp
 8003cac:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8003cb0:	f002 f84a 	bl	8005d48 <__d2b>
 8003cb4:	901c      	str	r0, [sp, #112]	; 0x70
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	f43f aed8 	beq.w	8003a6c <_strtod_l+0x444>
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4658      	mov	r0, fp
 8003cc0:	f001 fe13 	bl	80058ea <__i2b>
 8003cc4:	9004      	str	r0, [sp, #16]
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f43f aecf 	beq.w	8003a6c <_strtod_l+0x444>
 8003cce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003cd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	bfab      	itete	ge
 8003cd6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003cd8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003cda:	18ee      	addge	r6, r5, r3
 8003cdc:	1b5c      	sublt	r4, r3, r5
 8003cde:	9b05      	ldr	r3, [sp, #20]
 8003ce0:	bfa8      	it	ge
 8003ce2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003ce4:	eba5 0503 	sub.w	r5, r5, r3
 8003ce8:	4415      	add	r5, r2
 8003cea:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <_strtod_l+0x854>)
 8003cec:	f105 35ff 	add.w	r5, r5, #4294967295
 8003cf0:	bfb8      	it	lt
 8003cf2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003cf4:	429d      	cmp	r5, r3
 8003cf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003cfa:	f280 80af 	bge.w	8003e5c <_strtod_l+0x834>
 8003cfe:	1b5b      	subs	r3, r3, r5
 8003d00:	2b1f      	cmp	r3, #31
 8003d02:	eba2 0203 	sub.w	r2, r2, r3
 8003d06:	f04f 0701 	mov.w	r7, #1
 8003d0a:	f300 809c 	bgt.w	8003e46 <_strtod_l+0x81e>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	fa07 f303 	lsl.w	r3, r7, r3
 8003d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d16:	18b7      	adds	r7, r6, r2
 8003d18:	9b05      	ldr	r3, [sp, #20]
 8003d1a:	42be      	cmp	r6, r7
 8003d1c:	4414      	add	r4, r2
 8003d1e:	441c      	add	r4, r3
 8003d20:	4633      	mov	r3, r6
 8003d22:	bfa8      	it	ge
 8003d24:	463b      	movge	r3, r7
 8003d26:	42a3      	cmp	r3, r4
 8003d28:	bfa8      	it	ge
 8003d2a:	4623      	movge	r3, r4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfc2      	ittt	gt
 8003d30:	1aff      	subgt	r7, r7, r3
 8003d32:	1ae4      	subgt	r4, r4, r3
 8003d34:	1af6      	subgt	r6, r6, r3
 8003d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d38:	b1bb      	cbz	r3, 8003d6a <_strtod_l+0x742>
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	9904      	ldr	r1, [sp, #16]
 8003d3e:	4658      	mov	r0, fp
 8003d40:	f001 fe72 	bl	8005a28 <__pow5mult>
 8003d44:	9004      	str	r0, [sp, #16]
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f43f ae90 	beq.w	8003a6c <_strtod_l+0x444>
 8003d4c:	4601      	mov	r1, r0
 8003d4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003d50:	4658      	mov	r0, fp
 8003d52:	f001 fdd3 	bl	80058fc <__multiply>
 8003d56:	9009      	str	r0, [sp, #36]	; 0x24
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f43f ae87 	beq.w	8003a6c <_strtod_l+0x444>
 8003d5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003d60:	4658      	mov	r0, fp
 8003d62:	f001 fce4 	bl	800572e <_Bfree>
 8003d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d68:	931c      	str	r3, [sp, #112]	; 0x70
 8003d6a:	2f00      	cmp	r7, #0
 8003d6c:	dc7a      	bgt.n	8003e64 <_strtod_l+0x83c>
 8003d6e:	9b07      	ldr	r3, [sp, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	dd08      	ble.n	8003d86 <_strtod_l+0x75e>
 8003d74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d76:	9906      	ldr	r1, [sp, #24]
 8003d78:	4658      	mov	r0, fp
 8003d7a:	f001 fe55 	bl	8005a28 <__pow5mult>
 8003d7e:	9006      	str	r0, [sp, #24]
 8003d80:	2800      	cmp	r0, #0
 8003d82:	f43f ae73 	beq.w	8003a6c <_strtod_l+0x444>
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	dd08      	ble.n	8003d9c <_strtod_l+0x774>
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	9906      	ldr	r1, [sp, #24]
 8003d8e:	4658      	mov	r0, fp
 8003d90:	f001 fe98 	bl	8005ac4 <__lshift>
 8003d94:	9006      	str	r0, [sp, #24]
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f43f ae68 	beq.w	8003a6c <_strtod_l+0x444>
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	dd08      	ble.n	8003db2 <_strtod_l+0x78a>
 8003da0:	4632      	mov	r2, r6
 8003da2:	9904      	ldr	r1, [sp, #16]
 8003da4:	4658      	mov	r0, fp
 8003da6:	f001 fe8d 	bl	8005ac4 <__lshift>
 8003daa:	9004      	str	r0, [sp, #16]
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f43f ae5d 	beq.w	8003a6c <_strtod_l+0x444>
 8003db2:	9a06      	ldr	r2, [sp, #24]
 8003db4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003db6:	4658      	mov	r0, fp
 8003db8:	f001 fef2 	bl	8005ba0 <__mdiff>
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	f43f ae54 	beq.w	8003a6c <_strtod_l+0x444>
 8003dc4:	2400      	movs	r4, #0
 8003dc6:	68c3      	ldr	r3, [r0, #12]
 8003dc8:	9904      	ldr	r1, [sp, #16]
 8003dca:	60c4      	str	r4, [r0, #12]
 8003dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8003dce:	f001 fecd 	bl	8005b6c <__mcmp>
 8003dd2:	42a0      	cmp	r0, r4
 8003dd4:	da54      	bge.n	8003e80 <_strtod_l+0x858>
 8003dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dd8:	b9f3      	cbnz	r3, 8003e18 <_strtod_l+0x7f0>
 8003dda:	f1b9 0f00 	cmp.w	r9, #0
 8003dde:	d11b      	bne.n	8003e18 <_strtod_l+0x7f0>
 8003de0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8003de4:	b9c3      	cbnz	r3, 8003e18 <_strtod_l+0x7f0>
 8003de6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003dea:	0d1b      	lsrs	r3, r3, #20
 8003dec:	051b      	lsls	r3, r3, #20
 8003dee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003df2:	d911      	bls.n	8003e18 <_strtod_l+0x7f0>
 8003df4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003df8:	b91b      	cbnz	r3, 8003e02 <_strtod_l+0x7da>
 8003dfa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	dd0a      	ble.n	8003e18 <_strtod_l+0x7f0>
 8003e02:	4641      	mov	r1, r8
 8003e04:	2201      	movs	r2, #1
 8003e06:	4658      	mov	r0, fp
 8003e08:	f001 fe5c 	bl	8005ac4 <__lshift>
 8003e0c:	9904      	ldr	r1, [sp, #16]
 8003e0e:	4680      	mov	r8, r0
 8003e10:	f001 feac 	bl	8005b6c <__mcmp>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	dc68      	bgt.n	8003eea <_strtod_l+0x8c2>
 8003e18:	9b05      	ldr	r3, [sp, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d172      	bne.n	8003f04 <_strtod_l+0x8dc>
 8003e1e:	e630      	b.n	8003a82 <_strtod_l+0x45a>
 8003e20:	f018 0f01 	tst.w	r8, #1
 8003e24:	d004      	beq.n	8003e30 <_strtod_l+0x808>
 8003e26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e2a:	f7fc fb55 	bl	80004d8 <__aeabi_dmul>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003e34:	3508      	adds	r5, #8
 8003e36:	e6dc      	b.n	8003bf2 <_strtod_l+0x5ca>
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	ea03 0909 	and.w	r9, r3, r9
 8003e44:	e6f6      	b.n	8003c34 <_strtod_l+0x60c>
 8003e46:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003e4a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003e4e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8003e52:	35e2      	adds	r5, #226	; 0xe2
 8003e54:	fa07 f505 	lsl.w	r5, r7, r5
 8003e58:	970f      	str	r7, [sp, #60]	; 0x3c
 8003e5a:	e75c      	b.n	8003d16 <_strtod_l+0x6ee>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	2500      	movs	r5, #0
 8003e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e62:	e758      	b.n	8003d16 <_strtod_l+0x6ee>
 8003e64:	463a      	mov	r2, r7
 8003e66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003e68:	4658      	mov	r0, fp
 8003e6a:	f001 fe2b 	bl	8005ac4 <__lshift>
 8003e6e:	901c      	str	r0, [sp, #112]	; 0x70
 8003e70:	2800      	cmp	r0, #0
 8003e72:	f47f af7c 	bne.w	8003d6e <_strtod_l+0x746>
 8003e76:	e5f9      	b.n	8003a6c <_strtod_l+0x444>
 8003e78:	08006460 	.word	0x08006460
 8003e7c:	fffffc02 	.word	0xfffffc02
 8003e80:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003e84:	f040 8089 	bne.w	8003f9a <_strtod_l+0x972>
 8003e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e8a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8003e8e:	b342      	cbz	r2, 8003ee2 <_strtod_l+0x8ba>
 8003e90:	4aaf      	ldr	r2, [pc, #700]	; (8004150 <_strtod_l+0xb28>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d156      	bne.n	8003f44 <_strtod_l+0x91c>
 8003e96:	9b05      	ldr	r3, [sp, #20]
 8003e98:	4648      	mov	r0, r9
 8003e9a:	b1eb      	cbz	r3, 8003ed8 <_strtod_l+0x8b0>
 8003e9c:	4653      	mov	r3, sl
 8003e9e:	4aad      	ldr	r2, [pc, #692]	; (8004154 <_strtod_l+0xb2c>)
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003eaa:	d818      	bhi.n	8003ede <_strtod_l+0x8b6>
 8003eac:	0d12      	lsrs	r2, r2, #20
 8003eae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	4298      	cmp	r0, r3
 8003eb8:	d144      	bne.n	8003f44 <_strtod_l+0x91c>
 8003eba:	4ba7      	ldr	r3, [pc, #668]	; (8004158 <_strtod_l+0xb30>)
 8003ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d102      	bne.n	8003ec8 <_strtod_l+0x8a0>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	f43f add2 	beq.w	8003a6c <_strtod_l+0x444>
 8003ec8:	4ba2      	ldr	r3, [pc, #648]	; (8004154 <_strtod_l+0xb2c>)
 8003eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ecc:	f04f 0900 	mov.w	r9, #0
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8003ed6:	e79f      	b.n	8003e18 <_strtod_l+0x7f0>
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	e7eb      	b.n	8003eb6 <_strtod_l+0x88e>
 8003ede:	460b      	mov	r3, r1
 8003ee0:	e7e9      	b.n	8003eb6 <_strtod_l+0x88e>
 8003ee2:	bb7b      	cbnz	r3, 8003f44 <_strtod_l+0x91c>
 8003ee4:	f1b9 0f00 	cmp.w	r9, #0
 8003ee8:	d12c      	bne.n	8003f44 <_strtod_l+0x91c>
 8003eea:	9905      	ldr	r1, [sp, #20]
 8003eec:	4653      	mov	r3, sl
 8003eee:	4a99      	ldr	r2, [pc, #612]	; (8004154 <_strtod_l+0xb2c>)
 8003ef0:	b1f1      	cbz	r1, 8003f30 <_strtod_l+0x908>
 8003ef2:	ea02 010a 	and.w	r1, r2, sl
 8003ef6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003efa:	dc19      	bgt.n	8003f30 <_strtod_l+0x908>
 8003efc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003f00:	f77f ae51 	ble.w	8003ba6 <_strtod_l+0x57e>
 8003f04:	2300      	movs	r3, #0
 8003f06:	4a95      	ldr	r2, [pc, #596]	; (800415c <_strtod_l+0xb34>)
 8003f08:	4648      	mov	r0, r9
 8003f0a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003f0e:	4651      	mov	r1, sl
 8003f10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003f14:	f7fc fae0 	bl	80004d8 <__aeabi_dmul>
 8003f18:	4681      	mov	r9, r0
 8003f1a:	468a      	mov	sl, r1
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	f47f adb0 	bne.w	8003a82 <_strtod_l+0x45a>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f47f adad 	bne.w	8003a82 <_strtod_l+0x45a>
 8003f28:	2322      	movs	r3, #34	; 0x22
 8003f2a:	f8cb 3000 	str.w	r3, [fp]
 8003f2e:	e5a8      	b.n	8003a82 <_strtod_l+0x45a>
 8003f30:	4013      	ands	r3, r2
 8003f32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003f36:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8003f3a:	f04f 39ff 	mov.w	r9, #4294967295
 8003f3e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8003f42:	e769      	b.n	8003e18 <_strtod_l+0x7f0>
 8003f44:	b19d      	cbz	r5, 8003f6e <_strtod_l+0x946>
 8003f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f48:	421d      	tst	r5, r3
 8003f4a:	f43f af65 	beq.w	8003e18 <_strtod_l+0x7f0>
 8003f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f50:	9a05      	ldr	r2, [sp, #20]
 8003f52:	4648      	mov	r0, r9
 8003f54:	4651      	mov	r1, sl
 8003f56:	b173      	cbz	r3, 8003f76 <_strtod_l+0x94e>
 8003f58:	f7ff fb44 	bl	80035e4 <sulp>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f64:	f7fc f902 	bl	800016c <__adddf3>
 8003f68:	4681      	mov	r9, r0
 8003f6a:	468a      	mov	sl, r1
 8003f6c:	e754      	b.n	8003e18 <_strtod_l+0x7f0>
 8003f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f70:	ea13 0f09 	tst.w	r3, r9
 8003f74:	e7e9      	b.n	8003f4a <_strtod_l+0x922>
 8003f76:	f7ff fb35 	bl	80035e4 <sulp>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f82:	f7fc f8f1 	bl	8000168 <__aeabi_dsub>
 8003f86:	2200      	movs	r2, #0
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4681      	mov	r9, r0
 8003f8c:	468a      	mov	sl, r1
 8003f8e:	f7fc fd0b 	bl	80009a8 <__aeabi_dcmpeq>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	f47f ae07 	bne.w	8003ba6 <_strtod_l+0x57e>
 8003f98:	e73e      	b.n	8003e18 <_strtod_l+0x7f0>
 8003f9a:	9904      	ldr	r1, [sp, #16]
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	f001 ff22 	bl	8005de6 <__ratio>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fa8:	4606      	mov	r6, r0
 8003faa:	460f      	mov	r7, r1
 8003fac:	f7fc fd10 	bl	80009d0 <__aeabi_dcmple>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d075      	beq.n	80040a0 <_strtod_l+0xa78>
 8003fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d047      	beq.n	800404a <_strtod_l+0xa22>
 8003fba:	2600      	movs	r6, #0
 8003fbc:	4f68      	ldr	r7, [pc, #416]	; (8004160 <_strtod_l+0xb38>)
 8003fbe:	4d68      	ldr	r5, [pc, #416]	; (8004160 <_strtod_l+0xb38>)
 8003fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fc6:	0d1b      	lsrs	r3, r3, #20
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <_strtod_l+0xb3c>)
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	f040 80cf 	bne.w	8004174 <_strtod_l+0xb4c>
 8003fd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fda:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe0:	4648      	mov	r0, r9
 8003fe2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	f001 fe38 	bl	8005c5c <__ulp>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	4639      	mov	r1, r7
 8003ff4:	f7fc fa70 	bl	80004d8 <__aeabi_dmul>
 8003ff8:	464a      	mov	r2, r9
 8003ffa:	4653      	mov	r3, sl
 8003ffc:	f7fc f8b6 	bl	800016c <__adddf3>
 8004000:	460b      	mov	r3, r1
 8004002:	4954      	ldr	r1, [pc, #336]	; (8004154 <_strtod_l+0xb2c>)
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <_strtod_l+0xb40>)
 8004006:	4019      	ands	r1, r3
 8004008:	4291      	cmp	r1, r2
 800400a:	4681      	mov	r9, r0
 800400c:	d95e      	bls.n	80040cc <_strtod_l+0xaa4>
 800400e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004010:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <_strtod_l+0x9f8>
 8004018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800401a:	3301      	adds	r3, #1
 800401c:	f43f ad26 	beq.w	8003a6c <_strtod_l+0x444>
 8004020:	f04f 39ff 	mov.w	r9, #4294967295
 8004024:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004158 <_strtod_l+0xb30>
 8004028:	991c      	ldr	r1, [sp, #112]	; 0x70
 800402a:	4658      	mov	r0, fp
 800402c:	f001 fb7f 	bl	800572e <_Bfree>
 8004030:	9906      	ldr	r1, [sp, #24]
 8004032:	4658      	mov	r0, fp
 8004034:	f001 fb7b 	bl	800572e <_Bfree>
 8004038:	9904      	ldr	r1, [sp, #16]
 800403a:	4658      	mov	r0, fp
 800403c:	f001 fb77 	bl	800572e <_Bfree>
 8004040:	4641      	mov	r1, r8
 8004042:	4658      	mov	r0, fp
 8004044:	f001 fb73 	bl	800572e <_Bfree>
 8004048:	e617      	b.n	8003c7a <_strtod_l+0x652>
 800404a:	f1b9 0f00 	cmp.w	r9, #0
 800404e:	d119      	bne.n	8004084 <_strtod_l+0xa5c>
 8004050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004056:	b9e3      	cbnz	r3, 8004092 <_strtod_l+0xa6a>
 8004058:	2200      	movs	r2, #0
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <_strtod_l+0xb38>)
 800405c:	4630      	mov	r0, r6
 800405e:	4639      	mov	r1, r7
 8004060:	f7fc fcac 	bl	80009bc <__aeabi_dcmplt>
 8004064:	b9c8      	cbnz	r0, 800409a <_strtod_l+0xa72>
 8004066:	2200      	movs	r2, #0
 8004068:	4b40      	ldr	r3, [pc, #256]	; (800416c <_strtod_l+0xb44>)
 800406a:	4630      	mov	r0, r6
 800406c:	4639      	mov	r1, r7
 800406e:	f7fc fa33 	bl	80004d8 <__aeabi_dmul>
 8004072:	4604      	mov	r4, r0
 8004074:	460d      	mov	r5, r1
 8004076:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800407a:	9418      	str	r4, [sp, #96]	; 0x60
 800407c:	9319      	str	r3, [sp, #100]	; 0x64
 800407e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004082:	e79d      	b.n	8003fc0 <_strtod_l+0x998>
 8004084:	f1b9 0f01 	cmp.w	r9, #1
 8004088:	d103      	bne.n	8004092 <_strtod_l+0xa6a>
 800408a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f ad8a 	beq.w	8003ba6 <_strtod_l+0x57e>
 8004092:	2600      	movs	r6, #0
 8004094:	4f36      	ldr	r7, [pc, #216]	; (8004170 <_strtod_l+0xb48>)
 8004096:	2400      	movs	r4, #0
 8004098:	e791      	b.n	8003fbe <_strtod_l+0x996>
 800409a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800409c:	4d33      	ldr	r5, [pc, #204]	; (800416c <_strtod_l+0xb44>)
 800409e:	e7ea      	b.n	8004076 <_strtod_l+0xa4e>
 80040a0:	4b32      	ldr	r3, [pc, #200]	; (800416c <_strtod_l+0xb44>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	4630      	mov	r0, r6
 80040a6:	4639      	mov	r1, r7
 80040a8:	f7fc fa16 	bl	80004d8 <__aeabi_dmul>
 80040ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ae:	4604      	mov	r4, r0
 80040b0:	460d      	mov	r5, r1
 80040b2:	b933      	cbnz	r3, 80040c2 <_strtod_l+0xa9a>
 80040b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040b8:	9010      	str	r0, [sp, #64]	; 0x40
 80040ba:	9311      	str	r3, [sp, #68]	; 0x44
 80040bc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80040c0:	e77e      	b.n	8003fc0 <_strtod_l+0x998>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80040ca:	e7f7      	b.n	80040bc <_strtod_l+0xa94>
 80040cc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80040d0:	9b05      	ldr	r3, [sp, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1a8      	bne.n	8004028 <_strtod_l+0xa00>
 80040d6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80040da:	0d1b      	lsrs	r3, r3, #20
 80040dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040de:	051b      	lsls	r3, r3, #20
 80040e0:	429a      	cmp	r2, r3
 80040e2:	4656      	mov	r6, sl
 80040e4:	d1a0      	bne.n	8004028 <_strtod_l+0xa00>
 80040e6:	4629      	mov	r1, r5
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fc fca5 	bl	8000a38 <__aeabi_d2iz>
 80040ee:	f7fc f989 	bl	8000404 <__aeabi_i2d>
 80040f2:	460b      	mov	r3, r1
 80040f4:	4602      	mov	r2, r0
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7fc f835 	bl	8000168 <__aeabi_dsub>
 80040fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004100:	4604      	mov	r4, r0
 8004102:	460d      	mov	r5, r1
 8004104:	b933      	cbnz	r3, 8004114 <_strtod_l+0xaec>
 8004106:	f1b9 0f00 	cmp.w	r9, #0
 800410a:	d103      	bne.n	8004114 <_strtod_l+0xaec>
 800410c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004110:	2e00      	cmp	r6, #0
 8004112:	d06a      	beq.n	80041ea <_strtod_l+0xbc2>
 8004114:	a30a      	add	r3, pc, #40	; (adr r3, 8004140 <_strtod_l+0xb18>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	f7fc fc4d 	bl	80009bc <__aeabi_dcmplt>
 8004122:	2800      	cmp	r0, #0
 8004124:	f47f acad 	bne.w	8003a82 <_strtod_l+0x45a>
 8004128:	a307      	add	r3, pc, #28	; (adr r3, 8004148 <_strtod_l+0xb20>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	4620      	mov	r0, r4
 8004130:	4629      	mov	r1, r5
 8004132:	f7fc fc61 	bl	80009f8 <__aeabi_dcmpgt>
 8004136:	2800      	cmp	r0, #0
 8004138:	f43f af76 	beq.w	8004028 <_strtod_l+0xa00>
 800413c:	e4a1      	b.n	8003a82 <_strtod_l+0x45a>
 800413e:	bf00      	nop
 8004140:	94a03595 	.word	0x94a03595
 8004144:	3fdfffff 	.word	0x3fdfffff
 8004148:	35afe535 	.word	0x35afe535
 800414c:	3fe00000 	.word	0x3fe00000
 8004150:	000fffff 	.word	0x000fffff
 8004154:	7ff00000 	.word	0x7ff00000
 8004158:	7fefffff 	.word	0x7fefffff
 800415c:	39500000 	.word	0x39500000
 8004160:	3ff00000 	.word	0x3ff00000
 8004164:	7fe00000 	.word	0x7fe00000
 8004168:	7c9fffff 	.word	0x7c9fffff
 800416c:	3fe00000 	.word	0x3fe00000
 8004170:	bff00000 	.word	0xbff00000
 8004174:	9b05      	ldr	r3, [sp, #20]
 8004176:	b313      	cbz	r3, 80041be <_strtod_l+0xb96>
 8004178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800417a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800417e:	d81e      	bhi.n	80041be <_strtod_l+0xb96>
 8004180:	a325      	add	r3, pc, #148	; (adr r3, 8004218 <_strtod_l+0xbf0>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	4620      	mov	r0, r4
 8004188:	4629      	mov	r1, r5
 800418a:	f7fc fc21 	bl	80009d0 <__aeabi_dcmple>
 800418e:	b190      	cbz	r0, 80041b6 <_strtod_l+0xb8e>
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f7fc fc78 	bl	8000a88 <__aeabi_d2uiz>
 8004198:	2800      	cmp	r0, #0
 800419a:	bf08      	it	eq
 800419c:	2001      	moveq	r0, #1
 800419e:	f7fc f921 	bl	80003e4 <__aeabi_ui2d>
 80041a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041a4:	4604      	mov	r4, r0
 80041a6:	460d      	mov	r5, r1
 80041a8:	b9d3      	cbnz	r3, 80041e0 <_strtod_l+0xbb8>
 80041aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041ae:	9012      	str	r0, [sp, #72]	; 0x48
 80041b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80041b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80041b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041b8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80041bc:	1a9f      	subs	r7, r3, r2
 80041be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041c2:	f001 fd4b 	bl	8005c5c <__ulp>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4630      	mov	r0, r6
 80041cc:	4639      	mov	r1, r7
 80041ce:	f7fc f983 	bl	80004d8 <__aeabi_dmul>
 80041d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041d6:	f7fb ffc9 	bl	800016c <__adddf3>
 80041da:	4681      	mov	r9, r0
 80041dc:	468a      	mov	sl, r1
 80041de:	e777      	b.n	80040d0 <_strtod_l+0xaa8>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80041e8:	e7e3      	b.n	80041b2 <_strtod_l+0xb8a>
 80041ea:	a30d      	add	r3, pc, #52	; (adr r3, 8004220 <_strtod_l+0xbf8>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc fbe4 	bl	80009bc <__aeabi_dcmplt>
 80041f4:	e79f      	b.n	8004136 <_strtod_l+0xb0e>
 80041f6:	2300      	movs	r3, #0
 80041f8:	930d      	str	r3, [sp, #52]	; 0x34
 80041fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	f7ff ba55 	b.w	80036ae <_strtod_l+0x86>
 8004204:	2b65      	cmp	r3, #101	; 0x65
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f43f ab42 	beq.w	8003892 <_strtod_l+0x26a>
 800420e:	2101      	movs	r1, #1
 8004210:	4614      	mov	r4, r2
 8004212:	9105      	str	r1, [sp, #20]
 8004214:	f7ff babf 	b.w	8003796 <_strtod_l+0x16e>
 8004218:	ffc00000 	.word	0xffc00000
 800421c:	41dfffff 	.word	0x41dfffff
 8004220:	94a03595 	.word	0x94a03595
 8004224:	3fcfffff 	.word	0x3fcfffff

08004228 <_strtod_r>:
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_strtod_r+0x18>)
 800422a:	b410      	push	{r4}
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4c05      	ldr	r4, [pc, #20]	; (8004244 <_strtod_r+0x1c>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	2b00      	cmp	r3, #0
 8004234:	bf08      	it	eq
 8004236:	4623      	moveq	r3, r4
 8004238:	bc10      	pop	{r4}
 800423a:	f7ff b9f5 	b.w	8003628 <_strtod_l>
 800423e:	bf00      	nop
 8004240:	20000018 	.word	0x20000018
 8004244:	2000007c 	.word	0x2000007c

08004248 <_strtol_l.isra.0>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4680      	mov	r8, r0
 800424e:	4689      	mov	r9, r1
 8004250:	4692      	mov	sl, r2
 8004252:	461e      	mov	r6, r3
 8004254:	460f      	mov	r7, r1
 8004256:	463d      	mov	r5, r7
 8004258:	9808      	ldr	r0, [sp, #32]
 800425a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800425e:	f001 f9eb 	bl	8005638 <__locale_ctype_ptr_l>
 8004262:	4420      	add	r0, r4
 8004264:	7843      	ldrb	r3, [r0, #1]
 8004266:	f013 0308 	ands.w	r3, r3, #8
 800426a:	d132      	bne.n	80042d2 <_strtol_l.isra.0+0x8a>
 800426c:	2c2d      	cmp	r4, #45	; 0x2d
 800426e:	d132      	bne.n	80042d6 <_strtol_l.isra.0+0x8e>
 8004270:	2201      	movs	r2, #1
 8004272:	787c      	ldrb	r4, [r7, #1]
 8004274:	1cbd      	adds	r5, r7, #2
 8004276:	2e00      	cmp	r6, #0
 8004278:	d05d      	beq.n	8004336 <_strtol_l.isra.0+0xee>
 800427a:	2e10      	cmp	r6, #16
 800427c:	d109      	bne.n	8004292 <_strtol_l.isra.0+0x4a>
 800427e:	2c30      	cmp	r4, #48	; 0x30
 8004280:	d107      	bne.n	8004292 <_strtol_l.isra.0+0x4a>
 8004282:	782b      	ldrb	r3, [r5, #0]
 8004284:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004288:	2b58      	cmp	r3, #88	; 0x58
 800428a:	d14f      	bne.n	800432c <_strtol_l.isra.0+0xe4>
 800428c:	2610      	movs	r6, #16
 800428e:	786c      	ldrb	r4, [r5, #1]
 8004290:	3502      	adds	r5, #2
 8004292:	2a00      	cmp	r2, #0
 8004294:	bf14      	ite	ne
 8004296:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800429a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800429e:	2700      	movs	r7, #0
 80042a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80042a4:	4638      	mov	r0, r7
 80042a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80042aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d817      	bhi.n	80042e2 <_strtol_l.isra.0+0x9a>
 80042b2:	461c      	mov	r4, r3
 80042b4:	42a6      	cmp	r6, r4
 80042b6:	dd23      	ble.n	8004300 <_strtol_l.isra.0+0xb8>
 80042b8:	1c7b      	adds	r3, r7, #1
 80042ba:	d007      	beq.n	80042cc <_strtol_l.isra.0+0x84>
 80042bc:	4584      	cmp	ip, r0
 80042be:	d31c      	bcc.n	80042fa <_strtol_l.isra.0+0xb2>
 80042c0:	d101      	bne.n	80042c6 <_strtol_l.isra.0+0x7e>
 80042c2:	45a6      	cmp	lr, r4
 80042c4:	db19      	blt.n	80042fa <_strtol_l.isra.0+0xb2>
 80042c6:	2701      	movs	r7, #1
 80042c8:	fb00 4006 	mla	r0, r0, r6, r4
 80042cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042d0:	e7eb      	b.n	80042aa <_strtol_l.isra.0+0x62>
 80042d2:	462f      	mov	r7, r5
 80042d4:	e7bf      	b.n	8004256 <_strtol_l.isra.0+0xe>
 80042d6:	2c2b      	cmp	r4, #43	; 0x2b
 80042d8:	bf04      	itt	eq
 80042da:	1cbd      	addeq	r5, r7, #2
 80042dc:	787c      	ldrbeq	r4, [r7, #1]
 80042de:	461a      	mov	r2, r3
 80042e0:	e7c9      	b.n	8004276 <_strtol_l.isra.0+0x2e>
 80042e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80042e6:	2b19      	cmp	r3, #25
 80042e8:	d801      	bhi.n	80042ee <_strtol_l.isra.0+0xa6>
 80042ea:	3c37      	subs	r4, #55	; 0x37
 80042ec:	e7e2      	b.n	80042b4 <_strtol_l.isra.0+0x6c>
 80042ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80042f2:	2b19      	cmp	r3, #25
 80042f4:	d804      	bhi.n	8004300 <_strtol_l.isra.0+0xb8>
 80042f6:	3c57      	subs	r4, #87	; 0x57
 80042f8:	e7dc      	b.n	80042b4 <_strtol_l.isra.0+0x6c>
 80042fa:	f04f 37ff 	mov.w	r7, #4294967295
 80042fe:	e7e5      	b.n	80042cc <_strtol_l.isra.0+0x84>
 8004300:	1c7b      	adds	r3, r7, #1
 8004302:	d108      	bne.n	8004316 <_strtol_l.isra.0+0xce>
 8004304:	2322      	movs	r3, #34	; 0x22
 8004306:	4608      	mov	r0, r1
 8004308:	f8c8 3000 	str.w	r3, [r8]
 800430c:	f1ba 0f00 	cmp.w	sl, #0
 8004310:	d107      	bne.n	8004322 <_strtol_l.isra.0+0xda>
 8004312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004316:	b102      	cbz	r2, 800431a <_strtol_l.isra.0+0xd2>
 8004318:	4240      	negs	r0, r0
 800431a:	f1ba 0f00 	cmp.w	sl, #0
 800431e:	d0f8      	beq.n	8004312 <_strtol_l.isra.0+0xca>
 8004320:	b10f      	cbz	r7, 8004326 <_strtol_l.isra.0+0xde>
 8004322:	f105 39ff 	add.w	r9, r5, #4294967295
 8004326:	f8ca 9000 	str.w	r9, [sl]
 800432a:	e7f2      	b.n	8004312 <_strtol_l.isra.0+0xca>
 800432c:	2430      	movs	r4, #48	; 0x30
 800432e:	2e00      	cmp	r6, #0
 8004330:	d1af      	bne.n	8004292 <_strtol_l.isra.0+0x4a>
 8004332:	2608      	movs	r6, #8
 8004334:	e7ad      	b.n	8004292 <_strtol_l.isra.0+0x4a>
 8004336:	2c30      	cmp	r4, #48	; 0x30
 8004338:	d0a3      	beq.n	8004282 <_strtol_l.isra.0+0x3a>
 800433a:	260a      	movs	r6, #10
 800433c:	e7a9      	b.n	8004292 <_strtol_l.isra.0+0x4a>
	...

08004340 <_strtol_r>:
 8004340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004342:	4c06      	ldr	r4, [pc, #24]	; (800435c <_strtol_r+0x1c>)
 8004344:	4d06      	ldr	r5, [pc, #24]	; (8004360 <_strtol_r+0x20>)
 8004346:	6824      	ldr	r4, [r4, #0]
 8004348:	6a24      	ldr	r4, [r4, #32]
 800434a:	2c00      	cmp	r4, #0
 800434c:	bf08      	it	eq
 800434e:	462c      	moveq	r4, r5
 8004350:	9400      	str	r4, [sp, #0]
 8004352:	f7ff ff79 	bl	8004248 <_strtol_l.isra.0>
 8004356:	b003      	add	sp, #12
 8004358:	bd30      	pop	{r4, r5, pc}
 800435a:	bf00      	nop
 800435c:	20000018 	.word	0x20000018
 8004360:	2000007c 	.word	0x2000007c

08004364 <quorem>:
 8004364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	6903      	ldr	r3, [r0, #16]
 800436a:	690c      	ldr	r4, [r1, #16]
 800436c:	4680      	mov	r8, r0
 800436e:	42a3      	cmp	r3, r4
 8004370:	f2c0 8084 	blt.w	800447c <quorem+0x118>
 8004374:	3c01      	subs	r4, #1
 8004376:	f101 0714 	add.w	r7, r1, #20
 800437a:	f100 0614 	add.w	r6, r0, #20
 800437e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004382:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004386:	3501      	adds	r5, #1
 8004388:	fbb0 f5f5 	udiv	r5, r0, r5
 800438c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004390:	eb06 030c 	add.w	r3, r6, ip
 8004394:	eb07 090c 	add.w	r9, r7, ip
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	b39d      	cbz	r5, 8004404 <quorem+0xa0>
 800439c:	f04f 0a00 	mov.w	sl, #0
 80043a0:	4638      	mov	r0, r7
 80043a2:	46b6      	mov	lr, r6
 80043a4:	46d3      	mov	fp, sl
 80043a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80043aa:	b293      	uxth	r3, r2
 80043ac:	fb05 a303 	mla	r3, r5, r3, sl
 80043b0:	0c12      	lsrs	r2, r2, #16
 80043b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043b6:	fb05 a202 	mla	r2, r5, r2, sl
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ebab 0303 	sub.w	r3, fp, r3
 80043c0:	f8de b000 	ldr.w	fp, [lr]
 80043c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80043c8:	fa1f fb8b 	uxth.w	fp, fp
 80043cc:	445b      	add	r3, fp
 80043ce:	fa1f fb82 	uxth.w	fp, r2
 80043d2:	f8de 2000 	ldr.w	r2, [lr]
 80043d6:	4581      	cmp	r9, r0
 80043d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80043dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80043ea:	f84e 3b04 	str.w	r3, [lr], #4
 80043ee:	d2da      	bcs.n	80043a6 <quorem+0x42>
 80043f0:	f856 300c 	ldr.w	r3, [r6, ip]
 80043f4:	b933      	cbnz	r3, 8004404 <quorem+0xa0>
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	429e      	cmp	r6, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	d331      	bcc.n	8004464 <quorem+0x100>
 8004400:	f8c8 4010 	str.w	r4, [r8, #16]
 8004404:	4640      	mov	r0, r8
 8004406:	f001 fbb1 	bl	8005b6c <__mcmp>
 800440a:	2800      	cmp	r0, #0
 800440c:	db26      	blt.n	800445c <quorem+0xf8>
 800440e:	4630      	mov	r0, r6
 8004410:	f04f 0c00 	mov.w	ip, #0
 8004414:	3501      	adds	r5, #1
 8004416:	f857 1b04 	ldr.w	r1, [r7], #4
 800441a:	f8d0 e000 	ldr.w	lr, [r0]
 800441e:	b28b      	uxth	r3, r1
 8004420:	ebac 0303 	sub.w	r3, ip, r3
 8004424:	fa1f f28e 	uxth.w	r2, lr
 8004428:	4413      	add	r3, r2
 800442a:	0c0a      	lsrs	r2, r1, #16
 800442c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800443a:	45b9      	cmp	r9, r7
 800443c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004440:	f840 3b04 	str.w	r3, [r0], #4
 8004444:	d2e7      	bcs.n	8004416 <quorem+0xb2>
 8004446:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800444a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800444e:	b92a      	cbnz	r2, 800445c <quorem+0xf8>
 8004450:	3b04      	subs	r3, #4
 8004452:	429e      	cmp	r6, r3
 8004454:	461a      	mov	r2, r3
 8004456:	d30b      	bcc.n	8004470 <quorem+0x10c>
 8004458:	f8c8 4010 	str.w	r4, [r8, #16]
 800445c:	4628      	mov	r0, r5
 800445e:	b003      	add	sp, #12
 8004460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	3b04      	subs	r3, #4
 8004468:	2a00      	cmp	r2, #0
 800446a:	d1c9      	bne.n	8004400 <quorem+0x9c>
 800446c:	3c01      	subs	r4, #1
 800446e:	e7c4      	b.n	80043fa <quorem+0x96>
 8004470:	6812      	ldr	r2, [r2, #0]
 8004472:	3b04      	subs	r3, #4
 8004474:	2a00      	cmp	r2, #0
 8004476:	d1ef      	bne.n	8004458 <quorem+0xf4>
 8004478:	3c01      	subs	r4, #1
 800447a:	e7ea      	b.n	8004452 <quorem+0xee>
 800447c:	2000      	movs	r0, #0
 800447e:	e7ee      	b.n	800445e <quorem+0xfa>

08004480 <_dtoa_r>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	4616      	mov	r6, r2
 8004486:	461f      	mov	r7, r3
 8004488:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800448a:	b095      	sub	sp, #84	; 0x54
 800448c:	4604      	mov	r4, r0
 800448e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004492:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004496:	b93d      	cbnz	r5, 80044a8 <_dtoa_r+0x28>
 8004498:	2010      	movs	r0, #16
 800449a:	f001 f8e1 	bl	8005660 <malloc>
 800449e:	6260      	str	r0, [r4, #36]	; 0x24
 80044a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044a4:	6005      	str	r5, [r0, #0]
 80044a6:	60c5      	str	r5, [r0, #12]
 80044a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	b151      	cbz	r1, 80044c4 <_dtoa_r+0x44>
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	2301      	movs	r3, #1
 80044b2:	4093      	lsls	r3, r2
 80044b4:	604a      	str	r2, [r1, #4]
 80044b6:	608b      	str	r3, [r1, #8]
 80044b8:	4620      	mov	r0, r4
 80044ba:	f001 f938 	bl	800572e <_Bfree>
 80044be:	2200      	movs	r2, #0
 80044c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	1e3b      	subs	r3, r7, #0
 80044c6:	bfaf      	iteee	ge
 80044c8:	2300      	movge	r3, #0
 80044ca:	2201      	movlt	r2, #1
 80044cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80044d0:	9303      	strlt	r3, [sp, #12]
 80044d2:	bfac      	ite	ge
 80044d4:	f8c8 3000 	strge.w	r3, [r8]
 80044d8:	f8c8 2000 	strlt.w	r2, [r8]
 80044dc:	4bae      	ldr	r3, [pc, #696]	; (8004798 <_dtoa_r+0x318>)
 80044de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80044e2:	ea33 0308 	bics.w	r3, r3, r8
 80044e6:	d11b      	bne.n	8004520 <_dtoa_r+0xa0>
 80044e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80044ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	9b02      	ldr	r3, [sp, #8]
 80044f2:	b923      	cbnz	r3, 80044fe <_dtoa_r+0x7e>
 80044f4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f000 8545 	beq.w	8004f88 <_dtoa_r+0xb08>
 80044fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004500:	b953      	cbnz	r3, 8004518 <_dtoa_r+0x98>
 8004502:	4ba6      	ldr	r3, [pc, #664]	; (800479c <_dtoa_r+0x31c>)
 8004504:	e021      	b.n	800454a <_dtoa_r+0xca>
 8004506:	4ba6      	ldr	r3, [pc, #664]	; (80047a0 <_dtoa_r+0x320>)
 8004508:	9306      	str	r3, [sp, #24]
 800450a:	3308      	adds	r3, #8
 800450c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	9806      	ldr	r0, [sp, #24]
 8004512:	b015      	add	sp, #84	; 0x54
 8004514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004518:	4ba0      	ldr	r3, [pc, #640]	; (800479c <_dtoa_r+0x31c>)
 800451a:	9306      	str	r3, [sp, #24]
 800451c:	3303      	adds	r3, #3
 800451e:	e7f5      	b.n	800450c <_dtoa_r+0x8c>
 8004520:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	2300      	movs	r3, #0
 8004528:	4630      	mov	r0, r6
 800452a:	4639      	mov	r1, r7
 800452c:	f7fc fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004530:	4682      	mov	sl, r0
 8004532:	b160      	cbz	r0, 800454e <_dtoa_r+0xce>
 8004534:	2301      	movs	r3, #1
 8004536:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8520 	beq.w	8004f82 <_dtoa_r+0xb02>
 8004542:	4b98      	ldr	r3, [pc, #608]	; (80047a4 <_dtoa_r+0x324>)
 8004544:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	3b01      	subs	r3, #1
 800454a:	9306      	str	r3, [sp, #24]
 800454c:	e7e0      	b.n	8004510 <_dtoa_r+0x90>
 800454e:	ab12      	add	r3, sp, #72	; 0x48
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	ab13      	add	r3, sp, #76	; 0x4c
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4632      	mov	r2, r6
 8004558:	463b      	mov	r3, r7
 800455a:	4620      	mov	r0, r4
 800455c:	f001 fbf4 	bl	8005d48 <__d2b>
 8004560:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004564:	4683      	mov	fp, r0
 8004566:	2d00      	cmp	r5, #0
 8004568:	d07d      	beq.n	8004666 <_dtoa_r+0x1e6>
 800456a:	46b0      	mov	r8, r6
 800456c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004570:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004574:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004578:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800457c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004580:	2200      	movs	r2, #0
 8004582:	4b89      	ldr	r3, [pc, #548]	; (80047a8 <_dtoa_r+0x328>)
 8004584:	4640      	mov	r0, r8
 8004586:	4649      	mov	r1, r9
 8004588:	f7fb fdee 	bl	8000168 <__aeabi_dsub>
 800458c:	a37c      	add	r3, pc, #496	; (adr r3, 8004780 <_dtoa_r+0x300>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f7fb ffa1 	bl	80004d8 <__aeabi_dmul>
 8004596:	a37c      	add	r3, pc, #496	; (adr r3, 8004788 <_dtoa_r+0x308>)
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f7fb fde6 	bl	800016c <__adddf3>
 80045a0:	4606      	mov	r6, r0
 80045a2:	4628      	mov	r0, r5
 80045a4:	460f      	mov	r7, r1
 80045a6:	f7fb ff2d 	bl	8000404 <__aeabi_i2d>
 80045aa:	a379      	add	r3, pc, #484	; (adr r3, 8004790 <_dtoa_r+0x310>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fb ff92 	bl	80004d8 <__aeabi_dmul>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4630      	mov	r0, r6
 80045ba:	4639      	mov	r1, r7
 80045bc:	f7fb fdd6 	bl	800016c <__adddf3>
 80045c0:	4606      	mov	r6, r0
 80045c2:	460f      	mov	r7, r1
 80045c4:	f7fc fa38 	bl	8000a38 <__aeabi_d2iz>
 80045c8:	2200      	movs	r2, #0
 80045ca:	4682      	mov	sl, r0
 80045cc:	2300      	movs	r3, #0
 80045ce:	4630      	mov	r0, r6
 80045d0:	4639      	mov	r1, r7
 80045d2:	f7fc f9f3 	bl	80009bc <__aeabi_dcmplt>
 80045d6:	b148      	cbz	r0, 80045ec <_dtoa_r+0x16c>
 80045d8:	4650      	mov	r0, sl
 80045da:	f7fb ff13 	bl	8000404 <__aeabi_i2d>
 80045de:	4632      	mov	r2, r6
 80045e0:	463b      	mov	r3, r7
 80045e2:	f7fc f9e1 	bl	80009a8 <__aeabi_dcmpeq>
 80045e6:	b908      	cbnz	r0, 80045ec <_dtoa_r+0x16c>
 80045e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ec:	f1ba 0f16 	cmp.w	sl, #22
 80045f0:	d85a      	bhi.n	80046a8 <_dtoa_r+0x228>
 80045f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045f6:	496d      	ldr	r1, [pc, #436]	; (80047ac <_dtoa_r+0x32c>)
 80045f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80045fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004600:	f7fc f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8004604:	2800      	cmp	r0, #0
 8004606:	d051      	beq.n	80046ac <_dtoa_r+0x22c>
 8004608:	2300      	movs	r3, #0
 800460a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800460e:	930d      	str	r3, [sp, #52]	; 0x34
 8004610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004612:	1b5d      	subs	r5, r3, r5
 8004614:	1e6b      	subs	r3, r5, #1
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	bf43      	ittte	mi
 800461a:	2300      	movmi	r3, #0
 800461c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004620:	9307      	strmi	r3, [sp, #28]
 8004622:	f04f 0900 	movpl.w	r9, #0
 8004626:	f1ba 0f00 	cmp.w	sl, #0
 800462a:	db41      	blt.n	80046b0 <_dtoa_r+0x230>
 800462c:	9b07      	ldr	r3, [sp, #28]
 800462e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004632:	4453      	add	r3, sl
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	2300      	movs	r3, #0
 8004638:	9308      	str	r3, [sp, #32]
 800463a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800463c:	2b09      	cmp	r3, #9
 800463e:	f200 808f 	bhi.w	8004760 <_dtoa_r+0x2e0>
 8004642:	2b05      	cmp	r3, #5
 8004644:	bfc4      	itt	gt
 8004646:	3b04      	subgt	r3, #4
 8004648:	931e      	strgt	r3, [sp, #120]	; 0x78
 800464a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800464c:	bfc8      	it	gt
 800464e:	2500      	movgt	r5, #0
 8004650:	f1a3 0302 	sub.w	r3, r3, #2
 8004654:	bfd8      	it	le
 8004656:	2501      	movle	r5, #1
 8004658:	2b03      	cmp	r3, #3
 800465a:	f200 808d 	bhi.w	8004778 <_dtoa_r+0x2f8>
 800465e:	e8df f003 	tbb	[pc, r3]
 8004662:	7d7b      	.short	0x7d7b
 8004664:	6f2f      	.short	0x6f2f
 8004666:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800466a:	441d      	add	r5, r3
 800466c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004670:	2820      	cmp	r0, #32
 8004672:	dd13      	ble.n	800469c <_dtoa_r+0x21c>
 8004674:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	fa08 f800 	lsl.w	r8, r8, r0
 800467e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004682:	fa23 f000 	lsr.w	r0, r3, r0
 8004686:	ea48 0000 	orr.w	r0, r8, r0
 800468a:	f7fb feab 	bl	80003e4 <__aeabi_ui2d>
 800468e:	2301      	movs	r3, #1
 8004690:	4680      	mov	r8, r0
 8004692:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004696:	3d01      	subs	r5, #1
 8004698:	9310      	str	r3, [sp, #64]	; 0x40
 800469a:	e771      	b.n	8004580 <_dtoa_r+0x100>
 800469c:	9b02      	ldr	r3, [sp, #8]
 800469e:	f1c0 0020 	rsb	r0, r0, #32
 80046a2:	fa03 f000 	lsl.w	r0, r3, r0
 80046a6:	e7f0      	b.n	800468a <_dtoa_r+0x20a>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e7b0      	b.n	800460e <_dtoa_r+0x18e>
 80046ac:	900d      	str	r0, [sp, #52]	; 0x34
 80046ae:	e7af      	b.n	8004610 <_dtoa_r+0x190>
 80046b0:	f1ca 0300 	rsb	r3, sl, #0
 80046b4:	9308      	str	r3, [sp, #32]
 80046b6:	2300      	movs	r3, #0
 80046b8:	eba9 090a 	sub.w	r9, r9, sl
 80046bc:	930c      	str	r3, [sp, #48]	; 0x30
 80046be:	e7bc      	b.n	800463a <_dtoa_r+0x1ba>
 80046c0:	2301      	movs	r3, #1
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dd74      	ble.n	80047b4 <_dtoa_r+0x334>
 80046ca:	4698      	mov	r8, r3
 80046cc:	9304      	str	r3, [sp, #16]
 80046ce:	2200      	movs	r2, #0
 80046d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046d2:	6072      	str	r2, [r6, #4]
 80046d4:	2204      	movs	r2, #4
 80046d6:	f102 0014 	add.w	r0, r2, #20
 80046da:	4298      	cmp	r0, r3
 80046dc:	6871      	ldr	r1, [r6, #4]
 80046de:	d96e      	bls.n	80047be <_dtoa_r+0x33e>
 80046e0:	4620      	mov	r0, r4
 80046e2:	f000 fff0 	bl	80056c6 <_Balloc>
 80046e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e8:	6030      	str	r0, [r6, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b8 0f0e 	cmp.w	r8, #14
 80046f0:	9306      	str	r3, [sp, #24]
 80046f2:	f200 80ed 	bhi.w	80048d0 <_dtoa_r+0x450>
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	f000 80ea 	beq.w	80048d0 <_dtoa_r+0x450>
 80046fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004700:	f1ba 0f00 	cmp.w	sl, #0
 8004704:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004708:	dd77      	ble.n	80047fa <_dtoa_r+0x37a>
 800470a:	4a28      	ldr	r2, [pc, #160]	; (80047ac <_dtoa_r+0x32c>)
 800470c:	f00a 030f 	and.w	r3, sl, #15
 8004710:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004714:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004718:	06f0      	lsls	r0, r6, #27
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004722:	d568      	bpl.n	80047f6 <_dtoa_r+0x376>
 8004724:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004728:	4b21      	ldr	r3, [pc, #132]	; (80047b0 <_dtoa_r+0x330>)
 800472a:	2503      	movs	r5, #3
 800472c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004730:	f7fb fffc 	bl	800072c <__aeabi_ddiv>
 8004734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004738:	f006 060f 	and.w	r6, r6, #15
 800473c:	4f1c      	ldr	r7, [pc, #112]	; (80047b0 <_dtoa_r+0x330>)
 800473e:	e04f      	b.n	80047e0 <_dtoa_r+0x360>
 8004740:	2301      	movs	r3, #1
 8004742:	9309      	str	r3, [sp, #36]	; 0x24
 8004744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004746:	4453      	add	r3, sl
 8004748:	f103 0801 	add.w	r8, r3, #1
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	4643      	mov	r3, r8
 8004750:	2b01      	cmp	r3, #1
 8004752:	bfb8      	it	lt
 8004754:	2301      	movlt	r3, #1
 8004756:	e7ba      	b.n	80046ce <_dtoa_r+0x24e>
 8004758:	2300      	movs	r3, #0
 800475a:	e7b2      	b.n	80046c2 <_dtoa_r+0x242>
 800475c:	2300      	movs	r3, #0
 800475e:	e7f0      	b.n	8004742 <_dtoa_r+0x2c2>
 8004760:	2501      	movs	r5, #1
 8004762:	2300      	movs	r3, #0
 8004764:	9509      	str	r5, [sp, #36]	; 0x24
 8004766:	931e      	str	r3, [sp, #120]	; 0x78
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	2200      	movs	r2, #0
 800476e:	9304      	str	r3, [sp, #16]
 8004770:	4698      	mov	r8, r3
 8004772:	2312      	movs	r3, #18
 8004774:	921f      	str	r2, [sp, #124]	; 0x7c
 8004776:	e7aa      	b.n	80046ce <_dtoa_r+0x24e>
 8004778:	2301      	movs	r3, #1
 800477a:	9309      	str	r3, [sp, #36]	; 0x24
 800477c:	e7f4      	b.n	8004768 <_dtoa_r+0x2e8>
 800477e:	bf00      	nop
 8004780:	636f4361 	.word	0x636f4361
 8004784:	3fd287a7 	.word	0x3fd287a7
 8004788:	8b60c8b3 	.word	0x8b60c8b3
 800478c:	3fc68a28 	.word	0x3fc68a28
 8004790:	509f79fb 	.word	0x509f79fb
 8004794:	3fd34413 	.word	0x3fd34413
 8004798:	7ff00000 	.word	0x7ff00000
 800479c:	08006491 	.word	0x08006491
 80047a0:	08006488 	.word	0x08006488
 80047a4:	0800640d 	.word	0x0800640d
 80047a8:	3ff80000 	.word	0x3ff80000
 80047ac:	080064c8 	.word	0x080064c8
 80047b0:	080064a0 	.word	0x080064a0
 80047b4:	2301      	movs	r3, #1
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	4698      	mov	r8, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	e7da      	b.n	8004774 <_dtoa_r+0x2f4>
 80047be:	3101      	adds	r1, #1
 80047c0:	6071      	str	r1, [r6, #4]
 80047c2:	0052      	lsls	r2, r2, #1
 80047c4:	e787      	b.n	80046d6 <_dtoa_r+0x256>
 80047c6:	07f1      	lsls	r1, r6, #31
 80047c8:	d508      	bpl.n	80047dc <_dtoa_r+0x35c>
 80047ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80047ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d2:	f7fb fe81 	bl	80004d8 <__aeabi_dmul>
 80047d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047da:	3501      	adds	r5, #1
 80047dc:	1076      	asrs	r6, r6, #1
 80047de:	3708      	adds	r7, #8
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d1f0      	bne.n	80047c6 <_dtoa_r+0x346>
 80047e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ec:	f7fb ff9e 	bl	800072c <__aeabi_ddiv>
 80047f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f4:	e01b      	b.n	800482e <_dtoa_r+0x3ae>
 80047f6:	2502      	movs	r5, #2
 80047f8:	e7a0      	b.n	800473c <_dtoa_r+0x2bc>
 80047fa:	f000 80a4 	beq.w	8004946 <_dtoa_r+0x4c6>
 80047fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004802:	f1ca 0600 	rsb	r6, sl, #0
 8004806:	4ba0      	ldr	r3, [pc, #640]	; (8004a88 <_dtoa_r+0x608>)
 8004808:	f006 020f 	and.w	r2, r6, #15
 800480c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fe60 	bl	80004d8 <__aeabi_dmul>
 8004818:	2502      	movs	r5, #2
 800481a:	2300      	movs	r3, #0
 800481c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004820:	4f9a      	ldr	r7, [pc, #616]	; (8004a8c <_dtoa_r+0x60c>)
 8004822:	1136      	asrs	r6, r6, #4
 8004824:	2e00      	cmp	r6, #0
 8004826:	f040 8083 	bne.w	8004930 <_dtoa_r+0x4b0>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e0      	bne.n	80047f0 <_dtoa_r+0x370>
 800482e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 808a 	beq.w	800494a <_dtoa_r+0x4ca>
 8004836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800483a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800483e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004842:	2200      	movs	r2, #0
 8004844:	4b92      	ldr	r3, [pc, #584]	; (8004a90 <_dtoa_r+0x610>)
 8004846:	f7fc f8b9 	bl	80009bc <__aeabi_dcmplt>
 800484a:	2800      	cmp	r0, #0
 800484c:	d07d      	beq.n	800494a <_dtoa_r+0x4ca>
 800484e:	f1b8 0f00 	cmp.w	r8, #0
 8004852:	d07a      	beq.n	800494a <_dtoa_r+0x4ca>
 8004854:	9b04      	ldr	r3, [sp, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	dd36      	ble.n	80048c8 <_dtoa_r+0x448>
 800485a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800485e:	2200      	movs	r2, #0
 8004860:	4b8c      	ldr	r3, [pc, #560]	; (8004a94 <_dtoa_r+0x614>)
 8004862:	f7fb fe39 	bl	80004d8 <__aeabi_dmul>
 8004866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800486a:	9e04      	ldr	r6, [sp, #16]
 800486c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004870:	3501      	adds	r5, #1
 8004872:	4628      	mov	r0, r5
 8004874:	f7fb fdc6 	bl	8000404 <__aeabi_i2d>
 8004878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800487c:	f7fb fe2c 	bl	80004d8 <__aeabi_dmul>
 8004880:	2200      	movs	r2, #0
 8004882:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <_dtoa_r+0x618>)
 8004884:	f7fb fc72 	bl	800016c <__adddf3>
 8004888:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800488c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004890:	950b      	str	r5, [sp, #44]	; 0x2c
 8004892:	2e00      	cmp	r6, #0
 8004894:	d15c      	bne.n	8004950 <_dtoa_r+0x4d0>
 8004896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	4b7f      	ldr	r3, [pc, #508]	; (8004a9c <_dtoa_r+0x61c>)
 800489e:	f7fb fc63 	bl	8000168 <__aeabi_dsub>
 80048a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048a4:	462b      	mov	r3, r5
 80048a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048aa:	f7fc f8a5 	bl	80009f8 <__aeabi_dcmpgt>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f040 8281 	bne.w	8004db6 <_dtoa_r+0x936>
 80048b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80048be:	f7fc f87d 	bl	80009bc <__aeabi_dcmplt>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	f040 8275 	bne.w	8004db2 <_dtoa_r+0x932>
 80048c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80048cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f2c0 814b 	blt.w	8004b6e <_dtoa_r+0x6ee>
 80048d8:	f1ba 0f0e 	cmp.w	sl, #14
 80048dc:	f300 8147 	bgt.w	8004b6e <_dtoa_r+0x6ee>
 80048e0:	4b69      	ldr	r3, [pc, #420]	; (8004a88 <_dtoa_r+0x608>)
 80048e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f280 80d7 	bge.w	8004aa4 <_dtoa_r+0x624>
 80048f6:	f1b8 0f00 	cmp.w	r8, #0
 80048fa:	f300 80d3 	bgt.w	8004aa4 <_dtoa_r+0x624>
 80048fe:	f040 8257 	bne.w	8004db0 <_dtoa_r+0x930>
 8004902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004906:	2200      	movs	r2, #0
 8004908:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <_dtoa_r+0x61c>)
 800490a:	f7fb fde5 	bl	80004d8 <__aeabi_dmul>
 800490e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004912:	f7fc f867 	bl	80009e4 <__aeabi_dcmpge>
 8004916:	4646      	mov	r6, r8
 8004918:	4647      	mov	r7, r8
 800491a:	2800      	cmp	r0, #0
 800491c:	f040 822d 	bne.w	8004d7a <_dtoa_r+0x8fa>
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	9a06      	ldr	r2, [sp, #24]
 8004924:	1c5d      	adds	r5, r3, #1
 8004926:	2331      	movs	r3, #49	; 0x31
 8004928:	f10a 0a01 	add.w	sl, sl, #1
 800492c:	7013      	strb	r3, [r2, #0]
 800492e:	e228      	b.n	8004d82 <_dtoa_r+0x902>
 8004930:	07f2      	lsls	r2, r6, #31
 8004932:	d505      	bpl.n	8004940 <_dtoa_r+0x4c0>
 8004934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004938:	f7fb fdce 	bl	80004d8 <__aeabi_dmul>
 800493c:	2301      	movs	r3, #1
 800493e:	3501      	adds	r5, #1
 8004940:	1076      	asrs	r6, r6, #1
 8004942:	3708      	adds	r7, #8
 8004944:	e76e      	b.n	8004824 <_dtoa_r+0x3a4>
 8004946:	2502      	movs	r5, #2
 8004948:	e771      	b.n	800482e <_dtoa_r+0x3ae>
 800494a:	4657      	mov	r7, sl
 800494c:	4646      	mov	r6, r8
 800494e:	e790      	b.n	8004872 <_dtoa_r+0x3f2>
 8004950:	4b4d      	ldr	r3, [pc, #308]	; (8004a88 <_dtoa_r+0x608>)
 8004952:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004956:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800495a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d048      	beq.n	80049f2 <_dtoa_r+0x572>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	2000      	movs	r0, #0
 8004966:	494e      	ldr	r1, [pc, #312]	; (8004aa0 <_dtoa_r+0x620>)
 8004968:	f7fb fee0 	bl	800072c <__aeabi_ddiv>
 800496c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004970:	f7fb fbfa 	bl	8000168 <__aeabi_dsub>
 8004974:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004978:	9d06      	ldr	r5, [sp, #24]
 800497a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497e:	f7fc f85b 	bl	8000a38 <__aeabi_d2iz>
 8004982:	9011      	str	r0, [sp, #68]	; 0x44
 8004984:	f7fb fd3e 	bl	8000404 <__aeabi_i2d>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004990:	f7fb fbea 	bl	8000168 <__aeabi_dsub>
 8004994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800499a:	3330      	adds	r3, #48	; 0x30
 800499c:	f805 3b01 	strb.w	r3, [r5], #1
 80049a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049a4:	f7fc f80a 	bl	80009bc <__aeabi_dcmplt>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d163      	bne.n	8004a74 <_dtoa_r+0x5f4>
 80049ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049b0:	2000      	movs	r0, #0
 80049b2:	4937      	ldr	r1, [pc, #220]	; (8004a90 <_dtoa_r+0x610>)
 80049b4:	f7fb fbd8 	bl	8000168 <__aeabi_dsub>
 80049b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049bc:	f7fb fffe 	bl	80009bc <__aeabi_dcmplt>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f040 80b5 	bne.w	8004b30 <_dtoa_r+0x6b0>
 80049c6:	9b06      	ldr	r3, [sp, #24]
 80049c8:	1aeb      	subs	r3, r5, r3
 80049ca:	429e      	cmp	r6, r3
 80049cc:	f77f af7c 	ble.w	80048c8 <_dtoa_r+0x448>
 80049d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049d4:	2200      	movs	r2, #0
 80049d6:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <_dtoa_r+0x614>)
 80049d8:	f7fb fd7e 	bl	80004d8 <__aeabi_dmul>
 80049dc:	2200      	movs	r2, #0
 80049de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80049e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049e6:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <_dtoa_r+0x614>)
 80049e8:	f7fb fd76 	bl	80004d8 <__aeabi_dmul>
 80049ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f0:	e7c3      	b.n	800497a <_dtoa_r+0x4fa>
 80049f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80049f6:	f7fb fd6f 	bl	80004d8 <__aeabi_dmul>
 80049fa:	9b06      	ldr	r3, [sp, #24]
 80049fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a00:	199d      	adds	r5, r3, r6
 8004a02:	461e      	mov	r6, r3
 8004a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a08:	f7fc f816 	bl	8000a38 <__aeabi_d2iz>
 8004a0c:	9011      	str	r0, [sp, #68]	; 0x44
 8004a0e:	f7fb fcf9 	bl	8000404 <__aeabi_i2d>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1a:	f7fb fba5 	bl	8000168 <__aeabi_dsub>
 8004a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a24:	3330      	adds	r3, #48	; 0x30
 8004a26:	f806 3b01 	strb.w	r3, [r6], #1
 8004a2a:	42ae      	cmp	r6, r5
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	d124      	bne.n	8004a7c <_dtoa_r+0x5fc>
 8004a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <_dtoa_r+0x620>)
 8004a38:	f7fb fb98 	bl	800016c <__adddf3>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a44:	f7fb ffd8 	bl	80009f8 <__aeabi_dcmpgt>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d171      	bne.n	8004b30 <_dtoa_r+0x6b0>
 8004a4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a50:	2000      	movs	r0, #0
 8004a52:	4913      	ldr	r1, [pc, #76]	; (8004aa0 <_dtoa_r+0x620>)
 8004a54:	f7fb fb88 	bl	8000168 <__aeabi_dsub>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a60:	f7fb ffac 	bl	80009bc <__aeabi_dcmplt>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	f43f af2f 	beq.w	80048c8 <_dtoa_r+0x448>
 8004a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a6e:	1e6a      	subs	r2, r5, #1
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d001      	beq.n	8004a78 <_dtoa_r+0x5f8>
 8004a74:	46ba      	mov	sl, r7
 8004a76:	e04a      	b.n	8004b0e <_dtoa_r+0x68e>
 8004a78:	4615      	mov	r5, r2
 8004a7a:	e7f6      	b.n	8004a6a <_dtoa_r+0x5ea>
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <_dtoa_r+0x614>)
 8004a7e:	f7fb fd2b 	bl	80004d8 <__aeabi_dmul>
 8004a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a86:	e7bd      	b.n	8004a04 <_dtoa_r+0x584>
 8004a88:	080064c8 	.word	0x080064c8
 8004a8c:	080064a0 	.word	0x080064a0
 8004a90:	3ff00000 	.word	0x3ff00000
 8004a94:	40240000 	.word	0x40240000
 8004a98:	401c0000 	.word	0x401c0000
 8004a9c:	40140000 	.word	0x40140000
 8004aa0:	3fe00000 	.word	0x3fe00000
 8004aa4:	9d06      	ldr	r5, [sp, #24]
 8004aa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aae:	4630      	mov	r0, r6
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fb fe3b 	bl	800072c <__aeabi_ddiv>
 8004ab6:	f7fb ffbf 	bl	8000a38 <__aeabi_d2iz>
 8004aba:	4681      	mov	r9, r0
 8004abc:	f7fb fca2 	bl	8000404 <__aeabi_i2d>
 8004ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac4:	f7fb fd08 	bl	80004d8 <__aeabi_dmul>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4630      	mov	r0, r6
 8004ace:	4639      	mov	r1, r7
 8004ad0:	f7fb fb4a 	bl	8000168 <__aeabi_dsub>
 8004ad4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8004adc:	9e06      	ldr	r6, [sp, #24]
 8004ade:	4602      	mov	r2, r0
 8004ae0:	1bae      	subs	r6, r5, r6
 8004ae2:	45b0      	cmp	r8, r6
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	d135      	bne.n	8004b54 <_dtoa_r+0x6d4>
 8004ae8:	f7fb fb40 	bl	800016c <__adddf3>
 8004aec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	f7fb ff80 	bl	80009f8 <__aeabi_dcmpgt>
 8004af8:	b9c8      	cbnz	r0, 8004b2e <_dtoa_r+0x6ae>
 8004afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afe:	4630      	mov	r0, r6
 8004b00:	4639      	mov	r1, r7
 8004b02:	f7fb ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8004b06:	b110      	cbz	r0, 8004b0e <_dtoa_r+0x68e>
 8004b08:	f019 0f01 	tst.w	r9, #1
 8004b0c:	d10f      	bne.n	8004b2e <_dtoa_r+0x6ae>
 8004b0e:	4659      	mov	r1, fp
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fe0c 	bl	800572e <_Bfree>
 8004b16:	2300      	movs	r3, #0
 8004b18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b1a:	702b      	strb	r3, [r5, #0]
 8004b1c:	f10a 0301 	add.w	r3, sl, #1
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f43f acf3 	beq.w	8004510 <_dtoa_r+0x90>
 8004b2a:	601d      	str	r5, [r3, #0]
 8004b2c:	e4f0      	b.n	8004510 <_dtoa_r+0x90>
 8004b2e:	4657      	mov	r7, sl
 8004b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b34:	1e6b      	subs	r3, r5, #1
 8004b36:	2a39      	cmp	r2, #57	; 0x39
 8004b38:	d106      	bne.n	8004b48 <_dtoa_r+0x6c8>
 8004b3a:	9a06      	ldr	r2, [sp, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d107      	bne.n	8004b50 <_dtoa_r+0x6d0>
 8004b40:	2330      	movs	r3, #48	; 0x30
 8004b42:	7013      	strb	r3, [r2, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	3701      	adds	r7, #1
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	3201      	adds	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e791      	b.n	8004a74 <_dtoa_r+0x5f4>
 8004b50:	461d      	mov	r5, r3
 8004b52:	e7ed      	b.n	8004b30 <_dtoa_r+0x6b0>
 8004b54:	2200      	movs	r2, #0
 8004b56:	4b99      	ldr	r3, [pc, #612]	; (8004dbc <_dtoa_r+0x93c>)
 8004b58:	f7fb fcbe 	bl	80004d8 <__aeabi_dmul>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4606      	mov	r6, r0
 8004b62:	460f      	mov	r7, r1
 8004b64:	f7fb ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d09e      	beq.n	8004aaa <_dtoa_r+0x62a>
 8004b6c:	e7cf      	b.n	8004b0e <_dtoa_r+0x68e>
 8004b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	f000 8088 	beq.w	8004c86 <_dtoa_r+0x806>
 8004b76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b78:	2a01      	cmp	r2, #1
 8004b7a:	dc6d      	bgt.n	8004c58 <_dtoa_r+0x7d8>
 8004b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	d066      	beq.n	8004c50 <_dtoa_r+0x7d0>
 8004b82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b86:	464d      	mov	r5, r9
 8004b88:	9e08      	ldr	r6, [sp, #32]
 8004b8a:	9a07      	ldr	r2, [sp, #28]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	441a      	add	r2, r3
 8004b90:	4620      	mov	r0, r4
 8004b92:	4499      	add	r9, r3
 8004b94:	9207      	str	r2, [sp, #28]
 8004b96:	f000 fea8 	bl	80058ea <__i2b>
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	2d00      	cmp	r5, #0
 8004b9e:	dd0b      	ble.n	8004bb8 <_dtoa_r+0x738>
 8004ba0:	9b07      	ldr	r3, [sp, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dd08      	ble.n	8004bb8 <_dtoa_r+0x738>
 8004ba6:	42ab      	cmp	r3, r5
 8004ba8:	bfa8      	it	ge
 8004baa:	462b      	movge	r3, r5
 8004bac:	9a07      	ldr	r2, [sp, #28]
 8004bae:	eba9 0903 	sub.w	r9, r9, r3
 8004bb2:	1aed      	subs	r5, r5, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	9b08      	ldr	r3, [sp, #32]
 8004bba:	b1eb      	cbz	r3, 8004bf8 <_dtoa_r+0x778>
 8004bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d065      	beq.n	8004c8e <_dtoa_r+0x80e>
 8004bc2:	b18e      	cbz	r6, 8004be8 <_dtoa_r+0x768>
 8004bc4:	4639      	mov	r1, r7
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 ff2d 	bl	8005a28 <__pow5mult>
 8004bce:	465a      	mov	r2, fp
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f000 fe91 	bl	80058fc <__multiply>
 8004bda:	4659      	mov	r1, fp
 8004bdc:	900a      	str	r0, [sp, #40]	; 0x28
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 fda5 	bl	800572e <_Bfree>
 8004be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be6:	469b      	mov	fp, r3
 8004be8:	9b08      	ldr	r3, [sp, #32]
 8004bea:	1b9a      	subs	r2, r3, r6
 8004bec:	d004      	beq.n	8004bf8 <_dtoa_r+0x778>
 8004bee:	4659      	mov	r1, fp
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f000 ff19 	bl	8005a28 <__pow5mult>
 8004bf6:	4683      	mov	fp, r0
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fe75 	bl	80058ea <__i2b>
 8004c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c02:	4606      	mov	r6, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 81c6 	beq.w	8004f96 <_dtoa_r+0xb16>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 ff0a 	bl	8005a28 <__pow5mult>
 8004c14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004c16:	4606      	mov	r6, r0
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	dc3e      	bgt.n	8004c9a <_dtoa_r+0x81a>
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d137      	bne.n	8004c92 <_dtoa_r+0x812>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d134      	bne.n	8004c96 <_dtoa_r+0x816>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	0d1b      	lsrs	r3, r3, #20
 8004c34:	051b      	lsls	r3, r3, #20
 8004c36:	b12b      	cbz	r3, 8004c44 <_dtoa_r+0x7c4>
 8004c38:	9b07      	ldr	r3, [sp, #28]
 8004c3a:	f109 0901 	add.w	r9, r9, #1
 8004c3e:	3301      	adds	r3, #1
 8004c40:	9307      	str	r3, [sp, #28]
 8004c42:	2301      	movs	r3, #1
 8004c44:	9308      	str	r3, [sp, #32]
 8004c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d128      	bne.n	8004c9e <_dtoa_r+0x81e>
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	e02e      	b.n	8004cae <_dtoa_r+0x82e>
 8004c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c56:	e796      	b.n	8004b86 <_dtoa_r+0x706>
 8004c58:	9b08      	ldr	r3, [sp, #32]
 8004c5a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004c5e:	42b3      	cmp	r3, r6
 8004c60:	bfb7      	itett	lt
 8004c62:	9b08      	ldrlt	r3, [sp, #32]
 8004c64:	1b9e      	subge	r6, r3, r6
 8004c66:	1af2      	sublt	r2, r6, r3
 8004c68:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004c6a:	bfbf      	itttt	lt
 8004c6c:	9608      	strlt	r6, [sp, #32]
 8004c6e:	189b      	addlt	r3, r3, r2
 8004c70:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004c72:	2600      	movlt	r6, #0
 8004c74:	f1b8 0f00 	cmp.w	r8, #0
 8004c78:	bfb9      	ittee	lt
 8004c7a:	eba9 0508 	sublt.w	r5, r9, r8
 8004c7e:	2300      	movlt	r3, #0
 8004c80:	464d      	movge	r5, r9
 8004c82:	4643      	movge	r3, r8
 8004c84:	e781      	b.n	8004b8a <_dtoa_r+0x70a>
 8004c86:	9e08      	ldr	r6, [sp, #32]
 8004c88:	464d      	mov	r5, r9
 8004c8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004c8c:	e786      	b.n	8004b9c <_dtoa_r+0x71c>
 8004c8e:	9a08      	ldr	r2, [sp, #32]
 8004c90:	e7ad      	b.n	8004bee <_dtoa_r+0x76e>
 8004c92:	2300      	movs	r3, #0
 8004c94:	e7d6      	b.n	8004c44 <_dtoa_r+0x7c4>
 8004c96:	9b02      	ldr	r3, [sp, #8]
 8004c98:	e7d4      	b.n	8004c44 <_dtoa_r+0x7c4>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9308      	str	r3, [sp, #32]
 8004c9e:	6933      	ldr	r3, [r6, #16]
 8004ca0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ca4:	6918      	ldr	r0, [r3, #16]
 8004ca6:	f000 fdd2 	bl	800584e <__hi0bits>
 8004caa:	f1c0 0020 	rsb	r0, r0, #32
 8004cae:	9b07      	ldr	r3, [sp, #28]
 8004cb0:	4418      	add	r0, r3
 8004cb2:	f010 001f 	ands.w	r0, r0, #31
 8004cb6:	d047      	beq.n	8004d48 <_dtoa_r+0x8c8>
 8004cb8:	f1c0 0320 	rsb	r3, r0, #32
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	dd3b      	ble.n	8004d38 <_dtoa_r+0x8b8>
 8004cc0:	9b07      	ldr	r3, [sp, #28]
 8004cc2:	f1c0 001c 	rsb	r0, r0, #28
 8004cc6:	4481      	add	r9, r0
 8004cc8:	4405      	add	r5, r0
 8004cca:	4403      	add	r3, r0
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	f1b9 0f00 	cmp.w	r9, #0
 8004cd2:	dd05      	ble.n	8004ce0 <_dtoa_r+0x860>
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	464a      	mov	r2, r9
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 fef3 	bl	8005ac4 <__lshift>
 8004cde:	4683      	mov	fp, r0
 8004ce0:	9b07      	ldr	r3, [sp, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dd05      	ble.n	8004cf2 <_dtoa_r+0x872>
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 feea 	bl	8005ac4 <__lshift>
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf4:	b353      	cbz	r3, 8004d4c <_dtoa_r+0x8cc>
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	f000 ff37 	bl	8005b6c <__mcmp>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	da24      	bge.n	8004d4c <_dtoa_r+0x8cc>
 8004d02:	2300      	movs	r3, #0
 8004d04:	4659      	mov	r1, fp
 8004d06:	220a      	movs	r2, #10
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fd27 	bl	800575c <__multadd>
 8004d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d14:	4683      	mov	fp, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8144 	beq.w	8004fa4 <_dtoa_r+0xb24>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4639      	mov	r1, r7
 8004d20:	220a      	movs	r2, #10
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 fd1a 	bl	800575c <__multadd>
 8004d28:	9b04      	ldr	r3, [sp, #16]
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dc4d      	bgt.n	8004dcc <_dtoa_r+0x94c>
 8004d30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	dd4a      	ble.n	8004dcc <_dtoa_r+0x94c>
 8004d36:	e011      	b.n	8004d5c <_dtoa_r+0x8dc>
 8004d38:	d0c9      	beq.n	8004cce <_dtoa_r+0x84e>
 8004d3a:	9a07      	ldr	r2, [sp, #28]
 8004d3c:	331c      	adds	r3, #28
 8004d3e:	441a      	add	r2, r3
 8004d40:	4499      	add	r9, r3
 8004d42:	441d      	add	r5, r3
 8004d44:	4613      	mov	r3, r2
 8004d46:	e7c1      	b.n	8004ccc <_dtoa_r+0x84c>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e7f6      	b.n	8004d3a <_dtoa_r+0x8ba>
 8004d4c:	f1b8 0f00 	cmp.w	r8, #0
 8004d50:	dc36      	bgt.n	8004dc0 <_dtoa_r+0x940>
 8004d52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	dd33      	ble.n	8004dc0 <_dtoa_r+0x940>
 8004d58:	f8cd 8010 	str.w	r8, [sp, #16]
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	b963      	cbnz	r3, 8004d7a <_dtoa_r+0x8fa>
 8004d60:	4631      	mov	r1, r6
 8004d62:	2205      	movs	r2, #5
 8004d64:	4620      	mov	r0, r4
 8004d66:	f000 fcf9 	bl	800575c <__multadd>
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	4658      	mov	r0, fp
 8004d70:	f000 fefc 	bl	8005b6c <__mcmp>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f73f add3 	bgt.w	8004920 <_dtoa_r+0x4a0>
 8004d7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d7c:	9d06      	ldr	r5, [sp, #24]
 8004d7e:	ea6f 0a03 	mvn.w	sl, r3
 8004d82:	f04f 0900 	mov.w	r9, #0
 8004d86:	4631      	mov	r1, r6
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f000 fcd0 	bl	800572e <_Bfree>
 8004d8e:	2f00      	cmp	r7, #0
 8004d90:	f43f aebd 	beq.w	8004b0e <_dtoa_r+0x68e>
 8004d94:	f1b9 0f00 	cmp.w	r9, #0
 8004d98:	d005      	beq.n	8004da6 <_dtoa_r+0x926>
 8004d9a:	45b9      	cmp	r9, r7
 8004d9c:	d003      	beq.n	8004da6 <_dtoa_r+0x926>
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 fcc4 	bl	800572e <_Bfree>
 8004da6:	4639      	mov	r1, r7
 8004da8:	4620      	mov	r0, r4
 8004daa:	f000 fcc0 	bl	800572e <_Bfree>
 8004dae:	e6ae      	b.n	8004b0e <_dtoa_r+0x68e>
 8004db0:	2600      	movs	r6, #0
 8004db2:	4637      	mov	r7, r6
 8004db4:	e7e1      	b.n	8004d7a <_dtoa_r+0x8fa>
 8004db6:	46ba      	mov	sl, r7
 8004db8:	4637      	mov	r7, r6
 8004dba:	e5b1      	b.n	8004920 <_dtoa_r+0x4a0>
 8004dbc:	40240000 	.word	0x40240000
 8004dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc2:	f8cd 8010 	str.w	r8, [sp, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80f3 	beq.w	8004fb2 <_dtoa_r+0xb32>
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	dd05      	ble.n	8004ddc <_dtoa_r+0x95c>
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	462a      	mov	r2, r5
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 fe75 	bl	8005ac4 <__lshift>
 8004dda:	4607      	mov	r7, r0
 8004ddc:	9b08      	ldr	r3, [sp, #32]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04c      	beq.n	8004e7c <_dtoa_r+0x9fc>
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 fc6e 	bl	80056c6 <_Balloc>
 8004dea:	4605      	mov	r5, r0
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	f107 010c 	add.w	r1, r7, #12
 8004df2:	3202      	adds	r2, #2
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	300c      	adds	r0, #12
 8004df8:	f000 fc5a 	bl	80056b0 <memcpy>
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 fe5f 	bl	8005ac4 <__lshift>
 8004e06:	46b9      	mov	r9, r7
 8004e08:	4607      	mov	r7, r0
 8004e0a:	9b06      	ldr	r3, [sp, #24]
 8004e0c:	9307      	str	r3, [sp, #28]
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	4631      	mov	r1, r6
 8004e18:	4658      	mov	r0, fp
 8004e1a:	f7ff faa3 	bl	8004364 <quorem>
 8004e1e:	4649      	mov	r1, r9
 8004e20:	4605      	mov	r5, r0
 8004e22:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004e26:	4658      	mov	r0, fp
 8004e28:	f000 fea0 	bl	8005b6c <__mcmp>
 8004e2c:	463a      	mov	r2, r7
 8004e2e:	9002      	str	r0, [sp, #8]
 8004e30:	4631      	mov	r1, r6
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 feb4 	bl	8005ba0 <__mdiff>
 8004e38:	68c3      	ldr	r3, [r0, #12]
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	bb03      	cbnz	r3, 8004e80 <_dtoa_r+0xa00>
 8004e3e:	4601      	mov	r1, r0
 8004e40:	9009      	str	r0, [sp, #36]	; 0x24
 8004e42:	4658      	mov	r0, fp
 8004e44:	f000 fe92 	bl	8005b6c <__mcmp>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4620      	mov	r0, r4
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	f000 fc6c 	bl	800572e <_Bfree>
 8004e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e58:	b9a3      	cbnz	r3, 8004e84 <_dtoa_r+0xa04>
 8004e5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e5c:	b992      	cbnz	r2, 8004e84 <_dtoa_r+0xa04>
 8004e5e:	9a08      	ldr	r2, [sp, #32]
 8004e60:	b982      	cbnz	r2, 8004e84 <_dtoa_r+0xa04>
 8004e62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004e66:	d029      	beq.n	8004ebc <_dtoa_r+0xa3c>
 8004e68:	9b02      	ldr	r3, [sp, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd01      	ble.n	8004e72 <_dtoa_r+0x9f2>
 8004e6e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004e72:	9b07      	ldr	r3, [sp, #28]
 8004e74:	1c5d      	adds	r5, r3, #1
 8004e76:	f883 8000 	strb.w	r8, [r3]
 8004e7a:	e784      	b.n	8004d86 <_dtoa_r+0x906>
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	e7c2      	b.n	8004e06 <_dtoa_r+0x986>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e7e3      	b.n	8004e4c <_dtoa_r+0x9cc>
 8004e84:	9a02      	ldr	r2, [sp, #8]
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	db04      	blt.n	8004e94 <_dtoa_r+0xa14>
 8004e8a:	d123      	bne.n	8004ed4 <_dtoa_r+0xa54>
 8004e8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004e8e:	bb0a      	cbnz	r2, 8004ed4 <_dtoa_r+0xa54>
 8004e90:	9a08      	ldr	r2, [sp, #32]
 8004e92:	b9fa      	cbnz	r2, 8004ed4 <_dtoa_r+0xa54>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	ddec      	ble.n	8004e72 <_dtoa_r+0x9f2>
 8004e98:	4659      	mov	r1, fp
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 fe11 	bl	8005ac4 <__lshift>
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4683      	mov	fp, r0
 8004ea6:	f000 fe61 	bl	8005b6c <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	dc03      	bgt.n	8004eb6 <_dtoa_r+0xa36>
 8004eae:	d1e0      	bne.n	8004e72 <_dtoa_r+0x9f2>
 8004eb0:	f018 0f01 	tst.w	r8, #1
 8004eb4:	d0dd      	beq.n	8004e72 <_dtoa_r+0x9f2>
 8004eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004eba:	d1d8      	bne.n	8004e6e <_dtoa_r+0x9ee>
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	9a07      	ldr	r2, [sp, #28]
 8004ec0:	1c5d      	adds	r5, r3, #1
 8004ec2:	2339      	movs	r3, #57	; 0x39
 8004ec4:	7013      	strb	r3, [r2, #0]
 8004ec6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004eca:	1e6a      	subs	r2, r5, #1
 8004ecc:	2b39      	cmp	r3, #57	; 0x39
 8004ece:	d04d      	beq.n	8004f6c <_dtoa_r+0xaec>
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	e052      	b.n	8004f7a <_dtoa_r+0xafa>
 8004ed4:	9a07      	ldr	r2, [sp, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f102 0501 	add.w	r5, r2, #1
 8004edc:	dd06      	ble.n	8004eec <_dtoa_r+0xa6c>
 8004ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ee2:	d0eb      	beq.n	8004ebc <_dtoa_r+0xa3c>
 8004ee4:	f108 0801 	add.w	r8, r8, #1
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	e7c4      	b.n	8004e76 <_dtoa_r+0x9f6>
 8004eec:	9b06      	ldr	r3, [sp, #24]
 8004eee:	9a04      	ldr	r2, [sp, #16]
 8004ef0:	1aeb      	subs	r3, r5, r3
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004ef8:	d021      	beq.n	8004f3e <_dtoa_r+0xabe>
 8004efa:	4659      	mov	r1, fp
 8004efc:	2300      	movs	r3, #0
 8004efe:	220a      	movs	r2, #10
 8004f00:	4620      	mov	r0, r4
 8004f02:	f000 fc2b 	bl	800575c <__multadd>
 8004f06:	45b9      	cmp	r9, r7
 8004f08:	4683      	mov	fp, r0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	f04f 020a 	mov.w	r2, #10
 8004f12:	4649      	mov	r1, r9
 8004f14:	4620      	mov	r0, r4
 8004f16:	d105      	bne.n	8004f24 <_dtoa_r+0xaa4>
 8004f18:	f000 fc20 	bl	800575c <__multadd>
 8004f1c:	4681      	mov	r9, r0
 8004f1e:	4607      	mov	r7, r0
 8004f20:	9507      	str	r5, [sp, #28]
 8004f22:	e778      	b.n	8004e16 <_dtoa_r+0x996>
 8004f24:	f000 fc1a 	bl	800575c <__multadd>
 8004f28:	4639      	mov	r1, r7
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	220a      	movs	r2, #10
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fc13 	bl	800575c <__multadd>
 8004f36:	4607      	mov	r7, r0
 8004f38:	e7f2      	b.n	8004f20 <_dtoa_r+0xaa0>
 8004f3a:	f04f 0900 	mov.w	r9, #0
 8004f3e:	4659      	mov	r1, fp
 8004f40:	2201      	movs	r2, #1
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 fdbe 	bl	8005ac4 <__lshift>
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4683      	mov	fp, r0
 8004f4c:	f000 fe0e 	bl	8005b6c <__mcmp>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	dcb8      	bgt.n	8004ec6 <_dtoa_r+0xa46>
 8004f54:	d102      	bne.n	8004f5c <_dtoa_r+0xadc>
 8004f56:	f018 0f01 	tst.w	r8, #1
 8004f5a:	d1b4      	bne.n	8004ec6 <_dtoa_r+0xa46>
 8004f5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f60:	1e6a      	subs	r2, r5, #1
 8004f62:	2b30      	cmp	r3, #48	; 0x30
 8004f64:	f47f af0f 	bne.w	8004d86 <_dtoa_r+0x906>
 8004f68:	4615      	mov	r5, r2
 8004f6a:	e7f7      	b.n	8004f5c <_dtoa_r+0xadc>
 8004f6c:	9b06      	ldr	r3, [sp, #24]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d105      	bne.n	8004f7e <_dtoa_r+0xafe>
 8004f72:	2331      	movs	r3, #49	; 0x31
 8004f74:	9a06      	ldr	r2, [sp, #24]
 8004f76:	f10a 0a01 	add.w	sl, sl, #1
 8004f7a:	7013      	strb	r3, [r2, #0]
 8004f7c:	e703      	b.n	8004d86 <_dtoa_r+0x906>
 8004f7e:	4615      	mov	r5, r2
 8004f80:	e7a1      	b.n	8004ec6 <_dtoa_r+0xa46>
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <_dtoa_r+0xb60>)
 8004f84:	f7ff bae1 	b.w	800454a <_dtoa_r+0xca>
 8004f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f47f aabb 	bne.w	8004506 <_dtoa_r+0x86>
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <_dtoa_r+0xb64>)
 8004f92:	f7ff bada 	b.w	800454a <_dtoa_r+0xca>
 8004f96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f77f ae3f 	ble.w	8004c1c <_dtoa_r+0x79c>
 8004f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fa0:	9308      	str	r3, [sp, #32]
 8004fa2:	e653      	b.n	8004c4c <_dtoa_r+0x7cc>
 8004fa4:	9b04      	ldr	r3, [sp, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	dc03      	bgt.n	8004fb2 <_dtoa_r+0xb32>
 8004faa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	f73f aed5 	bgt.w	8004d5c <_dtoa_r+0x8dc>
 8004fb2:	9d06      	ldr	r5, [sp, #24]
 8004fb4:	4631      	mov	r1, r6
 8004fb6:	4658      	mov	r0, fp
 8004fb8:	f7ff f9d4 	bl	8004364 <quorem>
 8004fbc:	9b06      	ldr	r3, [sp, #24]
 8004fbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004fc2:	f805 8b01 	strb.w	r8, [r5], #1
 8004fc6:	9a04      	ldr	r2, [sp, #16]
 8004fc8:	1aeb      	subs	r3, r5, r3
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	ddb5      	ble.n	8004f3a <_dtoa_r+0xaba>
 8004fce:	4659      	mov	r1, fp
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	220a      	movs	r2, #10
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fbc1 	bl	800575c <__multadd>
 8004fda:	4683      	mov	fp, r0
 8004fdc:	e7ea      	b.n	8004fb4 <_dtoa_r+0xb34>
 8004fde:	bf00      	nop
 8004fe0:	0800640c 	.word	0x0800640c
 8004fe4:	08006488 	.word	0x08006488

08004fe8 <rshift>:
 8004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fea:	6906      	ldr	r6, [r0, #16]
 8004fec:	114b      	asrs	r3, r1, #5
 8004fee:	429e      	cmp	r6, r3
 8004ff0:	f100 0414 	add.w	r4, r0, #20
 8004ff4:	dd31      	ble.n	800505a <rshift+0x72>
 8004ff6:	f011 011f 	ands.w	r1, r1, #31
 8004ffa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004ffe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005002:	d108      	bne.n	8005016 <rshift+0x2e>
 8005004:	4621      	mov	r1, r4
 8005006:	42b2      	cmp	r2, r6
 8005008:	460b      	mov	r3, r1
 800500a:	d211      	bcs.n	8005030 <rshift+0x48>
 800500c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005010:	f841 3b04 	str.w	r3, [r1], #4
 8005014:	e7f7      	b.n	8005006 <rshift+0x1e>
 8005016:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800501a:	4623      	mov	r3, r4
 800501c:	f1c1 0c20 	rsb	ip, r1, #32
 8005020:	40cd      	lsrs	r5, r1
 8005022:	3204      	adds	r2, #4
 8005024:	42b2      	cmp	r2, r6
 8005026:	4617      	mov	r7, r2
 8005028:	d30d      	bcc.n	8005046 <rshift+0x5e>
 800502a:	601d      	str	r5, [r3, #0]
 800502c:	b105      	cbz	r5, 8005030 <rshift+0x48>
 800502e:	3304      	adds	r3, #4
 8005030:	42a3      	cmp	r3, r4
 8005032:	eba3 0204 	sub.w	r2, r3, r4
 8005036:	bf08      	it	eq
 8005038:	2300      	moveq	r3, #0
 800503a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800503e:	6102      	str	r2, [r0, #16]
 8005040:	bf08      	it	eq
 8005042:	6143      	streq	r3, [r0, #20]
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005046:	683f      	ldr	r7, [r7, #0]
 8005048:	fa07 f70c 	lsl.w	r7, r7, ip
 800504c:	433d      	orrs	r5, r7
 800504e:	f843 5b04 	str.w	r5, [r3], #4
 8005052:	f852 5b04 	ldr.w	r5, [r2], #4
 8005056:	40cd      	lsrs	r5, r1
 8005058:	e7e4      	b.n	8005024 <rshift+0x3c>
 800505a:	4623      	mov	r3, r4
 800505c:	e7e8      	b.n	8005030 <rshift+0x48>

0800505e <__hexdig_fun>:
 800505e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005062:	2b09      	cmp	r3, #9
 8005064:	d802      	bhi.n	800506c <__hexdig_fun+0xe>
 8005066:	3820      	subs	r0, #32
 8005068:	b2c0      	uxtb	r0, r0
 800506a:	4770      	bx	lr
 800506c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005070:	2b05      	cmp	r3, #5
 8005072:	d801      	bhi.n	8005078 <__hexdig_fun+0x1a>
 8005074:	3847      	subs	r0, #71	; 0x47
 8005076:	e7f7      	b.n	8005068 <__hexdig_fun+0xa>
 8005078:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800507c:	2b05      	cmp	r3, #5
 800507e:	d801      	bhi.n	8005084 <__hexdig_fun+0x26>
 8005080:	3827      	subs	r0, #39	; 0x27
 8005082:	e7f1      	b.n	8005068 <__hexdig_fun+0xa>
 8005084:	2000      	movs	r0, #0
 8005086:	4770      	bx	lr

08005088 <__gethex>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	b08b      	sub	sp, #44	; 0x2c
 800508e:	9002      	str	r0, [sp, #8]
 8005090:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005092:	468a      	mov	sl, r1
 8005094:	4690      	mov	r8, r2
 8005096:	9306      	str	r3, [sp, #24]
 8005098:	f000 fad1 	bl	800563e <__localeconv_l>
 800509c:	6803      	ldr	r3, [r0, #0]
 800509e:	f04f 0b00 	mov.w	fp, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	f7fb f853 	bl	8000150 <strlen>
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	9001      	str	r0, [sp, #4]
 80050ae:	4403      	add	r3, r0
 80050b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	f8da 3000 	ldr.w	r3, [sl]
 80050ba:	3302      	adds	r3, #2
 80050bc:	461f      	mov	r7, r3
 80050be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80050c2:	2830      	cmp	r0, #48	; 0x30
 80050c4:	d06c      	beq.n	80051a0 <__gethex+0x118>
 80050c6:	f7ff ffca 	bl	800505e <__hexdig_fun>
 80050ca:	4604      	mov	r4, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d16a      	bne.n	80051a6 <__gethex+0x11e>
 80050d0:	9a01      	ldr	r2, [sp, #4]
 80050d2:	9903      	ldr	r1, [sp, #12]
 80050d4:	4638      	mov	r0, r7
 80050d6:	f001 f905 	bl	80062e4 <strncmp>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d166      	bne.n	80051ac <__gethex+0x124>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	5cf8      	ldrb	r0, [r7, r3]
 80050e2:	18fe      	adds	r6, r7, r3
 80050e4:	f7ff ffbb 	bl	800505e <__hexdig_fun>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d062      	beq.n	80051b2 <__gethex+0x12a>
 80050ec:	4633      	mov	r3, r6
 80050ee:	7818      	ldrb	r0, [r3, #0]
 80050f0:	461f      	mov	r7, r3
 80050f2:	2830      	cmp	r0, #48	; 0x30
 80050f4:	f103 0301 	add.w	r3, r3, #1
 80050f8:	d0f9      	beq.n	80050ee <__gethex+0x66>
 80050fa:	f7ff ffb0 	bl	800505e <__hexdig_fun>
 80050fe:	fab0 f580 	clz	r5, r0
 8005102:	4634      	mov	r4, r6
 8005104:	f04f 0b01 	mov.w	fp, #1
 8005108:	096d      	lsrs	r5, r5, #5
 800510a:	463a      	mov	r2, r7
 800510c:	4616      	mov	r6, r2
 800510e:	7830      	ldrb	r0, [r6, #0]
 8005110:	3201      	adds	r2, #1
 8005112:	f7ff ffa4 	bl	800505e <__hexdig_fun>
 8005116:	2800      	cmp	r0, #0
 8005118:	d1f8      	bne.n	800510c <__gethex+0x84>
 800511a:	9a01      	ldr	r2, [sp, #4]
 800511c:	9903      	ldr	r1, [sp, #12]
 800511e:	4630      	mov	r0, r6
 8005120:	f001 f8e0 	bl	80062e4 <strncmp>
 8005124:	b950      	cbnz	r0, 800513c <__gethex+0xb4>
 8005126:	b954      	cbnz	r4, 800513e <__gethex+0xb6>
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	18f4      	adds	r4, r6, r3
 800512c:	4622      	mov	r2, r4
 800512e:	4616      	mov	r6, r2
 8005130:	7830      	ldrb	r0, [r6, #0]
 8005132:	3201      	adds	r2, #1
 8005134:	f7ff ff93 	bl	800505e <__hexdig_fun>
 8005138:	2800      	cmp	r0, #0
 800513a:	d1f8      	bne.n	800512e <__gethex+0xa6>
 800513c:	b10c      	cbz	r4, 8005142 <__gethex+0xba>
 800513e:	1ba4      	subs	r4, r4, r6
 8005140:	00a4      	lsls	r4, r4, #2
 8005142:	7833      	ldrb	r3, [r6, #0]
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d001      	beq.n	800514c <__gethex+0xc4>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d140      	bne.n	80051ce <__gethex+0x146>
 800514c:	7873      	ldrb	r3, [r6, #1]
 800514e:	2b2b      	cmp	r3, #43	; 0x2b
 8005150:	d031      	beq.n	80051b6 <__gethex+0x12e>
 8005152:	2b2d      	cmp	r3, #45	; 0x2d
 8005154:	d033      	beq.n	80051be <__gethex+0x136>
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	1c71      	adds	r1, r6, #1
 800515c:	7808      	ldrb	r0, [r1, #0]
 800515e:	f7ff ff7e 	bl	800505e <__hexdig_fun>
 8005162:	1e43      	subs	r3, r0, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b18      	cmp	r3, #24
 8005168:	d831      	bhi.n	80051ce <__gethex+0x146>
 800516a:	f1a0 0210 	sub.w	r2, r0, #16
 800516e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005172:	f7ff ff74 	bl	800505e <__hexdig_fun>
 8005176:	1e43      	subs	r3, r0, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b18      	cmp	r3, #24
 800517c:	d922      	bls.n	80051c4 <__gethex+0x13c>
 800517e:	f1b9 0f00 	cmp.w	r9, #0
 8005182:	d000      	beq.n	8005186 <__gethex+0xfe>
 8005184:	4252      	negs	r2, r2
 8005186:	4414      	add	r4, r2
 8005188:	f8ca 1000 	str.w	r1, [sl]
 800518c:	b30d      	cbz	r5, 80051d2 <__gethex+0x14a>
 800518e:	f1bb 0f00 	cmp.w	fp, #0
 8005192:	bf0c      	ite	eq
 8005194:	2706      	moveq	r7, #6
 8005196:	2700      	movne	r7, #0
 8005198:	4638      	mov	r0, r7
 800519a:	b00b      	add	sp, #44	; 0x2c
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	f10b 0b01 	add.w	fp, fp, #1
 80051a4:	e78a      	b.n	80050bc <__gethex+0x34>
 80051a6:	2500      	movs	r5, #0
 80051a8:	462c      	mov	r4, r5
 80051aa:	e7ae      	b.n	800510a <__gethex+0x82>
 80051ac:	463e      	mov	r6, r7
 80051ae:	2501      	movs	r5, #1
 80051b0:	e7c7      	b.n	8005142 <__gethex+0xba>
 80051b2:	4604      	mov	r4, r0
 80051b4:	e7fb      	b.n	80051ae <__gethex+0x126>
 80051b6:	f04f 0900 	mov.w	r9, #0
 80051ba:	1cb1      	adds	r1, r6, #2
 80051bc:	e7ce      	b.n	800515c <__gethex+0xd4>
 80051be:	f04f 0901 	mov.w	r9, #1
 80051c2:	e7fa      	b.n	80051ba <__gethex+0x132>
 80051c4:	230a      	movs	r3, #10
 80051c6:	fb03 0202 	mla	r2, r3, r2, r0
 80051ca:	3a10      	subs	r2, #16
 80051cc:	e7cf      	b.n	800516e <__gethex+0xe6>
 80051ce:	4631      	mov	r1, r6
 80051d0:	e7da      	b.n	8005188 <__gethex+0x100>
 80051d2:	4629      	mov	r1, r5
 80051d4:	1bf3      	subs	r3, r6, r7
 80051d6:	3b01      	subs	r3, #1
 80051d8:	2b07      	cmp	r3, #7
 80051da:	dc49      	bgt.n	8005270 <__gethex+0x1e8>
 80051dc:	9802      	ldr	r0, [sp, #8]
 80051de:	f000 fa72 	bl	80056c6 <_Balloc>
 80051e2:	f04f 0b00 	mov.w	fp, #0
 80051e6:	4605      	mov	r5, r0
 80051e8:	46da      	mov	sl, fp
 80051ea:	9b01      	ldr	r3, [sp, #4]
 80051ec:	f100 0914 	add.w	r9, r0, #20
 80051f0:	f1c3 0301 	rsb	r3, r3, #1
 80051f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80051f8:	9308      	str	r3, [sp, #32]
 80051fa:	42b7      	cmp	r7, r6
 80051fc:	d33b      	bcc.n	8005276 <__gethex+0x1ee>
 80051fe:	9804      	ldr	r0, [sp, #16]
 8005200:	f840 ab04 	str.w	sl, [r0], #4
 8005204:	eba0 0009 	sub.w	r0, r0, r9
 8005208:	1080      	asrs	r0, r0, #2
 800520a:	6128      	str	r0, [r5, #16]
 800520c:	0147      	lsls	r7, r0, #5
 800520e:	4650      	mov	r0, sl
 8005210:	f000 fb1d 	bl	800584e <__hi0bits>
 8005214:	f8d8 6000 	ldr.w	r6, [r8]
 8005218:	1a3f      	subs	r7, r7, r0
 800521a:	42b7      	cmp	r7, r6
 800521c:	dd64      	ble.n	80052e8 <__gethex+0x260>
 800521e:	1bbf      	subs	r7, r7, r6
 8005220:	4639      	mov	r1, r7
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fe27 	bl	8005e76 <__any_on>
 8005228:	4682      	mov	sl, r0
 800522a:	b178      	cbz	r0, 800524c <__gethex+0x1c4>
 800522c:	f04f 0a01 	mov.w	sl, #1
 8005230:	1e7b      	subs	r3, r7, #1
 8005232:	1159      	asrs	r1, r3, #5
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800523c:	fa0a f202 	lsl.w	r2, sl, r2
 8005240:	420a      	tst	r2, r1
 8005242:	d003      	beq.n	800524c <__gethex+0x1c4>
 8005244:	4553      	cmp	r3, sl
 8005246:	dc46      	bgt.n	80052d6 <__gethex+0x24e>
 8005248:	f04f 0a02 	mov.w	sl, #2
 800524c:	4639      	mov	r1, r7
 800524e:	4628      	mov	r0, r5
 8005250:	f7ff feca 	bl	8004fe8 <rshift>
 8005254:	443c      	add	r4, r7
 8005256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800525a:	42a3      	cmp	r3, r4
 800525c:	da52      	bge.n	8005304 <__gethex+0x27c>
 800525e:	4629      	mov	r1, r5
 8005260:	9802      	ldr	r0, [sp, #8]
 8005262:	f000 fa64 	bl	800572e <_Bfree>
 8005266:	2300      	movs	r3, #0
 8005268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800526a:	27a3      	movs	r7, #163	; 0xa3
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e793      	b.n	8005198 <__gethex+0x110>
 8005270:	3101      	adds	r1, #1
 8005272:	105b      	asrs	r3, r3, #1
 8005274:	e7b0      	b.n	80051d8 <__gethex+0x150>
 8005276:	1e73      	subs	r3, r6, #1
 8005278:	9305      	str	r3, [sp, #20]
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <__gethex+0x22e>
 8005284:	f1bb 0f20 	cmp.w	fp, #32
 8005288:	d107      	bne.n	800529a <__gethex+0x212>
 800528a:	9b04      	ldr	r3, [sp, #16]
 800528c:	f8c3 a000 	str.w	sl, [r3]
 8005290:	f04f 0a00 	mov.w	sl, #0
 8005294:	46d3      	mov	fp, sl
 8005296:	3304      	adds	r3, #4
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800529e:	f7ff fede 	bl	800505e <__hexdig_fun>
 80052a2:	f000 000f 	and.w	r0, r0, #15
 80052a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80052aa:	ea4a 0a00 	orr.w	sl, sl, r0
 80052ae:	f10b 0b04 	add.w	fp, fp, #4
 80052b2:	9b05      	ldr	r3, [sp, #20]
 80052b4:	e00d      	b.n	80052d2 <__gethex+0x24a>
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	9a08      	ldr	r2, [sp, #32]
 80052ba:	4413      	add	r3, r2
 80052bc:	42bb      	cmp	r3, r7
 80052be:	d3e1      	bcc.n	8005284 <__gethex+0x1fc>
 80052c0:	4618      	mov	r0, r3
 80052c2:	9a01      	ldr	r2, [sp, #4]
 80052c4:	9903      	ldr	r1, [sp, #12]
 80052c6:	9309      	str	r3, [sp, #36]	; 0x24
 80052c8:	f001 f80c 	bl	80062e4 <strncmp>
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d1d8      	bne.n	8005284 <__gethex+0x1fc>
 80052d2:	461e      	mov	r6, r3
 80052d4:	e791      	b.n	80051fa <__gethex+0x172>
 80052d6:	1eb9      	subs	r1, r7, #2
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 fdcc 	bl	8005e76 <__any_on>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d0b2      	beq.n	8005248 <__gethex+0x1c0>
 80052e2:	f04f 0a03 	mov.w	sl, #3
 80052e6:	e7b1      	b.n	800524c <__gethex+0x1c4>
 80052e8:	da09      	bge.n	80052fe <__gethex+0x276>
 80052ea:	1bf7      	subs	r7, r6, r7
 80052ec:	4629      	mov	r1, r5
 80052ee:	463a      	mov	r2, r7
 80052f0:	9802      	ldr	r0, [sp, #8]
 80052f2:	f000 fbe7 	bl	8005ac4 <__lshift>
 80052f6:	4605      	mov	r5, r0
 80052f8:	1be4      	subs	r4, r4, r7
 80052fa:	f100 0914 	add.w	r9, r0, #20
 80052fe:	f04f 0a00 	mov.w	sl, #0
 8005302:	e7a8      	b.n	8005256 <__gethex+0x1ce>
 8005304:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005308:	42a0      	cmp	r0, r4
 800530a:	dd6b      	ble.n	80053e4 <__gethex+0x35c>
 800530c:	1b04      	subs	r4, r0, r4
 800530e:	42a6      	cmp	r6, r4
 8005310:	dc2e      	bgt.n	8005370 <__gethex+0x2e8>
 8005312:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d022      	beq.n	8005360 <__gethex+0x2d8>
 800531a:	2b03      	cmp	r3, #3
 800531c:	d024      	beq.n	8005368 <__gethex+0x2e0>
 800531e:	2b01      	cmp	r3, #1
 8005320:	d115      	bne.n	800534e <__gethex+0x2c6>
 8005322:	42a6      	cmp	r6, r4
 8005324:	d113      	bne.n	800534e <__gethex+0x2c6>
 8005326:	2e01      	cmp	r6, #1
 8005328:	dc0b      	bgt.n	8005342 <__gethex+0x2ba>
 800532a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800532e:	9a06      	ldr	r2, [sp, #24]
 8005330:	2762      	movs	r7, #98	; 0x62
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	612b      	str	r3, [r5, #16]
 8005338:	f8c9 3000 	str.w	r3, [r9]
 800533c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800533e:	601d      	str	r5, [r3, #0]
 8005340:	e72a      	b.n	8005198 <__gethex+0x110>
 8005342:	1e71      	subs	r1, r6, #1
 8005344:	4628      	mov	r0, r5
 8005346:	f000 fd96 	bl	8005e76 <__any_on>
 800534a:	2800      	cmp	r0, #0
 800534c:	d1ed      	bne.n	800532a <__gethex+0x2a2>
 800534e:	4629      	mov	r1, r5
 8005350:	9802      	ldr	r0, [sp, #8]
 8005352:	f000 f9ec 	bl	800572e <_Bfree>
 8005356:	2300      	movs	r3, #0
 8005358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800535a:	2750      	movs	r7, #80	; 0x50
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	e71b      	b.n	8005198 <__gethex+0x110>
 8005360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0e1      	beq.n	800532a <__gethex+0x2a2>
 8005366:	e7f2      	b.n	800534e <__gethex+0x2c6>
 8005368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1dd      	bne.n	800532a <__gethex+0x2a2>
 800536e:	e7ee      	b.n	800534e <__gethex+0x2c6>
 8005370:	1e67      	subs	r7, r4, #1
 8005372:	f1ba 0f00 	cmp.w	sl, #0
 8005376:	d132      	bne.n	80053de <__gethex+0x356>
 8005378:	b127      	cbz	r7, 8005384 <__gethex+0x2fc>
 800537a:	4639      	mov	r1, r7
 800537c:	4628      	mov	r0, r5
 800537e:	f000 fd7a 	bl	8005e76 <__any_on>
 8005382:	4682      	mov	sl, r0
 8005384:	2301      	movs	r3, #1
 8005386:	117a      	asrs	r2, r7, #5
 8005388:	f007 071f 	and.w	r7, r7, #31
 800538c:	fa03 f707 	lsl.w	r7, r3, r7
 8005390:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005394:	4621      	mov	r1, r4
 8005396:	421f      	tst	r7, r3
 8005398:	f04f 0702 	mov.w	r7, #2
 800539c:	4628      	mov	r0, r5
 800539e:	bf18      	it	ne
 80053a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80053a4:	1b36      	subs	r6, r6, r4
 80053a6:	f7ff fe1f 	bl	8004fe8 <rshift>
 80053aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80053ae:	f1ba 0f00 	cmp.w	sl, #0
 80053b2:	d048      	beq.n	8005446 <__gethex+0x3be>
 80053b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d015      	beq.n	80053e8 <__gethex+0x360>
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d017      	beq.n	80053f0 <__gethex+0x368>
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d109      	bne.n	80053d8 <__gethex+0x350>
 80053c4:	f01a 0f02 	tst.w	sl, #2
 80053c8:	d006      	beq.n	80053d8 <__gethex+0x350>
 80053ca:	f8d9 3000 	ldr.w	r3, [r9]
 80053ce:	ea4a 0a03 	orr.w	sl, sl, r3
 80053d2:	f01a 0f01 	tst.w	sl, #1
 80053d6:	d10e      	bne.n	80053f6 <__gethex+0x36e>
 80053d8:	f047 0710 	orr.w	r7, r7, #16
 80053dc:	e033      	b.n	8005446 <__gethex+0x3be>
 80053de:	f04f 0a01 	mov.w	sl, #1
 80053e2:	e7cf      	b.n	8005384 <__gethex+0x2fc>
 80053e4:	2701      	movs	r7, #1
 80053e6:	e7e2      	b.n	80053ae <__gethex+0x326>
 80053e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053ea:	f1c3 0301 	rsb	r3, r3, #1
 80053ee:	9315      	str	r3, [sp, #84]	; 0x54
 80053f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <__gethex+0x350>
 80053f6:	f04f 0c00 	mov.w	ip, #0
 80053fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80053fe:	f105 0314 	add.w	r3, r5, #20
 8005402:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005406:	eb03 010a 	add.w	r1, r3, sl
 800540a:	4618      	mov	r0, r3
 800540c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005410:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005414:	d01c      	beq.n	8005450 <__gethex+0x3c8>
 8005416:	3201      	adds	r2, #1
 8005418:	6002      	str	r2, [r0, #0]
 800541a:	2f02      	cmp	r7, #2
 800541c:	f105 0314 	add.w	r3, r5, #20
 8005420:	d138      	bne.n	8005494 <__gethex+0x40c>
 8005422:	f8d8 2000 	ldr.w	r2, [r8]
 8005426:	3a01      	subs	r2, #1
 8005428:	42b2      	cmp	r2, r6
 800542a:	d10a      	bne.n	8005442 <__gethex+0x3ba>
 800542c:	2201      	movs	r2, #1
 800542e:	1171      	asrs	r1, r6, #5
 8005430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005434:	f006 061f 	and.w	r6, r6, #31
 8005438:	fa02 f606 	lsl.w	r6, r2, r6
 800543c:	421e      	tst	r6, r3
 800543e:	bf18      	it	ne
 8005440:	4617      	movne	r7, r2
 8005442:	f047 0720 	orr.w	r7, r7, #32
 8005446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005448:	601d      	str	r5, [r3, #0]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	601c      	str	r4, [r3, #0]
 800544e:	e6a3      	b.n	8005198 <__gethex+0x110>
 8005450:	4299      	cmp	r1, r3
 8005452:	f843 cc04 	str.w	ip, [r3, #-4]
 8005456:	d8d8      	bhi.n	800540a <__gethex+0x382>
 8005458:	68ab      	ldr	r3, [r5, #8]
 800545a:	4599      	cmp	r9, r3
 800545c:	db12      	blt.n	8005484 <__gethex+0x3fc>
 800545e:	6869      	ldr	r1, [r5, #4]
 8005460:	9802      	ldr	r0, [sp, #8]
 8005462:	3101      	adds	r1, #1
 8005464:	f000 f92f 	bl	80056c6 <_Balloc>
 8005468:	4683      	mov	fp, r0
 800546a:	692a      	ldr	r2, [r5, #16]
 800546c:	f105 010c 	add.w	r1, r5, #12
 8005470:	3202      	adds	r2, #2
 8005472:	0092      	lsls	r2, r2, #2
 8005474:	300c      	adds	r0, #12
 8005476:	f000 f91b 	bl	80056b0 <memcpy>
 800547a:	4629      	mov	r1, r5
 800547c:	9802      	ldr	r0, [sp, #8]
 800547e:	f000 f956 	bl	800572e <_Bfree>
 8005482:	465d      	mov	r5, fp
 8005484:	692b      	ldr	r3, [r5, #16]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	612a      	str	r2, [r5, #16]
 800548a:	2201      	movs	r2, #1
 800548c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005490:	615a      	str	r2, [r3, #20]
 8005492:	e7c2      	b.n	800541a <__gethex+0x392>
 8005494:	692a      	ldr	r2, [r5, #16]
 8005496:	454a      	cmp	r2, r9
 8005498:	dd0b      	ble.n	80054b2 <__gethex+0x42a>
 800549a:	2101      	movs	r1, #1
 800549c:	4628      	mov	r0, r5
 800549e:	f7ff fda3 	bl	8004fe8 <rshift>
 80054a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054a6:	3401      	adds	r4, #1
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	f6ff aed8 	blt.w	800525e <__gethex+0x1d6>
 80054ae:	2701      	movs	r7, #1
 80054b0:	e7c7      	b.n	8005442 <__gethex+0x3ba>
 80054b2:	f016 061f 	ands.w	r6, r6, #31
 80054b6:	d0fa      	beq.n	80054ae <__gethex+0x426>
 80054b8:	449a      	add	sl, r3
 80054ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80054be:	f000 f9c6 	bl	800584e <__hi0bits>
 80054c2:	f1c6 0620 	rsb	r6, r6, #32
 80054c6:	42b0      	cmp	r0, r6
 80054c8:	dbe7      	blt.n	800549a <__gethex+0x412>
 80054ca:	e7f0      	b.n	80054ae <__gethex+0x426>

080054cc <L_shift>:
 80054cc:	f1c2 0208 	rsb	r2, r2, #8
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	f1c2 0620 	rsb	r6, r2, #32
 80054d8:	6843      	ldr	r3, [r0, #4]
 80054da:	6804      	ldr	r4, [r0, #0]
 80054dc:	fa03 f506 	lsl.w	r5, r3, r6
 80054e0:	432c      	orrs	r4, r5
 80054e2:	40d3      	lsrs	r3, r2
 80054e4:	6004      	str	r4, [r0, #0]
 80054e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80054ea:	4288      	cmp	r0, r1
 80054ec:	d3f4      	bcc.n	80054d8 <L_shift+0xc>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}

080054f0 <__match>:
 80054f0:	b530      	push	{r4, r5, lr}
 80054f2:	6803      	ldr	r3, [r0, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fa:	b914      	cbnz	r4, 8005502 <__match+0x12>
 80054fc:	6003      	str	r3, [r0, #0]
 80054fe:	2001      	movs	r0, #1
 8005500:	bd30      	pop	{r4, r5, pc}
 8005502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800550a:	2d19      	cmp	r5, #25
 800550c:	bf98      	it	ls
 800550e:	3220      	addls	r2, #32
 8005510:	42a2      	cmp	r2, r4
 8005512:	d0f0      	beq.n	80054f6 <__match+0x6>
 8005514:	2000      	movs	r0, #0
 8005516:	e7f3      	b.n	8005500 <__match+0x10>

08005518 <__hexnan>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	2500      	movs	r5, #0
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	4682      	mov	sl, r0
 8005522:	115f      	asrs	r7, r3, #5
 8005524:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005528:	f013 031f 	ands.w	r3, r3, #31
 800552c:	bf18      	it	ne
 800552e:	3704      	addne	r7, #4
 8005530:	1f3e      	subs	r6, r7, #4
 8005532:	4690      	mov	r8, r2
 8005534:	46b1      	mov	r9, r6
 8005536:	4634      	mov	r4, r6
 8005538:	46ab      	mov	fp, r5
 800553a:	b087      	sub	sp, #28
 800553c:	6801      	ldr	r1, [r0, #0]
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f847 5c04 	str.w	r5, [r7, #-4]
 8005544:	9502      	str	r5, [sp, #8]
 8005546:	784a      	ldrb	r2, [r1, #1]
 8005548:	1c4b      	adds	r3, r1, #1
 800554a:	9303      	str	r3, [sp, #12]
 800554c:	b342      	cbz	r2, 80055a0 <__hexnan+0x88>
 800554e:	4610      	mov	r0, r2
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	9204      	str	r2, [sp, #16]
 8005554:	f7ff fd83 	bl	800505e <__hexdig_fun>
 8005558:	2800      	cmp	r0, #0
 800555a:	d143      	bne.n	80055e4 <__hexnan+0xcc>
 800555c:	9a04      	ldr	r2, [sp, #16]
 800555e:	9905      	ldr	r1, [sp, #20]
 8005560:	2a20      	cmp	r2, #32
 8005562:	d818      	bhi.n	8005596 <__hexnan+0x7e>
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	459b      	cmp	fp, r3
 8005568:	dd13      	ble.n	8005592 <__hexnan+0x7a>
 800556a:	454c      	cmp	r4, r9
 800556c:	d206      	bcs.n	800557c <__hexnan+0x64>
 800556e:	2d07      	cmp	r5, #7
 8005570:	dc04      	bgt.n	800557c <__hexnan+0x64>
 8005572:	462a      	mov	r2, r5
 8005574:	4649      	mov	r1, r9
 8005576:	4620      	mov	r0, r4
 8005578:	f7ff ffa8 	bl	80054cc <L_shift>
 800557c:	4544      	cmp	r4, r8
 800557e:	d944      	bls.n	800560a <__hexnan+0xf2>
 8005580:	2300      	movs	r3, #0
 8005582:	f1a4 0904 	sub.w	r9, r4, #4
 8005586:	f844 3c04 	str.w	r3, [r4, #-4]
 800558a:	461d      	mov	r5, r3
 800558c:	464c      	mov	r4, r9
 800558e:	f8cd b008 	str.w	fp, [sp, #8]
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	e7d7      	b.n	8005546 <__hexnan+0x2e>
 8005596:	2a29      	cmp	r2, #41	; 0x29
 8005598:	d14a      	bne.n	8005630 <__hexnan+0x118>
 800559a:	3102      	adds	r1, #2
 800559c:	f8ca 1000 	str.w	r1, [sl]
 80055a0:	f1bb 0f00 	cmp.w	fp, #0
 80055a4:	d044      	beq.n	8005630 <__hexnan+0x118>
 80055a6:	454c      	cmp	r4, r9
 80055a8:	d206      	bcs.n	80055b8 <__hexnan+0xa0>
 80055aa:	2d07      	cmp	r5, #7
 80055ac:	dc04      	bgt.n	80055b8 <__hexnan+0xa0>
 80055ae:	462a      	mov	r2, r5
 80055b0:	4649      	mov	r1, r9
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff8a 	bl	80054cc <L_shift>
 80055b8:	4544      	cmp	r4, r8
 80055ba:	d928      	bls.n	800560e <__hexnan+0xf6>
 80055bc:	4643      	mov	r3, r8
 80055be:	f854 2b04 	ldr.w	r2, [r4], #4
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	f843 2b04 	str.w	r2, [r3], #4
 80055c8:	d2f9      	bcs.n	80055be <__hexnan+0xa6>
 80055ca:	2200      	movs	r2, #0
 80055cc:	f843 2b04 	str.w	r2, [r3], #4
 80055d0:	429e      	cmp	r6, r3
 80055d2:	d2fb      	bcs.n	80055cc <__hexnan+0xb4>
 80055d4:	6833      	ldr	r3, [r6, #0]
 80055d6:	b91b      	cbnz	r3, 80055e0 <__hexnan+0xc8>
 80055d8:	4546      	cmp	r6, r8
 80055da:	d127      	bne.n	800562c <__hexnan+0x114>
 80055dc:	2301      	movs	r3, #1
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	2005      	movs	r0, #5
 80055e2:	e026      	b.n	8005632 <__hexnan+0x11a>
 80055e4:	3501      	adds	r5, #1
 80055e6:	2d08      	cmp	r5, #8
 80055e8:	f10b 0b01 	add.w	fp, fp, #1
 80055ec:	dd06      	ble.n	80055fc <__hexnan+0xe4>
 80055ee:	4544      	cmp	r4, r8
 80055f0:	d9cf      	bls.n	8005592 <__hexnan+0x7a>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2501      	movs	r5, #1
 80055f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80055fa:	3c04      	subs	r4, #4
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	f000 000f 	and.w	r0, r0, #15
 8005602:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005606:	6020      	str	r0, [r4, #0]
 8005608:	e7c3      	b.n	8005592 <__hexnan+0x7a>
 800560a:	2508      	movs	r5, #8
 800560c:	e7c1      	b.n	8005592 <__hexnan+0x7a>
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0df      	beq.n	80055d4 <__hexnan+0xbc>
 8005614:	f04f 32ff 	mov.w	r2, #4294967295
 8005618:	f1c3 0320 	rsb	r3, r3, #32
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005624:	401a      	ands	r2, r3
 8005626:	f847 2c04 	str.w	r2, [r7, #-4]
 800562a:	e7d3      	b.n	80055d4 <__hexnan+0xbc>
 800562c:	3e04      	subs	r6, #4
 800562e:	e7d1      	b.n	80055d4 <__hexnan+0xbc>
 8005630:	2004      	movs	r0, #4
 8005632:	b007      	add	sp, #28
 8005634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005638 <__locale_ctype_ptr_l>:
 8005638:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800563c:	4770      	bx	lr

0800563e <__localeconv_l>:
 800563e:	30f0      	adds	r0, #240	; 0xf0
 8005640:	4770      	bx	lr
	...

08005644 <_localeconv_r>:
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <_localeconv_r+0x14>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a18      	ldr	r0, [r3, #32]
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <_localeconv_r+0x18>)
 800564c:	2800      	cmp	r0, #0
 800564e:	bf08      	it	eq
 8005650:	4618      	moveq	r0, r3
 8005652:	30f0      	adds	r0, #240	; 0xf0
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000018 	.word	0x20000018
 800565c:	2000007c 	.word	0x2000007c

08005660 <malloc>:
 8005660:	4b02      	ldr	r3, [pc, #8]	; (800566c <malloc+0xc>)
 8005662:	4601      	mov	r1, r0
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f000 bc81 	b.w	8005f6c <_malloc_r>
 800566a:	bf00      	nop
 800566c:	20000018 	.word	0x20000018

08005670 <__ascii_mbtowc>:
 8005670:	b082      	sub	sp, #8
 8005672:	b901      	cbnz	r1, 8005676 <__ascii_mbtowc+0x6>
 8005674:	a901      	add	r1, sp, #4
 8005676:	b142      	cbz	r2, 800568a <__ascii_mbtowc+0x1a>
 8005678:	b14b      	cbz	r3, 800568e <__ascii_mbtowc+0x1e>
 800567a:	7813      	ldrb	r3, [r2, #0]
 800567c:	600b      	str	r3, [r1, #0]
 800567e:	7812      	ldrb	r2, [r2, #0]
 8005680:	1c10      	adds	r0, r2, #0
 8005682:	bf18      	it	ne
 8005684:	2001      	movne	r0, #1
 8005686:	b002      	add	sp, #8
 8005688:	4770      	bx	lr
 800568a:	4610      	mov	r0, r2
 800568c:	e7fb      	b.n	8005686 <__ascii_mbtowc+0x16>
 800568e:	f06f 0001 	mvn.w	r0, #1
 8005692:	e7f8      	b.n	8005686 <__ascii_mbtowc+0x16>

08005694 <memchr>:
 8005694:	b510      	push	{r4, lr}
 8005696:	b2c9      	uxtb	r1, r1
 8005698:	4402      	add	r2, r0
 800569a:	4290      	cmp	r0, r2
 800569c:	4603      	mov	r3, r0
 800569e:	d101      	bne.n	80056a4 <memchr+0x10>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e003      	b.n	80056ac <memchr+0x18>
 80056a4:	781c      	ldrb	r4, [r3, #0]
 80056a6:	3001      	adds	r0, #1
 80056a8:	428c      	cmp	r4, r1
 80056aa:	d1f6      	bne.n	800569a <memchr+0x6>
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <memcpy>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	1e43      	subs	r3, r0, #1
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	bd10      	pop	{r4, pc}
 80056bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c4:	e7f7      	b.n	80056b6 <memcpy+0x6>

080056c6 <_Balloc>:
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056ca:	4604      	mov	r4, r0
 80056cc:	460e      	mov	r6, r1
 80056ce:	b93d      	cbnz	r5, 80056e0 <_Balloc+0x1a>
 80056d0:	2010      	movs	r0, #16
 80056d2:	f7ff ffc5 	bl	8005660 <malloc>
 80056d6:	6260      	str	r0, [r4, #36]	; 0x24
 80056d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056dc:	6005      	str	r5, [r0, #0]
 80056de:	60c5      	str	r5, [r0, #12]
 80056e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056e2:	68eb      	ldr	r3, [r5, #12]
 80056e4:	b183      	cbz	r3, 8005708 <_Balloc+0x42>
 80056e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056ee:	b9b8      	cbnz	r0, 8005720 <_Balloc+0x5a>
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f506 	lsl.w	r5, r1, r6
 80056f6:	1d6a      	adds	r2, r5, #5
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fbdc 	bl	8005eb8 <_calloc_r>
 8005700:	b160      	cbz	r0, 800571c <_Balloc+0x56>
 8005702:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005706:	e00e      	b.n	8005726 <_Balloc+0x60>
 8005708:	2221      	movs	r2, #33	; 0x21
 800570a:	2104      	movs	r1, #4
 800570c:	4620      	mov	r0, r4
 800570e:	f000 fbd3 	bl	8005eb8 <_calloc_r>
 8005712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005714:	60e8      	str	r0, [r5, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e4      	bne.n	80056e6 <_Balloc+0x20>
 800571c:	2000      	movs	r0, #0
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	6802      	ldr	r2, [r0, #0]
 8005722:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005726:	2300      	movs	r3, #0
 8005728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800572c:	e7f7      	b.n	800571e <_Balloc+0x58>

0800572e <_Bfree>:
 800572e:	b570      	push	{r4, r5, r6, lr}
 8005730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005732:	4606      	mov	r6, r0
 8005734:	460d      	mov	r5, r1
 8005736:	b93c      	cbnz	r4, 8005748 <_Bfree+0x1a>
 8005738:	2010      	movs	r0, #16
 800573a:	f7ff ff91 	bl	8005660 <malloc>
 800573e:	6270      	str	r0, [r6, #36]	; 0x24
 8005740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005744:	6004      	str	r4, [r0, #0]
 8005746:	60c4      	str	r4, [r0, #12]
 8005748:	b13d      	cbz	r5, 800575a <_Bfree+0x2c>
 800574a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800574c:	686a      	ldr	r2, [r5, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005754:	6029      	str	r1, [r5, #0]
 8005756:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800575a:	bd70      	pop	{r4, r5, r6, pc}

0800575c <__multadd>:
 800575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005760:	461f      	mov	r7, r3
 8005762:	4606      	mov	r6, r0
 8005764:	460c      	mov	r4, r1
 8005766:	2300      	movs	r3, #0
 8005768:	690d      	ldr	r5, [r1, #16]
 800576a:	f101 0c14 	add.w	ip, r1, #20
 800576e:	f8dc 0000 	ldr.w	r0, [ip]
 8005772:	3301      	adds	r3, #1
 8005774:	b281      	uxth	r1, r0
 8005776:	fb02 7101 	mla	r1, r2, r1, r7
 800577a:	0c00      	lsrs	r0, r0, #16
 800577c:	0c0f      	lsrs	r7, r1, #16
 800577e:	fb02 7000 	mla	r0, r2, r0, r7
 8005782:	b289      	uxth	r1, r1
 8005784:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005788:	429d      	cmp	r5, r3
 800578a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800578e:	f84c 1b04 	str.w	r1, [ip], #4
 8005792:	dcec      	bgt.n	800576e <__multadd+0x12>
 8005794:	b1d7      	cbz	r7, 80057cc <__multadd+0x70>
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	42ab      	cmp	r3, r5
 800579a:	dc12      	bgt.n	80057c2 <__multadd+0x66>
 800579c:	6861      	ldr	r1, [r4, #4]
 800579e:	4630      	mov	r0, r6
 80057a0:	3101      	adds	r1, #1
 80057a2:	f7ff ff90 	bl	80056c6 <_Balloc>
 80057a6:	4680      	mov	r8, r0
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	f104 010c 	add.w	r1, r4, #12
 80057ae:	3202      	adds	r2, #2
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	300c      	adds	r0, #12
 80057b4:	f7ff ff7c 	bl	80056b0 <memcpy>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ffb7 	bl	800572e <_Bfree>
 80057c0:	4644      	mov	r4, r8
 80057c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057c6:	3501      	adds	r5, #1
 80057c8:	615f      	str	r7, [r3, #20]
 80057ca:	6125      	str	r5, [r4, #16]
 80057cc:	4620      	mov	r0, r4
 80057ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057d2 <__s2b>:
 80057d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d6:	4615      	mov	r5, r2
 80057d8:	2209      	movs	r2, #9
 80057da:	461f      	mov	r7, r3
 80057dc:	3308      	adds	r3, #8
 80057de:	460c      	mov	r4, r1
 80057e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e4:	4606      	mov	r6, r0
 80057e6:	2201      	movs	r2, #1
 80057e8:	2100      	movs	r1, #0
 80057ea:	429a      	cmp	r2, r3
 80057ec:	db20      	blt.n	8005830 <__s2b+0x5e>
 80057ee:	4630      	mov	r0, r6
 80057f0:	f7ff ff69 	bl	80056c6 <_Balloc>
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	2d09      	cmp	r5, #9
 80057f8:	6143      	str	r3, [r0, #20]
 80057fa:	f04f 0301 	mov.w	r3, #1
 80057fe:	6103      	str	r3, [r0, #16]
 8005800:	dd19      	ble.n	8005836 <__s2b+0x64>
 8005802:	f104 0809 	add.w	r8, r4, #9
 8005806:	46c1      	mov	r9, r8
 8005808:	442c      	add	r4, r5
 800580a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800580e:	4601      	mov	r1, r0
 8005810:	3b30      	subs	r3, #48	; 0x30
 8005812:	220a      	movs	r2, #10
 8005814:	4630      	mov	r0, r6
 8005816:	f7ff ffa1 	bl	800575c <__multadd>
 800581a:	45a1      	cmp	r9, r4
 800581c:	d1f5      	bne.n	800580a <__s2b+0x38>
 800581e:	eb08 0405 	add.w	r4, r8, r5
 8005822:	3c08      	subs	r4, #8
 8005824:	1b2d      	subs	r5, r5, r4
 8005826:	1963      	adds	r3, r4, r5
 8005828:	42bb      	cmp	r3, r7
 800582a:	db07      	blt.n	800583c <__s2b+0x6a>
 800582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005830:	0052      	lsls	r2, r2, #1
 8005832:	3101      	adds	r1, #1
 8005834:	e7d9      	b.n	80057ea <__s2b+0x18>
 8005836:	340a      	adds	r4, #10
 8005838:	2509      	movs	r5, #9
 800583a:	e7f3      	b.n	8005824 <__s2b+0x52>
 800583c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005840:	4601      	mov	r1, r0
 8005842:	3b30      	subs	r3, #48	; 0x30
 8005844:	220a      	movs	r2, #10
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff ff88 	bl	800575c <__multadd>
 800584c:	e7eb      	b.n	8005826 <__s2b+0x54>

0800584e <__hi0bits>:
 800584e:	0c02      	lsrs	r2, r0, #16
 8005850:	0412      	lsls	r2, r2, #16
 8005852:	4603      	mov	r3, r0
 8005854:	b9b2      	cbnz	r2, 8005884 <__hi0bits+0x36>
 8005856:	0403      	lsls	r3, r0, #16
 8005858:	2010      	movs	r0, #16
 800585a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800585e:	bf04      	itt	eq
 8005860:	021b      	lsleq	r3, r3, #8
 8005862:	3008      	addeq	r0, #8
 8005864:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005868:	bf04      	itt	eq
 800586a:	011b      	lsleq	r3, r3, #4
 800586c:	3004      	addeq	r0, #4
 800586e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005872:	bf04      	itt	eq
 8005874:	009b      	lsleq	r3, r3, #2
 8005876:	3002      	addeq	r0, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	db06      	blt.n	800588a <__hi0bits+0x3c>
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	d503      	bpl.n	8005888 <__hi0bits+0x3a>
 8005880:	3001      	adds	r0, #1
 8005882:	4770      	bx	lr
 8005884:	2000      	movs	r0, #0
 8005886:	e7e8      	b.n	800585a <__hi0bits+0xc>
 8005888:	2020      	movs	r0, #32
 800588a:	4770      	bx	lr

0800588c <__lo0bits>:
 800588c:	6803      	ldr	r3, [r0, #0]
 800588e:	4601      	mov	r1, r0
 8005890:	f013 0207 	ands.w	r2, r3, #7
 8005894:	d00b      	beq.n	80058ae <__lo0bits+0x22>
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d423      	bmi.n	80058e2 <__lo0bits+0x56>
 800589a:	0798      	lsls	r0, r3, #30
 800589c:	bf49      	itett	mi
 800589e:	085b      	lsrmi	r3, r3, #1
 80058a0:	089b      	lsrpl	r3, r3, #2
 80058a2:	2001      	movmi	r0, #1
 80058a4:	600b      	strmi	r3, [r1, #0]
 80058a6:	bf5c      	itt	pl
 80058a8:	600b      	strpl	r3, [r1, #0]
 80058aa:	2002      	movpl	r0, #2
 80058ac:	4770      	bx	lr
 80058ae:	b298      	uxth	r0, r3
 80058b0:	b9a8      	cbnz	r0, 80058de <__lo0bits+0x52>
 80058b2:	2010      	movs	r0, #16
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80058ba:	bf04      	itt	eq
 80058bc:	0a1b      	lsreq	r3, r3, #8
 80058be:	3008      	addeq	r0, #8
 80058c0:	071a      	lsls	r2, r3, #28
 80058c2:	bf04      	itt	eq
 80058c4:	091b      	lsreq	r3, r3, #4
 80058c6:	3004      	addeq	r0, #4
 80058c8:	079a      	lsls	r2, r3, #30
 80058ca:	bf04      	itt	eq
 80058cc:	089b      	lsreq	r3, r3, #2
 80058ce:	3002      	addeq	r0, #2
 80058d0:	07da      	lsls	r2, r3, #31
 80058d2:	d402      	bmi.n	80058da <__lo0bits+0x4e>
 80058d4:	085b      	lsrs	r3, r3, #1
 80058d6:	d006      	beq.n	80058e6 <__lo0bits+0x5a>
 80058d8:	3001      	adds	r0, #1
 80058da:	600b      	str	r3, [r1, #0]
 80058dc:	4770      	bx	lr
 80058de:	4610      	mov	r0, r2
 80058e0:	e7e9      	b.n	80058b6 <__lo0bits+0x2a>
 80058e2:	2000      	movs	r0, #0
 80058e4:	4770      	bx	lr
 80058e6:	2020      	movs	r0, #32
 80058e8:	4770      	bx	lr

080058ea <__i2b>:
 80058ea:	b510      	push	{r4, lr}
 80058ec:	460c      	mov	r4, r1
 80058ee:	2101      	movs	r1, #1
 80058f0:	f7ff fee9 	bl	80056c6 <_Balloc>
 80058f4:	2201      	movs	r2, #1
 80058f6:	6144      	str	r4, [r0, #20]
 80058f8:	6102      	str	r2, [r0, #16]
 80058fa:	bd10      	pop	{r4, pc}

080058fc <__multiply>:
 80058fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	4614      	mov	r4, r2
 8005902:	690a      	ldr	r2, [r1, #16]
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	4688      	mov	r8, r1
 8005908:	429a      	cmp	r2, r3
 800590a:	bfbe      	ittt	lt
 800590c:	460b      	movlt	r3, r1
 800590e:	46a0      	movlt	r8, r4
 8005910:	461c      	movlt	r4, r3
 8005912:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005916:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800591a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800591e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005922:	eb07 0609 	add.w	r6, r7, r9
 8005926:	42b3      	cmp	r3, r6
 8005928:	bfb8      	it	lt
 800592a:	3101      	addlt	r1, #1
 800592c:	f7ff fecb 	bl	80056c6 <_Balloc>
 8005930:	f100 0514 	add.w	r5, r0, #20
 8005934:	462b      	mov	r3, r5
 8005936:	2200      	movs	r2, #0
 8005938:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800593c:	4573      	cmp	r3, lr
 800593e:	d316      	bcc.n	800596e <__multiply+0x72>
 8005940:	f104 0214 	add.w	r2, r4, #20
 8005944:	f108 0114 	add.w	r1, r8, #20
 8005948:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800594c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	9b00      	ldr	r3, [sp, #0]
 8005954:	9201      	str	r2, [sp, #4]
 8005956:	4293      	cmp	r3, r2
 8005958:	d80c      	bhi.n	8005974 <__multiply+0x78>
 800595a:	2e00      	cmp	r6, #0
 800595c:	dd03      	ble.n	8005966 <__multiply+0x6a>
 800595e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05d      	beq.n	8005a22 <__multiply+0x126>
 8005966:	6106      	str	r6, [r0, #16]
 8005968:	b003      	add	sp, #12
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	f843 2b04 	str.w	r2, [r3], #4
 8005972:	e7e3      	b.n	800593c <__multiply+0x40>
 8005974:	f8b2 b000 	ldrh.w	fp, [r2]
 8005978:	f1bb 0f00 	cmp.w	fp, #0
 800597c:	d023      	beq.n	80059c6 <__multiply+0xca>
 800597e:	4689      	mov	r9, r1
 8005980:	46ac      	mov	ip, r5
 8005982:	f04f 0800 	mov.w	r8, #0
 8005986:	f859 4b04 	ldr.w	r4, [r9], #4
 800598a:	f8dc a000 	ldr.w	sl, [ip]
 800598e:	b2a3      	uxth	r3, r4
 8005990:	fa1f fa8a 	uxth.w	sl, sl
 8005994:	fb0b a303 	mla	r3, fp, r3, sl
 8005998:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800599c:	f8dc 4000 	ldr.w	r4, [ip]
 80059a0:	4443      	add	r3, r8
 80059a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80059a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80059aa:	46e2      	mov	sl, ip
 80059ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059b6:	454f      	cmp	r7, r9
 80059b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80059bc:	f84a 3b04 	str.w	r3, [sl], #4
 80059c0:	d82b      	bhi.n	8005a1a <__multiply+0x11e>
 80059c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	3204      	adds	r2, #4
 80059ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80059ce:	f1ba 0f00 	cmp.w	sl, #0
 80059d2:	d020      	beq.n	8005a16 <__multiply+0x11a>
 80059d4:	4689      	mov	r9, r1
 80059d6:	46a8      	mov	r8, r5
 80059d8:	f04f 0b00 	mov.w	fp, #0
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	f8b9 c000 	ldrh.w	ip, [r9]
 80059e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	fb0a 440c 	mla	r4, sl, ip, r4
 80059ec:	46c4      	mov	ip, r8
 80059ee:	445c      	add	r4, fp
 80059f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80059f4:	f84c 3b04 	str.w	r3, [ip], #4
 80059f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80059fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	fb0a b303 	mla	r3, sl, r3, fp
 8005a06:	454f      	cmp	r7, r9
 8005a08:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a0c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005a10:	d805      	bhi.n	8005a1e <__multiply+0x122>
 8005a12:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a16:	3504      	adds	r5, #4
 8005a18:	e79b      	b.n	8005952 <__multiply+0x56>
 8005a1a:	46d4      	mov	ip, sl
 8005a1c:	e7b3      	b.n	8005986 <__multiply+0x8a>
 8005a1e:	46e0      	mov	r8, ip
 8005a20:	e7dd      	b.n	80059de <__multiply+0xe2>
 8005a22:	3e01      	subs	r6, #1
 8005a24:	e799      	b.n	800595a <__multiply+0x5e>
	...

08005a28 <__pow5mult>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	4615      	mov	r5, r2
 8005a2e:	f012 0203 	ands.w	r2, r2, #3
 8005a32:	4606      	mov	r6, r0
 8005a34:	460f      	mov	r7, r1
 8005a36:	d007      	beq.n	8005a48 <__pow5mult+0x20>
 8005a38:	4c21      	ldr	r4, [pc, #132]	; (8005ac0 <__pow5mult+0x98>)
 8005a3a:	3a01      	subs	r2, #1
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a42:	f7ff fe8b 	bl	800575c <__multadd>
 8005a46:	4607      	mov	r7, r0
 8005a48:	10ad      	asrs	r5, r5, #2
 8005a4a:	d035      	beq.n	8005ab8 <__pow5mult+0x90>
 8005a4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a4e:	b93c      	cbnz	r4, 8005a60 <__pow5mult+0x38>
 8005a50:	2010      	movs	r0, #16
 8005a52:	f7ff fe05 	bl	8005660 <malloc>
 8005a56:	6270      	str	r0, [r6, #36]	; 0x24
 8005a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a5c:	6004      	str	r4, [r0, #0]
 8005a5e:	60c4      	str	r4, [r0, #12]
 8005a60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a68:	b94c      	cbnz	r4, 8005a7e <__pow5mult+0x56>
 8005a6a:	f240 2171 	movw	r1, #625	; 0x271
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f7ff ff3b 	bl	80058ea <__i2b>
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a7c:	6003      	str	r3, [r0, #0]
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	07eb      	lsls	r3, r5, #31
 8005a84:	d50a      	bpl.n	8005a9c <__pow5mult+0x74>
 8005a86:	4639      	mov	r1, r7
 8005a88:	4622      	mov	r2, r4
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ff36 	bl	80058fc <__multiply>
 8005a90:	4681      	mov	r9, r0
 8005a92:	4639      	mov	r1, r7
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7ff fe4a 	bl	800572e <_Bfree>
 8005a9a:	464f      	mov	r7, r9
 8005a9c:	106d      	asrs	r5, r5, #1
 8005a9e:	d00b      	beq.n	8005ab8 <__pow5mult+0x90>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	b938      	cbnz	r0, 8005ab4 <__pow5mult+0x8c>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff ff27 	bl	80058fc <__multiply>
 8005aae:	6020      	str	r0, [r4, #0]
 8005ab0:	f8c0 8000 	str.w	r8, [r0]
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	e7e4      	b.n	8005a82 <__pow5mult+0x5a>
 8005ab8:	4638      	mov	r0, r7
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	bf00      	nop
 8005ac0:	08006590 	.word	0x08006590

08005ac4 <__lshift>:
 8005ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	460c      	mov	r4, r1
 8005aca:	4607      	mov	r7, r0
 8005acc:	4616      	mov	r6, r2
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ad4:	eb0a 0903 	add.w	r9, sl, r3
 8005ad8:	6849      	ldr	r1, [r1, #4]
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	f109 0501 	add.w	r5, r9, #1
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	db32      	blt.n	8005b4a <__lshift+0x86>
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f7ff fdee 	bl	80056c6 <_Balloc>
 8005aea:	2300      	movs	r3, #0
 8005aec:	4680      	mov	r8, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	f100 0114 	add.w	r1, r0, #20
 8005af4:	4553      	cmp	r3, sl
 8005af6:	db2b      	blt.n	8005b50 <__lshift+0x8c>
 8005af8:	6920      	ldr	r0, [r4, #16]
 8005afa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005afe:	f104 0314 	add.w	r3, r4, #20
 8005b02:	f016 021f 	ands.w	r2, r6, #31
 8005b06:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b0a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b0e:	d025      	beq.n	8005b5c <__lshift+0x98>
 8005b10:	2000      	movs	r0, #0
 8005b12:	f1c2 0e20 	rsb	lr, r2, #32
 8005b16:	468a      	mov	sl, r1
 8005b18:	681e      	ldr	r6, [r3, #0]
 8005b1a:	4096      	lsls	r6, r2
 8005b1c:	4330      	orrs	r0, r6
 8005b1e:	f84a 0b04 	str.w	r0, [sl], #4
 8005b22:	f853 0b04 	ldr.w	r0, [r3], #4
 8005b26:	459c      	cmp	ip, r3
 8005b28:	fa20 f00e 	lsr.w	r0, r0, lr
 8005b2c:	d814      	bhi.n	8005b58 <__lshift+0x94>
 8005b2e:	6048      	str	r0, [r1, #4]
 8005b30:	b108      	cbz	r0, 8005b36 <__lshift+0x72>
 8005b32:	f109 0502 	add.w	r5, r9, #2
 8005b36:	3d01      	subs	r5, #1
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f8c8 5010 	str.w	r5, [r8, #16]
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f7ff fdf5 	bl	800572e <_Bfree>
 8005b44:	4640      	mov	r0, r8
 8005b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4a:	3101      	adds	r1, #1
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	e7c7      	b.n	8005ae0 <__lshift+0x1c>
 8005b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005b54:	3301      	adds	r3, #1
 8005b56:	e7cd      	b.n	8005af4 <__lshift+0x30>
 8005b58:	4651      	mov	r1, sl
 8005b5a:	e7dc      	b.n	8005b16 <__lshift+0x52>
 8005b5c:	3904      	subs	r1, #4
 8005b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b62:	459c      	cmp	ip, r3
 8005b64:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b68:	d8f9      	bhi.n	8005b5e <__lshift+0x9a>
 8005b6a:	e7e4      	b.n	8005b36 <__lshift+0x72>

08005b6c <__mcmp>:
 8005b6c:	6903      	ldr	r3, [r0, #16]
 8005b6e:	690a      	ldr	r2, [r1, #16]
 8005b70:	b530      	push	{r4, r5, lr}
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	d10c      	bne.n	8005b90 <__mcmp+0x24>
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	3014      	adds	r0, #20
 8005b7a:	3114      	adds	r1, #20
 8005b7c:	1884      	adds	r4, r0, r2
 8005b7e:	4411      	add	r1, r2
 8005b80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b88:	4295      	cmp	r5, r2
 8005b8a:	d003      	beq.n	8005b94 <__mcmp+0x28>
 8005b8c:	d305      	bcc.n	8005b9a <__mcmp+0x2e>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd30      	pop	{r4, r5, pc}
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d3f3      	bcc.n	8005b80 <__mcmp+0x14>
 8005b98:	e7fa      	b.n	8005b90 <__mcmp+0x24>
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	e7f7      	b.n	8005b90 <__mcmp+0x24>

08005ba0 <__mdiff>:
 8005ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4628      	mov	r0, r5
 8005bac:	4614      	mov	r4, r2
 8005bae:	f7ff ffdd 	bl	8005b6c <__mcmp>
 8005bb2:	1e06      	subs	r6, r0, #0
 8005bb4:	d108      	bne.n	8005bc8 <__mdiff+0x28>
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7ff fd84 	bl	80056c6 <_Balloc>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc8:	bfa4      	itt	ge
 8005bca:	4623      	movge	r3, r4
 8005bcc:	462c      	movge	r4, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	6861      	ldr	r1, [r4, #4]
 8005bd2:	bfa6      	itte	ge
 8005bd4:	461d      	movge	r5, r3
 8005bd6:	2600      	movge	r6, #0
 8005bd8:	2601      	movlt	r6, #1
 8005bda:	f7ff fd74 	bl	80056c6 <_Balloc>
 8005bde:	f04f 0e00 	mov.w	lr, #0
 8005be2:	60c6      	str	r6, [r0, #12]
 8005be4:	692b      	ldr	r3, [r5, #16]
 8005be6:	6926      	ldr	r6, [r4, #16]
 8005be8:	f104 0214 	add.w	r2, r4, #20
 8005bec:	f105 0914 	add.w	r9, r5, #20
 8005bf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005bf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005bf8:	f100 0114 	add.w	r1, r0, #20
 8005bfc:	f852 ab04 	ldr.w	sl, [r2], #4
 8005c00:	f859 5b04 	ldr.w	r5, [r9], #4
 8005c04:	fa1f f38a 	uxth.w	r3, sl
 8005c08:	4473      	add	r3, lr
 8005c0a:	b2ac      	uxth	r4, r5
 8005c0c:	1b1b      	subs	r3, r3, r4
 8005c0e:	0c2c      	lsrs	r4, r5, #16
 8005c10:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005c14:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005c1e:	45c8      	cmp	r8, r9
 8005c20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005c24:	4694      	mov	ip, r2
 8005c26:	f841 4b04 	str.w	r4, [r1], #4
 8005c2a:	d8e7      	bhi.n	8005bfc <__mdiff+0x5c>
 8005c2c:	45bc      	cmp	ip, r7
 8005c2e:	d304      	bcc.n	8005c3a <__mdiff+0x9a>
 8005c30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c34:	b183      	cbz	r3, 8005c58 <__mdiff+0xb8>
 8005c36:	6106      	str	r6, [r0, #16]
 8005c38:	e7c4      	b.n	8005bc4 <__mdiff+0x24>
 8005c3a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005c3e:	b2a2      	uxth	r2, r4
 8005c40:	4472      	add	r2, lr
 8005c42:	1413      	asrs	r3, r2, #16
 8005c44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c48:	b292      	uxth	r2, r2
 8005c4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c4e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005c52:	f841 2b04 	str.w	r2, [r1], #4
 8005c56:	e7e9      	b.n	8005c2c <__mdiff+0x8c>
 8005c58:	3e01      	subs	r6, #1
 8005c5a:	e7e9      	b.n	8005c30 <__mdiff+0x90>

08005c5c <__ulp>:
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <__ulp+0x44>)
 8005c5e:	400b      	ands	r3, r1
 8005c60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dd02      	ble.n	8005c6e <__ulp+0x12>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4770      	bx	lr
 8005c6e:	425b      	negs	r3, r3
 8005c70:	151b      	asrs	r3, r3, #20
 8005c72:	2b13      	cmp	r3, #19
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	dc04      	bgt.n	8005c88 <__ulp+0x2c>
 8005c7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005c82:	fa42 f103 	asr.w	r1, r2, r3
 8005c86:	4770      	bx	lr
 8005c88:	2201      	movs	r2, #1
 8005c8a:	3b14      	subs	r3, #20
 8005c8c:	2b1e      	cmp	r3, #30
 8005c8e:	bfce      	itee	gt
 8005c90:	4613      	movgt	r3, r2
 8005c92:	f1c3 031f 	rsble	r3, r3, #31
 8005c96:	fa02 f303 	lslle.w	r3, r2, r3
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	7ff00000 	.word	0x7ff00000

08005ca4 <__b2d>:
 8005ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	6907      	ldr	r7, [r0, #16]
 8005caa:	f100 0914 	add.w	r9, r0, #20
 8005cae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005cb2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005cb6:	f1a7 0804 	sub.w	r8, r7, #4
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff fdc7 	bl	800584e <__hi0bits>
 8005cc0:	f1c0 0320 	rsb	r3, r0, #32
 8005cc4:	280a      	cmp	r0, #10
 8005cc6:	600b      	str	r3, [r1, #0]
 8005cc8:	491e      	ldr	r1, [pc, #120]	; (8005d44 <__b2d+0xa0>)
 8005cca:	dc17      	bgt.n	8005cfc <__b2d+0x58>
 8005ccc:	45c1      	cmp	r9, r8
 8005cce:	bf28      	it	cs
 8005cd0:	2200      	movcs	r2, #0
 8005cd2:	f1c0 0c0b 	rsb	ip, r0, #11
 8005cd6:	fa26 f30c 	lsr.w	r3, r6, ip
 8005cda:	bf38      	it	cc
 8005cdc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005ce0:	ea43 0501 	orr.w	r5, r3, r1
 8005ce4:	f100 0315 	add.w	r3, r0, #21
 8005ce8:	fa06 f303 	lsl.w	r3, r6, r3
 8005cec:	fa22 f20c 	lsr.w	r2, r2, ip
 8005cf0:	ea43 0402 	orr.w	r4, r3, r2
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfc:	45c1      	cmp	r9, r8
 8005cfe:	bf3a      	itte	cc
 8005d00:	f1a7 0808 	subcc.w	r8, r7, #8
 8005d04:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005d08:	2200      	movcs	r2, #0
 8005d0a:	f1b0 030b 	subs.w	r3, r0, #11
 8005d0e:	d015      	beq.n	8005d3c <__b2d+0x98>
 8005d10:	409e      	lsls	r6, r3
 8005d12:	f1c3 0720 	rsb	r7, r3, #32
 8005d16:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8005d1a:	fa22 f107 	lsr.w	r1, r2, r7
 8005d1e:	45c8      	cmp	r8, r9
 8005d20:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005d24:	ea46 0501 	orr.w	r5, r6, r1
 8005d28:	bf94      	ite	ls
 8005d2a:	2100      	movls	r1, #0
 8005d2c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005d30:	fa02 f003 	lsl.w	r0, r2, r3
 8005d34:	40f9      	lsrs	r1, r7
 8005d36:	ea40 0401 	orr.w	r4, r0, r1
 8005d3a:	e7db      	b.n	8005cf4 <__b2d+0x50>
 8005d3c:	ea46 0501 	orr.w	r5, r6, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	e7d7      	b.n	8005cf4 <__b2d+0x50>
 8005d44:	3ff00000 	.word	0x3ff00000

08005d48 <__d2b>:
 8005d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d4c:	461c      	mov	r4, r3
 8005d4e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005d52:	2101      	movs	r1, #1
 8005d54:	4690      	mov	r8, r2
 8005d56:	f7ff fcb6 	bl	80056c6 <_Balloc>
 8005d5a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005d5e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005d62:	4607      	mov	r7, r0
 8005d64:	bb34      	cbnz	r4, 8005db4 <__d2b+0x6c>
 8005d66:	9201      	str	r2, [sp, #4]
 8005d68:	f1b8 0200 	subs.w	r2, r8, #0
 8005d6c:	d027      	beq.n	8005dbe <__d2b+0x76>
 8005d6e:	a802      	add	r0, sp, #8
 8005d70:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005d74:	f7ff fd8a 	bl	800588c <__lo0bits>
 8005d78:	9900      	ldr	r1, [sp, #0]
 8005d7a:	b1f0      	cbz	r0, 8005dba <__d2b+0x72>
 8005d7c:	9a01      	ldr	r2, [sp, #4]
 8005d7e:	f1c0 0320 	rsb	r3, r0, #32
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	430b      	orrs	r3, r1
 8005d88:	40c2      	lsrs	r2, r0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	9201      	str	r2, [sp, #4]
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2102      	movne	r1, #2
 8005d96:	2101      	moveq	r1, #1
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	6139      	str	r1, [r7, #16]
 8005d9c:	b1c4      	cbz	r4, 8005dd0 <__d2b+0x88>
 8005d9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005da2:	4404      	add	r4, r0
 8005da4:	6034      	str	r4, [r6, #0]
 8005da6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005daa:	6028      	str	r0, [r5, #0]
 8005dac:	4638      	mov	r0, r7
 8005dae:	b002      	add	sp, #8
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005db8:	e7d5      	b.n	8005d66 <__d2b+0x1e>
 8005dba:	6179      	str	r1, [r7, #20]
 8005dbc:	e7e7      	b.n	8005d8e <__d2b+0x46>
 8005dbe:	a801      	add	r0, sp, #4
 8005dc0:	f7ff fd64 	bl	800588c <__lo0bits>
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	6139      	str	r1, [r7, #16]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	3020      	adds	r0, #32
 8005dce:	e7e5      	b.n	8005d9c <__d2b+0x54>
 8005dd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005dd4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005dd8:	6030      	str	r0, [r6, #0]
 8005dda:	6918      	ldr	r0, [r3, #16]
 8005ddc:	f7ff fd37 	bl	800584e <__hi0bits>
 8005de0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005de4:	e7e1      	b.n	8005daa <__d2b+0x62>

08005de6 <__ratio>:
 8005de6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dea:	4688      	mov	r8, r1
 8005dec:	4669      	mov	r1, sp
 8005dee:	4681      	mov	r9, r0
 8005df0:	f7ff ff58 	bl	8005ca4 <__b2d>
 8005df4:	468b      	mov	fp, r1
 8005df6:	4606      	mov	r6, r0
 8005df8:	460f      	mov	r7, r1
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	a901      	add	r1, sp, #4
 8005dfe:	f7ff ff51 	bl	8005ca4 <__b2d>
 8005e02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e06:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	eba3 0c02 	sub.w	ip, r3, r2
 8005e10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bfd5      	itete	le
 8005e1e:	460a      	movle	r2, r1
 8005e20:	463a      	movgt	r2, r7
 8005e22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005e26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005e2a:	bfd8      	it	le
 8005e2c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8005e30:	462b      	mov	r3, r5
 8005e32:	4602      	mov	r2, r0
 8005e34:	4659      	mov	r1, fp
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7fa fc78 	bl	800072c <__aeabi_ddiv>
 8005e3c:	b003      	add	sp, #12
 8005e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e42 <__copybits>:
 8005e42:	3901      	subs	r1, #1
 8005e44:	b510      	push	{r4, lr}
 8005e46:	1149      	asrs	r1, r1, #5
 8005e48:	6914      	ldr	r4, [r2, #16]
 8005e4a:	3101      	adds	r1, #1
 8005e4c:	f102 0314 	add.w	r3, r2, #20
 8005e50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005e54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	d303      	bcc.n	8005e66 <__copybits+0x24>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	428a      	cmp	r2, r1
 8005e62:	d305      	bcc.n	8005e70 <__copybits+0x2e>
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6a:	f840 2b04 	str.w	r2, [r0], #4
 8005e6e:	e7f3      	b.n	8005e58 <__copybits+0x16>
 8005e70:	f842 3b04 	str.w	r3, [r2], #4
 8005e74:	e7f4      	b.n	8005e60 <__copybits+0x1e>

08005e76 <__any_on>:
 8005e76:	f100 0214 	add.w	r2, r0, #20
 8005e7a:	6900      	ldr	r0, [r0, #16]
 8005e7c:	114b      	asrs	r3, r1, #5
 8005e7e:	4298      	cmp	r0, r3
 8005e80:	b510      	push	{r4, lr}
 8005e82:	db11      	blt.n	8005ea8 <__any_on+0x32>
 8005e84:	dd0a      	ble.n	8005e9c <__any_on+0x26>
 8005e86:	f011 011f 	ands.w	r1, r1, #31
 8005e8a:	d007      	beq.n	8005e9c <__any_on+0x26>
 8005e8c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005e90:	fa24 f001 	lsr.w	r0, r4, r1
 8005e94:	fa00 f101 	lsl.w	r1, r0, r1
 8005e98:	428c      	cmp	r4, r1
 8005e9a:	d10b      	bne.n	8005eb4 <__any_on+0x3e>
 8005e9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d803      	bhi.n	8005eac <__any_on+0x36>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	bd10      	pop	{r4, pc}
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	e7f7      	b.n	8005e9c <__any_on+0x26>
 8005eac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	d0f5      	beq.n	8005ea0 <__any_on+0x2a>
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e7f6      	b.n	8005ea6 <__any_on+0x30>

08005eb8 <_calloc_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	fb02 f401 	mul.w	r4, r2, r1
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f000 f854 	bl	8005f6c <_malloc_r>
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b118      	cbz	r0, 8005ed0 <_calloc_r+0x18>
 8005ec8:	4622      	mov	r2, r4
 8005eca:	2100      	movs	r1, #0
 8005ecc:	f7fc fd2e 	bl	800292c <memset>
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}

08005ed4 <_free_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	d043      	beq.n	8005f64 <_free_r+0x90>
 8005edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee0:	1f0c      	subs	r4, r1, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfb8      	it	lt
 8005ee6:	18e4      	addlt	r4, r4, r3
 8005ee8:	f000 fa34 	bl	8006354 <__malloc_lock>
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <_free_r+0x94>)
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	b933      	cbnz	r3, 8005f02 <_free_r+0x2e>
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	6014      	str	r4, [r2, #0]
 8005ef8:	4628      	mov	r0, r5
 8005efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005efe:	f000 ba2a 	b.w	8006356 <__malloc_unlock>
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	d90b      	bls.n	8005f1e <_free_r+0x4a>
 8005f06:	6821      	ldr	r1, [r4, #0]
 8005f08:	1862      	adds	r2, r4, r1
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bf01      	itttt	eq
 8005f0e:	681a      	ldreq	r2, [r3, #0]
 8005f10:	685b      	ldreq	r3, [r3, #4]
 8005f12:	1852      	addeq	r2, r2, r1
 8005f14:	6022      	streq	r2, [r4, #0]
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6004      	str	r4, [r0, #0]
 8005f1a:	e7ed      	b.n	8005ef8 <_free_r+0x24>
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	b10a      	cbz	r2, 8005f26 <_free_r+0x52>
 8005f22:	42a2      	cmp	r2, r4
 8005f24:	d9fa      	bls.n	8005f1c <_free_r+0x48>
 8005f26:	6819      	ldr	r1, [r3, #0]
 8005f28:	1858      	adds	r0, r3, r1
 8005f2a:	42a0      	cmp	r0, r4
 8005f2c:	d10b      	bne.n	8005f46 <_free_r+0x72>
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	4401      	add	r1, r0
 8005f32:	1858      	adds	r0, r3, r1
 8005f34:	4282      	cmp	r2, r0
 8005f36:	6019      	str	r1, [r3, #0]
 8005f38:	d1de      	bne.n	8005ef8 <_free_r+0x24>
 8005f3a:	6810      	ldr	r0, [r2, #0]
 8005f3c:	6852      	ldr	r2, [r2, #4]
 8005f3e:	4401      	add	r1, r0
 8005f40:	6019      	str	r1, [r3, #0]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	e7d8      	b.n	8005ef8 <_free_r+0x24>
 8005f46:	d902      	bls.n	8005f4e <_free_r+0x7a>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	e7d4      	b.n	8005ef8 <_free_r+0x24>
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	1821      	adds	r1, r4, r0
 8005f52:	428a      	cmp	r2, r1
 8005f54:	bf01      	itttt	eq
 8005f56:	6811      	ldreq	r1, [r2, #0]
 8005f58:	6852      	ldreq	r2, [r2, #4]
 8005f5a:	1809      	addeq	r1, r1, r0
 8005f5c:	6021      	streq	r1, [r4, #0]
 8005f5e:	6062      	str	r2, [r4, #4]
 8005f60:	605c      	str	r4, [r3, #4]
 8005f62:	e7c9      	b.n	8005ef8 <_free_r+0x24>
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	2000020c 	.word	0x2000020c

08005f6c <_malloc_r>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	1ccd      	adds	r5, r1, #3
 8005f70:	f025 0503 	bic.w	r5, r5, #3
 8005f74:	3508      	adds	r5, #8
 8005f76:	2d0c      	cmp	r5, #12
 8005f78:	bf38      	it	cc
 8005f7a:	250c      	movcc	r5, #12
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	db01      	blt.n	8005f86 <_malloc_r+0x1a>
 8005f82:	42a9      	cmp	r1, r5
 8005f84:	d903      	bls.n	8005f8e <_malloc_r+0x22>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
 8005f8e:	f000 f9e1 	bl	8006354 <__malloc_lock>
 8005f92:	4a21      	ldr	r2, [pc, #132]	; (8006018 <_malloc_r+0xac>)
 8005f94:	6814      	ldr	r4, [r2, #0]
 8005f96:	4621      	mov	r1, r4
 8005f98:	b991      	cbnz	r1, 8005fc0 <_malloc_r+0x54>
 8005f9a:	4c20      	ldr	r4, [pc, #128]	; (800601c <_malloc_r+0xb0>)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	b91b      	cbnz	r3, 8005fa8 <_malloc_r+0x3c>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 f98f 	bl	80062c4 <_sbrk_r>
 8005fa6:	6020      	str	r0, [r4, #0]
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f98a 	bl	80062c4 <_sbrk_r>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d124      	bne.n	8005ffe <_malloc_r+0x92>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	f000 f9cc 	bl	8006356 <__malloc_unlock>
 8005fbe:	e7e4      	b.n	8005f8a <_malloc_r+0x1e>
 8005fc0:	680b      	ldr	r3, [r1, #0]
 8005fc2:	1b5b      	subs	r3, r3, r5
 8005fc4:	d418      	bmi.n	8005ff8 <_malloc_r+0x8c>
 8005fc6:	2b0b      	cmp	r3, #11
 8005fc8:	d90f      	bls.n	8005fea <_malloc_r+0x7e>
 8005fca:	600b      	str	r3, [r1, #0]
 8005fcc:	18cc      	adds	r4, r1, r3
 8005fce:	50cd      	str	r5, [r1, r3]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f9c0 	bl	8006356 <__malloc_unlock>
 8005fd6:	f104 000b 	add.w	r0, r4, #11
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	f020 0007 	bic.w	r0, r0, #7
 8005fe0:	1ac3      	subs	r3, r0, r3
 8005fe2:	d0d3      	beq.n	8005f8c <_malloc_r+0x20>
 8005fe4:	425a      	negs	r2, r3
 8005fe6:	50e2      	str	r2, [r4, r3]
 8005fe8:	e7d0      	b.n	8005f8c <_malloc_r+0x20>
 8005fea:	684b      	ldr	r3, [r1, #4]
 8005fec:	428c      	cmp	r4, r1
 8005fee:	bf16      	itet	ne
 8005ff0:	6063      	strne	r3, [r4, #4]
 8005ff2:	6013      	streq	r3, [r2, #0]
 8005ff4:	460c      	movne	r4, r1
 8005ff6:	e7eb      	b.n	8005fd0 <_malloc_r+0x64>
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	6849      	ldr	r1, [r1, #4]
 8005ffc:	e7cc      	b.n	8005f98 <_malloc_r+0x2c>
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d005      	beq.n	8006014 <_malloc_r+0xa8>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4630      	mov	r0, r6
 800600c:	f000 f95a 	bl	80062c4 <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d0cf      	beq.n	8005fb4 <_malloc_r+0x48>
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	e7db      	b.n	8005fd0 <_malloc_r+0x64>
 8006018:	2000020c 	.word	0x2000020c
 800601c:	20000210 	.word	0x20000210

08006020 <__ssputs_r>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	688e      	ldr	r6, [r1, #8]
 8006026:	4682      	mov	sl, r0
 8006028:	429e      	cmp	r6, r3
 800602a:	460c      	mov	r4, r1
 800602c:	4690      	mov	r8, r2
 800602e:	4699      	mov	r9, r3
 8006030:	d837      	bhi.n	80060a2 <__ssputs_r+0x82>
 8006032:	898a      	ldrh	r2, [r1, #12]
 8006034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006038:	d031      	beq.n	800609e <__ssputs_r+0x7e>
 800603a:	2302      	movs	r3, #2
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	6909      	ldr	r1, [r1, #16]
 8006040:	1a6f      	subs	r7, r5, r1
 8006042:	6965      	ldr	r5, [r4, #20]
 8006044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006048:	fb95 f5f3 	sdiv	r5, r5, r3
 800604c:	f109 0301 	add.w	r3, r9, #1
 8006050:	443b      	add	r3, r7
 8006052:	429d      	cmp	r5, r3
 8006054:	bf38      	it	cc
 8006056:	461d      	movcc	r5, r3
 8006058:	0553      	lsls	r3, r2, #21
 800605a:	d530      	bpl.n	80060be <__ssputs_r+0x9e>
 800605c:	4629      	mov	r1, r5
 800605e:	f7ff ff85 	bl	8005f6c <_malloc_r>
 8006062:	4606      	mov	r6, r0
 8006064:	b950      	cbnz	r0, 800607c <__ssputs_r+0x5c>
 8006066:	230c      	movs	r3, #12
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	f8ca 3000 	str.w	r3, [sl]
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	463a      	mov	r2, r7
 800607e:	6921      	ldr	r1, [r4, #16]
 8006080:	f7ff fb16 	bl	80056b0 <memcpy>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	6126      	str	r6, [r4, #16]
 8006092:	443e      	add	r6, r7
 8006094:	6026      	str	r6, [r4, #0]
 8006096:	464e      	mov	r6, r9
 8006098:	6165      	str	r5, [r4, #20]
 800609a:	1bed      	subs	r5, r5, r7
 800609c:	60a5      	str	r5, [r4, #8]
 800609e:	454e      	cmp	r6, r9
 80060a0:	d900      	bls.n	80060a4 <__ssputs_r+0x84>
 80060a2:	464e      	mov	r6, r9
 80060a4:	4632      	mov	r2, r6
 80060a6:	4641      	mov	r1, r8
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	f000 f93a 	bl	8006322 <memmove>
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	2000      	movs	r0, #0
 80060b2:	1b9b      	subs	r3, r3, r6
 80060b4:	60a3      	str	r3, [r4, #8]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	441e      	add	r6, r3
 80060ba:	6026      	str	r6, [r4, #0]
 80060bc:	e7dc      	b.n	8006078 <__ssputs_r+0x58>
 80060be:	462a      	mov	r2, r5
 80060c0:	f000 f94a 	bl	8006358 <_realloc_r>
 80060c4:	4606      	mov	r6, r0
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d1e2      	bne.n	8006090 <__ssputs_r+0x70>
 80060ca:	6921      	ldr	r1, [r4, #16]
 80060cc:	4650      	mov	r0, sl
 80060ce:	f7ff ff01 	bl	8005ed4 <_free_r>
 80060d2:	e7c8      	b.n	8006066 <__ssputs_r+0x46>

080060d4 <_svfiprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	461d      	mov	r5, r3
 80060da:	898b      	ldrh	r3, [r1, #12]
 80060dc:	b09d      	sub	sp, #116	; 0x74
 80060de:	061f      	lsls	r7, r3, #24
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4616      	mov	r6, r2
 80060e6:	d50f      	bpl.n	8006108 <_svfiprintf_r+0x34>
 80060e8:	690b      	ldr	r3, [r1, #16]
 80060ea:	b96b      	cbnz	r3, 8006108 <_svfiprintf_r+0x34>
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	f7ff ff3d 	bl	8005f6c <_malloc_r>
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	6120      	str	r0, [r4, #16]
 80060f6:	b928      	cbnz	r0, 8006104 <_svfiprintf_r+0x30>
 80060f8:	230c      	movs	r3, #12
 80060fa:	f8c8 3000 	str.w	r3, [r8]
 80060fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006102:	e0c8      	b.n	8006296 <_svfiprintf_r+0x1c2>
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	6163      	str	r3, [r4, #20]
 8006108:	2300      	movs	r3, #0
 800610a:	9309      	str	r3, [sp, #36]	; 0x24
 800610c:	2320      	movs	r3, #32
 800610e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006112:	2330      	movs	r3, #48	; 0x30
 8006114:	f04f 0b01 	mov.w	fp, #1
 8006118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611c:	9503      	str	r5, [sp, #12]
 800611e:	4637      	mov	r7, r6
 8006120:	463d      	mov	r5, r7
 8006122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006126:	b10b      	cbz	r3, 800612c <_svfiprintf_r+0x58>
 8006128:	2b25      	cmp	r3, #37	; 0x25
 800612a:	d13e      	bne.n	80061aa <_svfiprintf_r+0xd6>
 800612c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006130:	d00b      	beq.n	800614a <_svfiprintf_r+0x76>
 8006132:	4653      	mov	r3, sl
 8006134:	4632      	mov	r2, r6
 8006136:	4621      	mov	r1, r4
 8006138:	4640      	mov	r0, r8
 800613a:	f7ff ff71 	bl	8006020 <__ssputs_r>
 800613e:	3001      	adds	r0, #1
 8006140:	f000 80a4 	beq.w	800628c <_svfiprintf_r+0x1b8>
 8006144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006146:	4453      	add	r3, sl
 8006148:	9309      	str	r3, [sp, #36]	; 0x24
 800614a:	783b      	ldrb	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 809d 	beq.w	800628c <_svfiprintf_r+0x1b8>
 8006152:	2300      	movs	r3, #0
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006164:	931a      	str	r3, [sp, #104]	; 0x68
 8006166:	462f      	mov	r7, r5
 8006168:	2205      	movs	r2, #5
 800616a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800616e:	4850      	ldr	r0, [pc, #320]	; (80062b0 <_svfiprintf_r+0x1dc>)
 8006170:	f7ff fa90 	bl	8005694 <memchr>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	b9d0      	cbnz	r0, 80061ae <_svfiprintf_r+0xda>
 8006178:	06d9      	lsls	r1, r3, #27
 800617a:	bf44      	itt	mi
 800617c:	2220      	movmi	r2, #32
 800617e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006182:	071a      	lsls	r2, r3, #28
 8006184:	bf44      	itt	mi
 8006186:	222b      	movmi	r2, #43	; 0x2b
 8006188:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800618c:	782a      	ldrb	r2, [r5, #0]
 800618e:	2a2a      	cmp	r2, #42	; 0x2a
 8006190:	d015      	beq.n	80061be <_svfiprintf_r+0xea>
 8006192:	462f      	mov	r7, r5
 8006194:	2000      	movs	r0, #0
 8006196:	250a      	movs	r5, #10
 8006198:	9a07      	ldr	r2, [sp, #28]
 800619a:	4639      	mov	r1, r7
 800619c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a0:	3b30      	subs	r3, #48	; 0x30
 80061a2:	2b09      	cmp	r3, #9
 80061a4:	d94d      	bls.n	8006242 <_svfiprintf_r+0x16e>
 80061a6:	b1b8      	cbz	r0, 80061d8 <_svfiprintf_r+0x104>
 80061a8:	e00f      	b.n	80061ca <_svfiprintf_r+0xf6>
 80061aa:	462f      	mov	r7, r5
 80061ac:	e7b8      	b.n	8006120 <_svfiprintf_r+0x4c>
 80061ae:	4a40      	ldr	r2, [pc, #256]	; (80062b0 <_svfiprintf_r+0x1dc>)
 80061b0:	463d      	mov	r5, r7
 80061b2:	1a80      	subs	r0, r0, r2
 80061b4:	fa0b f000 	lsl.w	r0, fp, r0
 80061b8:	4318      	orrs	r0, r3
 80061ba:	9004      	str	r0, [sp, #16]
 80061bc:	e7d3      	b.n	8006166 <_svfiprintf_r+0x92>
 80061be:	9a03      	ldr	r2, [sp, #12]
 80061c0:	1d11      	adds	r1, r2, #4
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	9103      	str	r1, [sp, #12]
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	db01      	blt.n	80061ce <_svfiprintf_r+0xfa>
 80061ca:	9207      	str	r2, [sp, #28]
 80061cc:	e004      	b.n	80061d8 <_svfiprintf_r+0x104>
 80061ce:	4252      	negs	r2, r2
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	9207      	str	r2, [sp, #28]
 80061d6:	9304      	str	r3, [sp, #16]
 80061d8:	783b      	ldrb	r3, [r7, #0]
 80061da:	2b2e      	cmp	r3, #46	; 0x2e
 80061dc:	d10c      	bne.n	80061f8 <_svfiprintf_r+0x124>
 80061de:	787b      	ldrb	r3, [r7, #1]
 80061e0:	2b2a      	cmp	r3, #42	; 0x2a
 80061e2:	d133      	bne.n	800624c <_svfiprintf_r+0x178>
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	3702      	adds	r7, #2
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	9203      	str	r2, [sp, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfb8      	it	lt
 80061f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f6:	9305      	str	r3, [sp, #20]
 80061f8:	4d2e      	ldr	r5, [pc, #184]	; (80062b4 <_svfiprintf_r+0x1e0>)
 80061fa:	2203      	movs	r2, #3
 80061fc:	7839      	ldrb	r1, [r7, #0]
 80061fe:	4628      	mov	r0, r5
 8006200:	f7ff fa48 	bl	8005694 <memchr>
 8006204:	b138      	cbz	r0, 8006216 <_svfiprintf_r+0x142>
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	1b40      	subs	r0, r0, r5
 800620a:	fa03 f000 	lsl.w	r0, r3, r0
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3701      	adds	r7, #1
 8006212:	4303      	orrs	r3, r0
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	7839      	ldrb	r1, [r7, #0]
 8006218:	2206      	movs	r2, #6
 800621a:	4827      	ldr	r0, [pc, #156]	; (80062b8 <_svfiprintf_r+0x1e4>)
 800621c:	1c7e      	adds	r6, r7, #1
 800621e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006222:	f7ff fa37 	bl	8005694 <memchr>
 8006226:	2800      	cmp	r0, #0
 8006228:	d038      	beq.n	800629c <_svfiprintf_r+0x1c8>
 800622a:	4b24      	ldr	r3, [pc, #144]	; (80062bc <_svfiprintf_r+0x1e8>)
 800622c:	bb13      	cbnz	r3, 8006274 <_svfiprintf_r+0x1a0>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	f023 0307 	bic.w	r3, r3, #7
 8006236:	3308      	adds	r3, #8
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623c:	444b      	add	r3, r9
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	e76d      	b.n	800611e <_svfiprintf_r+0x4a>
 8006242:	fb05 3202 	mla	r2, r5, r2, r3
 8006246:	2001      	movs	r0, #1
 8006248:	460f      	mov	r7, r1
 800624a:	e7a6      	b.n	800619a <_svfiprintf_r+0xc6>
 800624c:	2300      	movs	r3, #0
 800624e:	250a      	movs	r5, #10
 8006250:	4619      	mov	r1, r3
 8006252:	3701      	adds	r7, #1
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	4638      	mov	r0, r7
 8006258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625c:	3a30      	subs	r2, #48	; 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d903      	bls.n	800626a <_svfiprintf_r+0x196>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c8      	beq.n	80061f8 <_svfiprintf_r+0x124>
 8006266:	9105      	str	r1, [sp, #20]
 8006268:	e7c6      	b.n	80061f8 <_svfiprintf_r+0x124>
 800626a:	fb05 2101 	mla	r1, r5, r1, r2
 800626e:	2301      	movs	r3, #1
 8006270:	4607      	mov	r7, r0
 8006272:	e7f0      	b.n	8006256 <_svfiprintf_r+0x182>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4622      	mov	r2, r4
 800627a:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <_svfiprintf_r+0x1ec>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4640      	mov	r0, r8
 8006280:	f7fc fbee 	bl	8002a60 <_printf_float>
 8006284:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006288:	4681      	mov	r9, r0
 800628a:	d1d6      	bne.n	800623a <_svfiprintf_r+0x166>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	065b      	lsls	r3, r3, #25
 8006290:	f53f af35 	bmi.w	80060fe <_svfiprintf_r+0x2a>
 8006294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006296:	b01d      	add	sp, #116	; 0x74
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	ab03      	add	r3, sp, #12
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	4622      	mov	r2, r4
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_svfiprintf_r+0x1ec>)
 80062a4:	a904      	add	r1, sp, #16
 80062a6:	4640      	mov	r0, r8
 80062a8:	f7fc fe86 	bl	8002fb8 <_printf_i>
 80062ac:	e7ea      	b.n	8006284 <_svfiprintf_r+0x1b0>
 80062ae:	bf00      	nop
 80062b0:	0800659c 	.word	0x0800659c
 80062b4:	080065a2 	.word	0x080065a2
 80062b8:	080065a6 	.word	0x080065a6
 80062bc:	08002a61 	.word	0x08002a61
 80062c0:	08006021 	.word	0x08006021

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	2300      	movs	r3, #0
 80062c8:	4c05      	ldr	r4, [pc, #20]	; (80062e0 <_sbrk_r+0x1c>)
 80062ca:	4605      	mov	r5, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	f7fa ff98 	bl	8001204 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	2000026c 	.word	0x2000026c

080062e4 <strncmp>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	b16a      	cbz	r2, 8006304 <strncmp+0x20>
 80062e8:	3901      	subs	r1, #1
 80062ea:	1884      	adds	r4, r0, r2
 80062ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <strncmp+0x1c>
 80062f8:	42a0      	cmp	r0, r4
 80062fa:	d001      	beq.n	8006300 <strncmp+0x1c>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f5      	bne.n	80062ec <strncmp+0x8>
 8006300:	1a98      	subs	r0, r3, r2
 8006302:	bd10      	pop	{r4, pc}
 8006304:	4610      	mov	r0, r2
 8006306:	e7fc      	b.n	8006302 <strncmp+0x1e>

08006308 <__ascii_wctomb>:
 8006308:	b149      	cbz	r1, 800631e <__ascii_wctomb+0x16>
 800630a:	2aff      	cmp	r2, #255	; 0xff
 800630c:	bf8b      	itete	hi
 800630e:	238a      	movhi	r3, #138	; 0x8a
 8006310:	700a      	strbls	r2, [r1, #0]
 8006312:	6003      	strhi	r3, [r0, #0]
 8006314:	2001      	movls	r0, #1
 8006316:	bf88      	it	hi
 8006318:	f04f 30ff 	movhi.w	r0, #4294967295
 800631c:	4770      	bx	lr
 800631e:	4608      	mov	r0, r1
 8006320:	4770      	bx	lr

08006322 <memmove>:
 8006322:	4288      	cmp	r0, r1
 8006324:	b510      	push	{r4, lr}
 8006326:	eb01 0302 	add.w	r3, r1, r2
 800632a:	d807      	bhi.n	800633c <memmove+0x1a>
 800632c:	1e42      	subs	r2, r0, #1
 800632e:	4299      	cmp	r1, r3
 8006330:	d00a      	beq.n	8006348 <memmove+0x26>
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f802 4f01 	strb.w	r4, [r2, #1]!
 800633a:	e7f8      	b.n	800632e <memmove+0xc>
 800633c:	4283      	cmp	r3, r0
 800633e:	d9f5      	bls.n	800632c <memmove+0xa>
 8006340:	1881      	adds	r1, r0, r2
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	42d3      	cmn	r3, r2
 8006346:	d100      	bne.n	800634a <memmove+0x28>
 8006348:	bd10      	pop	{r4, pc}
 800634a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800634e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006352:	e7f7      	b.n	8006344 <memmove+0x22>

08006354 <__malloc_lock>:
 8006354:	4770      	bx	lr

08006356 <__malloc_unlock>:
 8006356:	4770      	bx	lr

08006358 <_realloc_r>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	4607      	mov	r7, r0
 800635c:	4614      	mov	r4, r2
 800635e:	460e      	mov	r6, r1
 8006360:	b921      	cbnz	r1, 800636c <_realloc_r+0x14>
 8006362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006366:	4611      	mov	r1, r2
 8006368:	f7ff be00 	b.w	8005f6c <_malloc_r>
 800636c:	b922      	cbnz	r2, 8006378 <_realloc_r+0x20>
 800636e:	f7ff fdb1 	bl	8005ed4 <_free_r>
 8006372:	4625      	mov	r5, r4
 8006374:	4628      	mov	r0, r5
 8006376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006378:	f000 f814 	bl	80063a4 <_malloc_usable_size_r>
 800637c:	42a0      	cmp	r0, r4
 800637e:	d20f      	bcs.n	80063a0 <_realloc_r+0x48>
 8006380:	4621      	mov	r1, r4
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff fdf2 	bl	8005f6c <_malloc_r>
 8006388:	4605      	mov	r5, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d0f2      	beq.n	8006374 <_realloc_r+0x1c>
 800638e:	4631      	mov	r1, r6
 8006390:	4622      	mov	r2, r4
 8006392:	f7ff f98d 	bl	80056b0 <memcpy>
 8006396:	4631      	mov	r1, r6
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff fd9b 	bl	8005ed4 <_free_r>
 800639e:	e7e9      	b.n	8006374 <_realloc_r+0x1c>
 80063a0:	4635      	mov	r5, r6
 80063a2:	e7e7      	b.n	8006374 <_realloc_r+0x1c>

080063a4 <_malloc_usable_size_r>:
 80063a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a8:	1f18      	subs	r0, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbc      	itt	lt
 80063ae:	580b      	ldrlt	r3, [r1, r0]
 80063b0:	18c0      	addlt	r0, r0, r3
 80063b2:	4770      	bx	lr

080063b4 <_init>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr

080063c0 <_fini>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr
