
MELT1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000256c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ec  080026ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080026ec  080026ec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ec  080026ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000074  08002768  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002768  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f84  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001523  00000000  00000000  00028021  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00029548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  00029c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017147  00000000  00000000  0002a328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006901  00000000  00000000  0004146f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000826ed  00000000  00000000  00047d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb8  00000000  00000000  000ca4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002660 	.word	0x08002660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002660 	.word	0x08002660

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000164:	4b1d      	ldr	r3, [pc, #116]	; (80001dc <lcd1602_Send_init_Data+0x80>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d007      	beq.n	800017c <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2da      	uxtb	r2, r3
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	701a      	strb	r2, [r3, #0]
 800017a:	e006      	b.n	800018a <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	f023 0308 	bic.w	r3, r3, #8
 8000184:	b2da      	uxtb	r2, r3
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	b2da      	uxtb	r2, r3
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000198:	230a      	movs	r3, #10
 800019a:	9300      	str	r3, [sp, #0]
 800019c:	2301      	movs	r3, #1
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	214e      	movs	r1, #78	; 0x4e
 80001a2:	480f      	ldr	r0, [pc, #60]	; (80001e0 <lcd1602_Send_init_Data+0x84>)
 80001a4:	f000 ff0a 	bl	8000fbc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001a8:	2005      	movs	r0, #5
 80001aa:	f000 fb6f 	bl	800088c <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	f023 0304 	bic.w	r3, r3, #4
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 80001bc:	230a      	movs	r3, #10
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2301      	movs	r3, #1
 80001c2:	687a      	ldr	r2, [r7, #4]
 80001c4:	214e      	movs	r1, #78	; 0x4e
 80001c6:	4806      	ldr	r0, [pc, #24]	; (80001e0 <lcd1602_Send_init_Data+0x84>)
 80001c8:	f000 fef8 	bl	8000fbc <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001cc:	2005      	movs	r0, #5
 80001ce:	f000 fb5d 	bl	800088c <HAL_Delay>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000
 80001e0:	200000c4 	.word	0x200000c4

080001e4 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80001ec:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <lcd1602_Send_data+0x74>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d007      	beq.n	8000204 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	701a      	strb	r2, [r3, #0]
 8000202:	e006      	b.n	8000212 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f023 0308 	bic.w	r3, r3, #8
 800020c:	b2da      	uxtb	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	b2da      	uxtb	r2, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 8000220:	230a      	movs	r3, #10
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2301      	movs	r3, #1
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	214e      	movs	r1, #78	; 0x4e
 800022a:	480c      	ldr	r0, [pc, #48]	; (800025c <lcd1602_Send_data+0x78>)
 800022c:	f000 fec6 	bl	8000fbc <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	f023 0304 	bic.w	r3, r3, #4
 8000238:	b2da      	uxtb	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 800023e:	230a      	movs	r3, #10
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2301      	movs	r3, #1
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	214e      	movs	r1, #78	; 0x4e
 8000248:	4804      	ldr	r0, [pc, #16]	; (800025c <lcd1602_Send_data+0x78>)
 800024a:	f000 feb7 	bl	8000fbc <HAL_I2C_Master_Transmit>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000000 	.word	0x20000000
 800025c:	200000c4 	.word	0x200000c4

08000260 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	/*========Включить питание========*/
	uint8_t tx_buffer = 0x30;
 8000266:	2330      	movs	r3, #48	; 0x30
 8000268:	71fb      	strb	r3, [r7, #7]
	/*========Ожидать 20 мс========*/
	HAL_Delay(20);
 800026a:	2014      	movs	r0, #20
 800026c:	f000 fb0e 	bl	800088c <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ff72 	bl	800015c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8000278:	2001      	movs	r0, #1
 800027a:	f000 fb07 	bl	800088c <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800027e:	1dfb      	adds	r3, r7, #7
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6b 	bl	800015c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 fb00 	bl	800088c <HAL_Delay>
	/*========Установить разрядность интерфейса========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800028c:	1dfb      	adds	r3, r7, #7
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff64 	bl	800015c <lcd1602_Send_init_Data>
	/*========Ожидать 40 мкс========*/
	HAL_Delay(1);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 faf9 	bl	800088c <HAL_Delay>
	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 800029a:	2320      	movs	r3, #32
 800029c:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff5b 	bl	800015c <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======Выбираем 2 страницу символов======*/
	tx_buffer = 0x20;
 80002a6:	2320      	movs	r3, #32
 80002a8:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff55 	bl	800015c <lcd1602_Send_init_Data>
	tx_buffer = 0xA0;
 80002b2:	23a0      	movs	r3, #160	; 0xa0
 80002b4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff4f 	bl	800015c <lcd1602_Send_init_Data>
	/*======Выбираем 2 страницу символов======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff49 	bl	800015c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff43 	bl	800015c <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80002d6:	2300      	movs	r3, #0
 80002d8:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff3d 	bl	800015c <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80002e2:	2310      	movs	r3, #16
 80002e4:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff37 	bl	800015c <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff31 	bl	800015c <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80002fa:	2330      	movs	r3, #48	; 0x30
 80002fc:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff2b 	bl	800015c <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000306:	2300      	movs	r3, #0
 8000308:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff25 	bl	800015c <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000312:	23c0      	movs	r3, #192	; 0xc0
 8000314:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff1f 	bl	800015c <lcd1602_Send_init_Data>

	/*========Инициализация завершена. Включить дисплей========*/
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000334:	f023 030f 	bic.w	r3, r3, #15
 8000338:	b25b      	sxtb	r3, r3
 800033a:	f043 0309 	orr.w	r3, r3, #9
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000344:	f107 030f 	add.w	r3, r7, #15
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff4b 	bl	80001e4 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	011b      	lsls	r3, r3, #4
 8000352:	b25b      	sxtb	r3, r3
 8000354:	f043 0309 	orr.w	r3, r3, #9
 8000358:	b25b      	sxtb	r3, r3
 800035a:	b2db      	uxtb	r3, r3
 800035c:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 800035e:	f107 030f 	add.w	r3, r7, #15
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff3e 	bl	80001e4 <lcd1602_Send_data>
}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e009      	b.n	8000392 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ffcd 	bl	8000326 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff feda 	bl	800014c <strlen>
 8000398:	4602      	mov	r2, r0
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	429a      	cmp	r2, r3
 800039e:	d8ee      	bhi.n	800037e <lcd1602_Print_text+0xe>
	}
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	460a      	mov	r2, r1
 80003b2:	71fb      	strb	r3, [r7, #7]
 80003b4:	4613      	mov	r3, r2
 80003b6:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d901      	bls.n	80003c2 <lcd1602_SetCursor+0x1a>
		y = 3;
 80003be:	2303      	movs	r3, #3
 80003c0:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b27      	cmp	r3, #39	; 0x27
 80003c6:	d901      	bls.n	80003cc <lcd1602_SetCursor+0x24>
		x = 39;
 80003c8:	2327      	movs	r3, #39	; 0x27
 80003ca:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d101      	bne.n	80003d6 <lcd1602_SetCursor+0x2e>
		adr = x;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d102      	bne.n	80003e2 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d102      	bne.n	80003ee <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	3314      	adds	r3, #20
 80003ec:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b03      	cmp	r3, #3
 80003f2:	d102      	bne.n	80003fa <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	3354      	adds	r3, #84	; 0x54
 80003f8:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 80003fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000402:	b25b      	sxtb	r3, r3
 8000404:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000408:	b25b      	sxtb	r3, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 800040e:	f107 030e 	add.w	r3, r7, #14
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fee6 	bl	80001e4 <lcd1602_Send_data>

	command = (adr << 4);
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	011b      	lsls	r3, r3, #4
 800041c:	b2db      	uxtb	r3, r3
 800041e:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000420:	f107 030e 	add.w	r3, r7, #14
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff fedd 	bl	80001e4 <lcd1602_Send_data>

}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800043a:	f000 f9c5 	bl	80007c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800043e:	f000 f823 	bl	8000488 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000442:	f000 f895 	bl	8000570 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000446:	f000 f865 	bl	8000514 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 800044a:	2064      	movs	r0, #100	; 0x64
 800044c:	f000 fa1e 	bl	800088c <HAL_Delay>
	lcd1602_Init();
 8000450:	f7ff ff06 	bl	8000260 <lcd1602_Init>
	lcd1602_SetCursor(0, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ffa6 	bl	80003a8 <lcd1602_SetCursor>
	sprintf(lcd1602_tx_buffer, "%cp%c%ce%c %c%cp", RU_P, RU_i, RU_v, RU_t, RU_m, RU_i);//Привет мир!
 800045c:	23e8      	movs	r3, #232	; 0xe8
 800045e:	9303      	str	r3, [sp, #12]
 8000460:	23ec      	movs	r3, #236	; 0xec
 8000462:	9302      	str	r3, [sp, #8]
 8000464:	23f2      	movs	r3, #242	; 0xf2
 8000466:	9301      	str	r3, [sp, #4]
 8000468:	23e2      	movs	r3, #226	; 0xe2
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	23e8      	movs	r3, #232	; 0xe8
 800046e:	22cf      	movs	r2, #207	; 0xcf
 8000470:	4903      	ldr	r1, [pc, #12]	; (8000480 <main+0x4c>)
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <main+0x50>)
 8000474:	f001 fce2 	bl	8001e3c <siprintf>
	lcd1602_Print_text(lcd1602_tx_buffer);
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <main+0x50>)
 800047a:	f7ff ff79 	bl	8000370 <lcd1602_Print_text>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800047e:	e7fe      	b.n	800047e <main+0x4a>
 8000480:	08002678 	.word	0x08002678
 8000484:	20000090 	.word	0x20000090

08000488 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b090      	sub	sp, #64	; 0x40
 800048c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800048e:	f107 0318 	add.w	r3, r7, #24
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fcc8 	bl	8001e2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 f879 	bl	80015c8 <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x58>
		Error_Handler();
 80004dc:	f000 f876 	bl	80005cc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80004e0:	230f      	movs	r3, #15
 80004e2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	2302      	movs	r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 fae4 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x82>
		Error_Handler();
 8000506:	f000 f861 	bl	80005cc <Error_Handler>
	}
}
 800050a:	bf00      	nop
 800050c:	3740      	adds	r7, #64	; 0x40
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_I2C1_Init+0x50>)
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <MX_I2C1_Init+0x54>)
 800051c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_I2C1_Init+0x50>)
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_I2C1_Init+0x58>)
 8000522:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_I2C1_Init+0x50>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_I2C1_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_I2C1_Init+0x50>)
 8000532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000536:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <MX_I2C1_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_I2C1_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <MX_I2C1_Init+0x50>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_I2C1_Init+0x50>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_I2C1_Init+0x50>)
 8000552:	f000 fbfb 	bl	8000d4c <HAL_I2C_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800055c:	f000 f836 	bl	80005cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000c4 	.word	0x200000c4
 8000568:	40005400 	.word	0x40005400
 800056c:	00061a80 	.word	0x00061a80

08000570 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x58>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <MX_GPIO_Init+0x58>)
 800057c:	f043 0320 	orr.w	r3, r3, #32
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_GPIO_Init+0x58>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 0320 	and.w	r3, r3, #32
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_GPIO_Init+0x58>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <MX_GPIO_Init+0x58>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_GPIO_Init+0x58>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_GPIO_Init+0x58>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <MX_GPIO_Init+0x58>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	6193      	str	r3, [r2, #24]
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MX_GPIO_Init+0x58>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005d2:	e7fe      	b.n	80005d2 <Error_Handler+0x6>

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <HAL_MspInit+0x5c>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_MspInit+0x5c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6193      	str	r3, [r2, #24]
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x5c>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x5c>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_MspInit+0x60>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_MspInit+0x60>)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000
 8000634:	40010000 	.word	0x40010000

08000638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <HAL_I2C_MspInit+0x70>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d123      	bne.n	80006a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_I2C_MspInit+0x74>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	4a13      	ldr	r2, [pc, #76]	; (80006ac <HAL_I2C_MspInit+0x74>)
 800065e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000662:	61d3      	str	r3, [r2, #28]
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_I2C_MspInit+0x74>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_I2C_MspInit+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_I2C_MspInit+0x74>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_I2C_MspInit+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000688:	23c0      	movs	r3, #192	; 0xc0
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068c:	2312      	movs	r3, #18
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <HAL_I2C_MspInit+0x78>)
 800069c:	f000 f9fc 	bl	8000a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fa:	f000 f8ab 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <_sbrk+0x5c>)
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <_sbrk+0x60>)
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <_sbrk+0x64>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <_sbrk+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	429a      	cmp	r2, r3
 8000732:	d207      	bcs.n	8000744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000734:	f001 fb50 	bl	8001dd8 <__errno>
 8000738:	4602      	mov	r2, r0
 800073a:	230c      	movs	r3, #12
 800073c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	e009      	b.n	8000758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <_sbrk+0x64>)
 8000754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20005000 	.word	0x20005000
 8000764:	00000400 	.word	0x00000400
 8000768:	200000b8 	.word	0x200000b8
 800076c:	20000120 	.word	0x20000120

08000770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800077c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800077e:	e003      	b.n	8000788 <LoopCopyDataInit>

08000780 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000782:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000784:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000786:	3104      	adds	r1, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800078c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800078e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000790:	d3f6      	bcc.n	8000780 <CopyDataInit>
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000794:	e002      	b.n	800079c <LoopFillZerobss>

08000796 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000798:	f842 3b04 	str.w	r3, [r2], #4

0800079c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800079e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007a0:	d3f9      	bcc.n	8000796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a2:	f7ff ffe5 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f001 fb1d 	bl	8001de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff fe43 	bl	8000434 <main>
  bx lr
 80007ae:	4770      	bx	lr
  ldr r3, =_sidata
 80007b0:	080026f4 	.word	0x080026f4
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007b8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80007bc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80007c0:	20000120 	.word	0x20000120

080007c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_2_IRQHandler>
	...

080007c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x28>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x28>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f929 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff fef6 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f933 	bl	8000a7e <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f909 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000004 	.word	0x20000004
 800084c:	2000000c 	.word	0x2000000c
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000118 	.word	0x20000118

08000878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000118 	.word	0x20000118

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff fff0 	bl	8000878 <HAL_GetTick>
 8000898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_Delay+0x40>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	bf00      	nop
 80008b4:	f7ff ffe0 	bl	8000878 <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000000c 	.word	0x2000000c

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff49 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff5e 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffb0 	bl	80009ec <SysTick_Config>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b08b      	sub	sp, #44	; 0x2c
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e127      	b.n	8000cfc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aac:	2201      	movs	r2, #1
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f040 8116 	bne.w	8000cf6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d034      	beq.n	8000b3c <HAL_GPIO_Init+0xa4>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d80d      	bhi.n	8000af2 <HAL_GPIO_Init+0x5a>
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d02b      	beq.n	8000b32 <HAL_GPIO_Init+0x9a>
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d804      	bhi.n	8000ae8 <HAL_GPIO_Init+0x50>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d031      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d01c      	beq.n	8000b20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ae6:	e048      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d043      	beq.n	8000b74 <HAL_GPIO_Init+0xdc>
 8000aec:	2b11      	cmp	r3, #17
 8000aee:	d01b      	beq.n	8000b28 <HAL_GPIO_Init+0x90>
          break;
 8000af0:	e043      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af2:	4a89      	ldr	r2, [pc, #548]	; (8000d18 <HAL_GPIO_Init+0x280>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d026      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
 8000af8:	4a87      	ldr	r2, [pc, #540]	; (8000d18 <HAL_GPIO_Init+0x280>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d806      	bhi.n	8000b0c <HAL_GPIO_Init+0x74>
 8000afe:	4a87      	ldr	r2, [pc, #540]	; (8000d1c <HAL_GPIO_Init+0x284>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d020      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
 8000b04:	4a86      	ldr	r2, [pc, #536]	; (8000d20 <HAL_GPIO_Init+0x288>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d01d      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
          break;
 8000b0a:	e036      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b0c:	4a85      	ldr	r2, [pc, #532]	; (8000d24 <HAL_GPIO_Init+0x28c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d019      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
 8000b12:	4a85      	ldr	r2, [pc, #532]	; (8000d28 <HAL_GPIO_Init+0x290>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d016      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
 8000b18:	4a84      	ldr	r2, [pc, #528]	; (8000d2c <HAL_GPIO_Init+0x294>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0xae>
          break;
 8000b1e:	e02c      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	623b      	str	r3, [r7, #32]
          break;
 8000b26:	e028      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	623b      	str	r3, [r7, #32]
          break;
 8000b30:	e023      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	3308      	adds	r3, #8
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e01e      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	330c      	adds	r3, #12
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e019      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4e:	2304      	movs	r3, #4
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e012      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d105      	bne.n	8000b68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	611a      	str	r2, [r3, #16]
          break;
 8000b66:	e008      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	615a      	str	r2, [r3, #20]
          break;
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d801      	bhi.n	8000b84 <HAL_GPIO_Init+0xec>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	e001      	b.n	8000b88 <HAL_GPIO_Init+0xf0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3304      	adds	r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2bff      	cmp	r3, #255	; 0xff
 8000b8e:	d802      	bhi.n	8000b96 <HAL_GPIO_Init+0xfe>
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_Init+0x104>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	3b08      	subs	r3, #8
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	401a      	ands	r2, r3
 8000bae:	6a39      	ldr	r1, [r7, #32]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 8096 	beq.w	8000cf6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <HAL_GPIO_Init+0x298>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <HAL_GPIO_Init+0x298>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6193      	str	r3, [r2, #24]
 8000bd6:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <HAL_GPIO_Init+0x298>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be2:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <HAL_GPIO_Init+0x29c>)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	220f      	movs	r2, #15
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4b      	ldr	r2, [pc, #300]	; (8000d38 <HAL_GPIO_Init+0x2a0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0x19e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4a      	ldr	r2, [pc, #296]	; (8000d3c <HAL_GPIO_Init+0x2a4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00d      	beq.n	8000c32 <HAL_GPIO_Init+0x19a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_GPIO_Init+0x2a8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d007      	beq.n	8000c2e <HAL_GPIO_Init+0x196>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2ac>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_GPIO_Init+0x192>
 8000c26:	2303      	movs	r3, #3
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x1a0>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e004      	b.n	8000c38 <HAL_GPIO_Init+0x1a0>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_Init+0x1a0>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x1a0>
 8000c36:	2300      	movs	r3, #0
 8000c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c3a:	f002 0203 	and.w	r2, r2, #3
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	4093      	lsls	r3, r2
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c48:	493a      	ldr	r1, [pc, #232]	; (8000d34 <HAL_GPIO_Init+0x29c>)
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c62:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4938      	ldr	r1, [pc, #224]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
 8000c6e:	e006      	b.n	8000c7e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4933      	ldr	r1, [pc, #204]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	492e      	ldr	r1, [pc, #184]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	604b      	str	r3, [r1, #4]
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4929      	ldr	r1, [pc, #164]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	4924      	ldr	r1, [pc, #144]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	608b      	str	r3, [r1, #8]
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	491f      	ldr	r1, [pc, #124]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	491a      	ldr	r1, [pc, #104]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4915      	ldr	r1, [pc, #84]	; (8000d48 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	fa22 f303 	lsr.w	r3, r2, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f47f aed0 	bne.w	8000aac <HAL_GPIO_Init+0x14>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	372c      	adds	r7, #44	; 0x2c
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	10210000 	.word	0x10210000
 8000d1c:	10110000 	.word	0x10110000
 8000d20:	10120000 	.word	0x10120000
 8000d24:	10310000 	.word	0x10310000
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10220000 	.word	0x10220000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40010400 	.word	0x40010400

08000d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e11f      	b.n	8000f9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fc60 	bl	8000638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2224      	movs	r2, #36	; 0x24
 8000d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000db0:	f000 ffe0 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8000db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4a7b      	ldr	r2, [pc, #492]	; (8000fa8 <HAL_I2C_Init+0x25c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d807      	bhi.n	8000dd0 <HAL_I2C_Init+0x84>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4a7a      	ldr	r2, [pc, #488]	; (8000fac <HAL_I2C_Init+0x260>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	bf94      	ite	ls
 8000dc8:	2301      	movls	r3, #1
 8000dca:	2300      	movhi	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	e006      	b.n	8000dde <HAL_I2C_Init+0x92>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <HAL_I2C_Init+0x264>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	bf94      	ite	ls
 8000dd8:	2301      	movls	r3, #1
 8000dda:	2300      	movhi	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0db      	b.n	8000f9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4a72      	ldr	r2, [pc, #456]	; (8000fb4 <HAL_I2C_Init+0x268>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4a64      	ldr	r2, [pc, #400]	; (8000fa8 <HAL_I2C_Init+0x25c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d802      	bhi.n	8000e20 <HAL_I2C_Init+0xd4>
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	e009      	b.n	8000e34 <HAL_I2C_Init+0xe8>
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e26:	fb02 f303 	mul.w	r3, r2, r3
 8000e2a:	4a63      	ldr	r2, [pc, #396]	; (8000fb8 <HAL_I2C_Init+0x26c>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	099b      	lsrs	r3, r3, #6
 8000e32:	3301      	adds	r3, #1
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4956      	ldr	r1, [pc, #344]	; (8000fa8 <HAL_I2C_Init+0x25c>)
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d80d      	bhi.n	8000e70 <HAL_I2C_Init+0x124>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e62:	3301      	adds	r3, #1
 8000e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	bf38      	it	cc
 8000e6c:	2304      	movcc	r3, #4
 8000e6e:	e04f      	b.n	8000f10 <HAL_I2C_Init+0x1c4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d111      	bne.n	8000e9c <HAL_I2C_Init+0x150>
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1e58      	subs	r0, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6859      	ldr	r1, [r3, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	e012      	b.n	8000ec2 <HAL_I2C_Init+0x176>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	0099      	lsls	r1, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf0c      	ite	eq
 8000ebc:	2301      	moveq	r3, #1
 8000ebe:	2300      	movne	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_I2C_Init+0x17e>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e022      	b.n	8000f10 <HAL_I2C_Init+0x1c4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10e      	bne.n	8000ef0 <HAL_I2C_Init+0x1a4>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e58      	subs	r0, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6859      	ldr	r1, [r3, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	440b      	add	r3, r1
 8000ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eee:	e00f      	b.n	8000f10 <HAL_I2C_Init+0x1c4>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1e58      	subs	r0, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	0099      	lsls	r1, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	6809      	ldr	r1, [r1, #0]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69da      	ldr	r2, [r3, #28]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6911      	ldr	r1, [r2, #16]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68d2      	ldr	r2, [r2, #12]
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	000186a0 	.word	0x000186a0
 8000fac:	001e847f 	.word	0x001e847f
 8000fb0:	003d08ff 	.word	0x003d08ff
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	10624dd3 	.word	0x10624dd3

08000fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	817b      	strh	r3, [r7, #10]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff fc52 	bl	8000878 <HAL_GetTick>
 8000fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	f040 80e0 	bne.w	80011a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2319      	movs	r3, #25
 8000fea:	2201      	movs	r2, #1
 8000fec:	4970      	ldr	r1, [pc, #448]	; (80011b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f964 	bl	80012bc <I2C_WaitOnFlagUntilTimeout>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e0d3      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_I2C_Master_Transmit+0x50>
 8001008:	2302      	movs	r3, #2
 800100a:	e0cc      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d007      	beq.n	8001032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 0201 	orr.w	r2, r2, #1
 8001030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2221      	movs	r2, #33	; 0x21
 8001046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2210      	movs	r2, #16
 800104e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	893a      	ldrh	r2, [r7, #8]
 8001062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001074:	8979      	ldrh	r1, [r7, #10]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	6a3a      	ldr	r2, [r7, #32]
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f89c 	bl	80011b8 <I2C_MasterRequestWrite>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e08d      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010a0:	e066      	b.n	8001170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	6a39      	ldr	r1, [r7, #32]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f9de 	bl	8001468 <I2C_WaitOnTXEFlagUntilTimeout>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00d      	beq.n	80010ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d107      	bne.n	80010ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e06b      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b04      	cmp	r3, #4
 800110a:	d11b      	bne.n	8001144 <HAL_I2C_Master_Transmit+0x188>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	d017      	beq.n	8001144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112e:	b29b      	uxth	r3, r3
 8001130:	3b01      	subs	r3, #1
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	6a39      	ldr	r1, [r7, #32]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f9ce 	bl	80014ea <I2C_WaitOnBTFFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00d      	beq.n	8001170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	2b04      	cmp	r3, #4
 800115a:	d107      	bne.n	800116c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e01a      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001174:	2b00      	cmp	r3, #0
 8001176:	d194      	bne.n	80010a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2220      	movs	r2, #32
 800118c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e000      	b.n	80011a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011a4:	2302      	movs	r3, #2
  }
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	00100002 	.word	0x00100002
 80011b4:	ffff0000 	.word	0xffff0000

080011b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	460b      	mov	r3, r1
 80011c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d006      	beq.n	80011e2 <I2C_MasterRequestWrite+0x2a>
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d003      	beq.n	80011e2 <I2C_MasterRequestWrite+0x2a>
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011e0:	d108      	bne.n	80011f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e00b      	b.n	800120c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d107      	bne.n	800120c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800120a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 f84f 	bl	80012bc <I2C_WaitOnFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00d      	beq.n	8001240 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001232:	d103      	bne.n	800123c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e035      	b.n	80012ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001248:	d108      	bne.n	800125c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800124a:	897b      	ldrh	r3, [r7, #10]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	e01b      	b.n	8001294 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800125c:	897b      	ldrh	r3, [r7, #10]
 800125e:	11db      	asrs	r3, r3, #7
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0306 	and.w	r3, r3, #6
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f063 030f 	orn	r3, r3, #15
 800126c:	b2da      	uxtb	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	490e      	ldr	r1, [pc, #56]	; (80012b4 <I2C_MasterRequestWrite+0xfc>)
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f875 	bl	800136a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e010      	b.n	80012ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <I2C_MasterRequestWrite+0x100>)
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f865 	bl	800136a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	00010008 	.word	0x00010008
 80012b8:	00010002 	.word	0x00010002

080012bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012cc:	e025      	b.n	800131a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d021      	beq.n	800131a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff facf 	bl	8000878 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f043 0220 	orr.w	r2, r3, #32
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e023      	b.n	8001362 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10d      	bne.n	8001340 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4013      	ands	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	e00c      	b.n	800135a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4013      	ands	r3, r2
 800134c:	b29b      	uxth	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	429a      	cmp	r2, r3
 800135e:	d0b6      	beq.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001378:	e051      	b.n	800141e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001388:	d123      	bne.n	80013d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001398:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2220      	movs	r2, #32
 80013ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f043 0204 	orr.w	r2, r3, #4
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e046      	b.n	8001460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d021      	beq.n	800141e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013da:	f7ff fa4d 	bl	8000878 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d302      	bcc.n	80013f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d116      	bne.n	800141e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f043 0220 	orr.w	r2, r3, #32
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e020      	b.n	8001460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10c      	bne.n	8001442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4013      	ands	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	e00b      	b.n	800145a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	43da      	mvns	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4013      	ands	r3, r2
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d18d      	bne.n	800137a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001474:	e02d      	b.n	80014d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f878 	bl	800156c <I2C_IsAcknowledgeFailed>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e02d      	b.n	80014e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d021      	beq.n	80014d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff f9f3 	bl	8000878 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d116      	bne.n	80014d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f043 0220 	orr.w	r2, r3, #32
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e007      	b.n	80014e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014dc:	2b80      	cmp	r3, #128	; 0x80
 80014de:	d1ca      	bne.n	8001476 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014f6:	e02d      	b.n	8001554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f837 	bl	800156c <I2C_IsAcknowledgeFailed>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e02d      	b.n	8001564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150e:	d021      	beq.n	8001554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001510:	f7ff f9b2 	bl	8000878 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	d302      	bcc.n	8001526 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2220      	movs	r2, #32
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e007      	b.n	8001564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b04      	cmp	r3, #4
 8001560:	d1ca      	bne.n	80014f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d11b      	bne.n	80015bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800158c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2220      	movs	r2, #32
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e26c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8087 	beq.w	80016f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00c      	beq.n	800160e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f4:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d112      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e>
 8001600:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d10b      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x12c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d168      	bne.n	80016f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e246      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x76>
 8001630:	4b80      	ldr	r3, [pc, #512]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a7f      	ldr	r2, [pc, #508]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e02e      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x98>
 8001646:	4b7b      	ldr	r3, [pc, #492]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7a      	ldr	r2, [pc, #488]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b78      	ldr	r3, [pc, #480]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a77      	ldr	r2, [pc, #476]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0xbc>
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a71      	ldr	r2, [pc, #452]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a67      	ldr	r2, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff f8e8 	bl	8000878 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff f8e4 	bl	8000878 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1fa      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xe4>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f8d4 	bl	8000878 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f8d0 	bl	8000878 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1e6      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x10c>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x18c>
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x176>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1ba      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4939      	ldr	r1, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HAL_RCC_OscConfig+0x270>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff f889 	bl	8000878 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff f885 	bl	8000878 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e19b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4927      	ldr	r1, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x270>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f868 	bl	8000878 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f864 	bl	8000878 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e17a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03a      	beq.n	800184c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d019      	beq.n	8001812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x274>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff f848 	bl	8000878 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff f844 	bl	8000878 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e15a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f000 fac6 	bl	8001d9c <RCC_Delay>
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_OscConfig+0x274>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f82e 	bl	8000878 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181e:	e00f      	b.n	8001840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff f82a 	bl	8000878 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d908      	bls.n	8001840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e140      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	42420000 	.word	0x42420000
 800183c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b9e      	ldr	r3, [pc, #632]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e9      	bne.n	8001820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a6 	beq.w	80019a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b97      	ldr	r3, [pc, #604]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b94      	ldr	r3, [pc, #592]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a93      	ldr	r2, [pc, #588]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b91      	ldr	r3, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7fe ffeb 	bl	8000878 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7fe ffe7 	bl	8000878 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0fd      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x312>
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	e02d      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x334>
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a75      	ldr	r2, [pc, #468]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a72      	ldr	r2, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	e01c      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x356>
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a6c      	ldr	r2, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a66      	ldr	r2, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a63      	ldr	r2, [pc, #396]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d015      	beq.n	800196a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7fe ff9b 	bl	8000878 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7fe ff97 	bl	8000878 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0ab      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0ee      	beq.n	8001946 <HAL_RCC_OscConfig+0x37e>
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7fe ff85 	bl	8000878 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7fe ff81 	bl	8000878 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e095      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ee      	bne.n	8001972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8081 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d061      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d146      	bne.n	8001a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7fe ff55 	bl	8000878 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7fe ff51 	bl	8000878 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e067      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	492d      	ldr	r1, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a19      	ldr	r1, [r3, #32]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7fe ff25 	bl	8000878 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe ff21 	bl	8000878 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e037      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x46a>
 8001a50:	e02f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe ff0e 	bl	8000878 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7fe ff0a 	bl	8000878 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e020      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x498>
 8001a7e:	e018      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e013      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42420060 	.word	0x42420060

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d0      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4965      	ldr	r1, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d040      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e073      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4936      	ldr	r1, [pc, #216]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7fe fe5e 	bl	8000878 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7fe fe5a 	bl	8000878 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e053      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d210      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4922      	ldr	r1, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fdbc 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080026a0 	.word	0x080026a0
 8001c94:	20000004 	.word	0x20000004
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b490      	push	{r4, r7}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca4:	1d3c      	adds	r4, r7, #4
 8001ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cda:	e02d      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cde:	623b      	str	r3, [r7, #32]
      break;
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cee:	4413      	add	r3, r2
 8001cf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c5b      	lsrs	r3, r3, #17
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0e:	4413      	add	r3, r2
 8001d10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1a:	fb02 f203 	mul.w	r2, r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e004      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	623b      	str	r3, [r7, #32]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3a:	623b      	str	r3, [r7, #32]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc90      	pop	{r4, r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	0800268c 	.word	0x0800268c
 8001d50:	0800269c 	.word	0x0800269c
 8001d54:	40021000 	.word	0x40021000
 8001d58:	007a1200 	.word	0x007a1200
 8001d5c:	003d0900 	.word	0x003d0900

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	080026b0 	.word	0x080026b0

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <RCC_Delay+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <RCC_Delay+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db8:	bf00      	nop
  }
  while (Delay --);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <RCC_Delay+0x1c>
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <__errno>:
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <__errno+0x8>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000010 	.word	0x20000010

08001de4 <__libc_init_array>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	2500      	movs	r5, #0
 8001de8:	4e0c      	ldr	r6, [pc, #48]	; (8001e1c <__libc_init_array+0x38>)
 8001dea:	4c0d      	ldr	r4, [pc, #52]	; (8001e20 <__libc_init_array+0x3c>)
 8001dec:	1ba4      	subs	r4, r4, r6
 8001dee:	10a4      	asrs	r4, r4, #2
 8001df0:	42a5      	cmp	r5, r4
 8001df2:	d109      	bne.n	8001e08 <__libc_init_array+0x24>
 8001df4:	f000 fc34 	bl	8002660 <_init>
 8001df8:	2500      	movs	r5, #0
 8001dfa:	4e0a      	ldr	r6, [pc, #40]	; (8001e24 <__libc_init_array+0x40>)
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <__libc_init_array+0x44>)
 8001dfe:	1ba4      	subs	r4, r4, r6
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	42a5      	cmp	r5, r4
 8001e04:	d105      	bne.n	8001e12 <__libc_init_array+0x2e>
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
 8001e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e0c:	4798      	blx	r3
 8001e0e:	3501      	adds	r5, #1
 8001e10:	e7ee      	b.n	8001df0 <__libc_init_array+0xc>
 8001e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e16:	4798      	blx	r3
 8001e18:	3501      	adds	r5, #1
 8001e1a:	e7f2      	b.n	8001e02 <__libc_init_array+0x1e>
 8001e1c:	080026ec 	.word	0x080026ec
 8001e20:	080026ec 	.word	0x080026ec
 8001e24:	080026ec 	.word	0x080026ec
 8001e28:	080026f0 	.word	0x080026f0

08001e2c <memset>:
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4402      	add	r2, r0
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d100      	bne.n	8001e36 <memset+0xa>
 8001e34:	4770      	bx	lr
 8001e36:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3a:	e7f9      	b.n	8001e30 <memset+0x4>

08001e3c <siprintf>:
 8001e3c:	b40e      	push	{r1, r2, r3}
 8001e3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e42:	b500      	push	{lr}
 8001e44:	b09c      	sub	sp, #112	; 0x70
 8001e46:	ab1d      	add	r3, sp, #116	; 0x74
 8001e48:	9002      	str	r0, [sp, #8]
 8001e4a:	9006      	str	r0, [sp, #24]
 8001e4c:	9107      	str	r1, [sp, #28]
 8001e4e:	9104      	str	r1, [sp, #16]
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <siprintf+0x38>)
 8001e52:	4909      	ldr	r1, [pc, #36]	; (8001e78 <siprintf+0x3c>)
 8001e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e58:	9105      	str	r1, [sp, #20]
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	a902      	add	r1, sp, #8
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	f000 f866 	bl	8001f30 <_svfiprintf_r>
 8001e64:	2200      	movs	r2, #0
 8001e66:	9b02      	ldr	r3, [sp, #8]
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	b01c      	add	sp, #112	; 0x70
 8001e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e70:	b003      	add	sp, #12
 8001e72:	4770      	bx	lr
 8001e74:	20000010 	.word	0x20000010
 8001e78:	ffff0208 	.word	0xffff0208

08001e7c <__ssputs_r>:
 8001e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e80:	688e      	ldr	r6, [r1, #8]
 8001e82:	4682      	mov	sl, r0
 8001e84:	429e      	cmp	r6, r3
 8001e86:	460c      	mov	r4, r1
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	d837      	bhi.n	8001efe <__ssputs_r+0x82>
 8001e8e:	898a      	ldrh	r2, [r1, #12]
 8001e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e94:	d031      	beq.n	8001efa <__ssputs_r+0x7e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	6825      	ldr	r5, [r4, #0]
 8001e9a:	6909      	ldr	r1, [r1, #16]
 8001e9c:	1a6f      	subs	r7, r5, r1
 8001e9e:	6965      	ldr	r5, [r4, #20]
 8001ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ea4:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ea8:	f109 0301 	add.w	r3, r9, #1
 8001eac:	443b      	add	r3, r7
 8001eae:	429d      	cmp	r5, r3
 8001eb0:	bf38      	it	cc
 8001eb2:	461d      	movcc	r5, r3
 8001eb4:	0553      	lsls	r3, r2, #21
 8001eb6:	d530      	bpl.n	8001f1a <__ssputs_r+0x9e>
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f000 fb37 	bl	800252c <_malloc_r>
 8001ebe:	4606      	mov	r6, r0
 8001ec0:	b950      	cbnz	r0, 8001ed8 <__ssputs_r+0x5c>
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f8ca 3000 	str.w	r3, [sl]
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed2:	81a3      	strh	r3, [r4, #12]
 8001ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed8:	463a      	mov	r2, r7
 8001eda:	6921      	ldr	r1, [r4, #16]
 8001edc:	f000 fab6 	bl	800244c <memcpy>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	6126      	str	r6, [r4, #16]
 8001eee:	443e      	add	r6, r7
 8001ef0:	6026      	str	r6, [r4, #0]
 8001ef2:	464e      	mov	r6, r9
 8001ef4:	6165      	str	r5, [r4, #20]
 8001ef6:	1bed      	subs	r5, r5, r7
 8001ef8:	60a5      	str	r5, [r4, #8]
 8001efa:	454e      	cmp	r6, r9
 8001efc:	d900      	bls.n	8001f00 <__ssputs_r+0x84>
 8001efe:	464e      	mov	r6, r9
 8001f00:	4632      	mov	r2, r6
 8001f02:	4641      	mov	r1, r8
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	f000 faac 	bl	8002462 <memmove>
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	1b9b      	subs	r3, r3, r6
 8001f10:	60a3      	str	r3, [r4, #8]
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	441e      	add	r6, r3
 8001f16:	6026      	str	r6, [r4, #0]
 8001f18:	e7dc      	b.n	8001ed4 <__ssputs_r+0x58>
 8001f1a:	462a      	mov	r2, r5
 8001f1c:	f000 fb60 	bl	80025e0 <_realloc_r>
 8001f20:	4606      	mov	r6, r0
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d1e2      	bne.n	8001eec <__ssputs_r+0x70>
 8001f26:	6921      	ldr	r1, [r4, #16]
 8001f28:	4650      	mov	r0, sl
 8001f2a:	f000 fab3 	bl	8002494 <_free_r>
 8001f2e:	e7c8      	b.n	8001ec2 <__ssputs_r+0x46>

08001f30 <_svfiprintf_r>:
 8001f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f34:	461d      	mov	r5, r3
 8001f36:	898b      	ldrh	r3, [r1, #12]
 8001f38:	b09d      	sub	sp, #116	; 0x74
 8001f3a:	061f      	lsls	r7, r3, #24
 8001f3c:	4680      	mov	r8, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4616      	mov	r6, r2
 8001f42:	d50f      	bpl.n	8001f64 <_svfiprintf_r+0x34>
 8001f44:	690b      	ldr	r3, [r1, #16]
 8001f46:	b96b      	cbnz	r3, 8001f64 <_svfiprintf_r+0x34>
 8001f48:	2140      	movs	r1, #64	; 0x40
 8001f4a:	f000 faef 	bl	800252c <_malloc_r>
 8001f4e:	6020      	str	r0, [r4, #0]
 8001f50:	6120      	str	r0, [r4, #16]
 8001f52:	b928      	cbnz	r0, 8001f60 <_svfiprintf_r+0x30>
 8001f54:	230c      	movs	r3, #12
 8001f56:	f8c8 3000 	str.w	r3, [r8]
 8001f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5e:	e0c8      	b.n	80020f2 <_svfiprintf_r+0x1c2>
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	6163      	str	r3, [r4, #20]
 8001f64:	2300      	movs	r3, #0
 8001f66:	9309      	str	r3, [sp, #36]	; 0x24
 8001f68:	2320      	movs	r3, #32
 8001f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f6e:	2330      	movs	r3, #48	; 0x30
 8001f70:	f04f 0b01 	mov.w	fp, #1
 8001f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f78:	9503      	str	r5, [sp, #12]
 8001f7a:	4637      	mov	r7, r6
 8001f7c:	463d      	mov	r5, r7
 8001f7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f82:	b10b      	cbz	r3, 8001f88 <_svfiprintf_r+0x58>
 8001f84:	2b25      	cmp	r3, #37	; 0x25
 8001f86:	d13e      	bne.n	8002006 <_svfiprintf_r+0xd6>
 8001f88:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f8c:	d00b      	beq.n	8001fa6 <_svfiprintf_r+0x76>
 8001f8e:	4653      	mov	r3, sl
 8001f90:	4632      	mov	r2, r6
 8001f92:	4621      	mov	r1, r4
 8001f94:	4640      	mov	r0, r8
 8001f96:	f7ff ff71 	bl	8001e7c <__ssputs_r>
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	f000 80a4 	beq.w	80020e8 <_svfiprintf_r+0x1b8>
 8001fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fa2:	4453      	add	r3, sl
 8001fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8001fa6:	783b      	ldrb	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 809d 	beq.w	80020e8 <_svfiprintf_r+0x1b8>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fb8:	9304      	str	r3, [sp, #16]
 8001fba:	9307      	str	r3, [sp, #28]
 8001fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8001fc2:	462f      	mov	r7, r5
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001fca:	4850      	ldr	r0, [pc, #320]	; (800210c <_svfiprintf_r+0x1dc>)
 8001fcc:	f000 fa30 	bl	8002430 <memchr>
 8001fd0:	9b04      	ldr	r3, [sp, #16]
 8001fd2:	b9d0      	cbnz	r0, 800200a <_svfiprintf_r+0xda>
 8001fd4:	06d9      	lsls	r1, r3, #27
 8001fd6:	bf44      	itt	mi
 8001fd8:	2220      	movmi	r2, #32
 8001fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fde:	071a      	lsls	r2, r3, #28
 8001fe0:	bf44      	itt	mi
 8001fe2:	222b      	movmi	r2, #43	; 0x2b
 8001fe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fe8:	782a      	ldrb	r2, [r5, #0]
 8001fea:	2a2a      	cmp	r2, #42	; 0x2a
 8001fec:	d015      	beq.n	800201a <_svfiprintf_r+0xea>
 8001fee:	462f      	mov	r7, r5
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	250a      	movs	r5, #10
 8001ff4:	9a07      	ldr	r2, [sp, #28]
 8001ff6:	4639      	mov	r1, r7
 8001ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ffc:	3b30      	subs	r3, #48	; 0x30
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d94d      	bls.n	800209e <_svfiprintf_r+0x16e>
 8002002:	b1b8      	cbz	r0, 8002034 <_svfiprintf_r+0x104>
 8002004:	e00f      	b.n	8002026 <_svfiprintf_r+0xf6>
 8002006:	462f      	mov	r7, r5
 8002008:	e7b8      	b.n	8001f7c <_svfiprintf_r+0x4c>
 800200a:	4a40      	ldr	r2, [pc, #256]	; (800210c <_svfiprintf_r+0x1dc>)
 800200c:	463d      	mov	r5, r7
 800200e:	1a80      	subs	r0, r0, r2
 8002010:	fa0b f000 	lsl.w	r0, fp, r0
 8002014:	4318      	orrs	r0, r3
 8002016:	9004      	str	r0, [sp, #16]
 8002018:	e7d3      	b.n	8001fc2 <_svfiprintf_r+0x92>
 800201a:	9a03      	ldr	r2, [sp, #12]
 800201c:	1d11      	adds	r1, r2, #4
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	9103      	str	r1, [sp, #12]
 8002022:	2a00      	cmp	r2, #0
 8002024:	db01      	blt.n	800202a <_svfiprintf_r+0xfa>
 8002026:	9207      	str	r2, [sp, #28]
 8002028:	e004      	b.n	8002034 <_svfiprintf_r+0x104>
 800202a:	4252      	negs	r2, r2
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	9207      	str	r2, [sp, #28]
 8002032:	9304      	str	r3, [sp, #16]
 8002034:	783b      	ldrb	r3, [r7, #0]
 8002036:	2b2e      	cmp	r3, #46	; 0x2e
 8002038:	d10c      	bne.n	8002054 <_svfiprintf_r+0x124>
 800203a:	787b      	ldrb	r3, [r7, #1]
 800203c:	2b2a      	cmp	r3, #42	; 0x2a
 800203e:	d133      	bne.n	80020a8 <_svfiprintf_r+0x178>
 8002040:	9b03      	ldr	r3, [sp, #12]
 8002042:	3702      	adds	r7, #2
 8002044:	1d1a      	adds	r2, r3, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	9203      	str	r2, [sp, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	bfb8      	it	lt
 800204e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002052:	9305      	str	r3, [sp, #20]
 8002054:	4d2e      	ldr	r5, [pc, #184]	; (8002110 <_svfiprintf_r+0x1e0>)
 8002056:	2203      	movs	r2, #3
 8002058:	7839      	ldrb	r1, [r7, #0]
 800205a:	4628      	mov	r0, r5
 800205c:	f000 f9e8 	bl	8002430 <memchr>
 8002060:	b138      	cbz	r0, 8002072 <_svfiprintf_r+0x142>
 8002062:	2340      	movs	r3, #64	; 0x40
 8002064:	1b40      	subs	r0, r0, r5
 8002066:	fa03 f000 	lsl.w	r0, r3, r0
 800206a:	9b04      	ldr	r3, [sp, #16]
 800206c:	3701      	adds	r7, #1
 800206e:	4303      	orrs	r3, r0
 8002070:	9304      	str	r3, [sp, #16]
 8002072:	7839      	ldrb	r1, [r7, #0]
 8002074:	2206      	movs	r2, #6
 8002076:	4827      	ldr	r0, [pc, #156]	; (8002114 <_svfiprintf_r+0x1e4>)
 8002078:	1c7e      	adds	r6, r7, #1
 800207a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800207e:	f000 f9d7 	bl	8002430 <memchr>
 8002082:	2800      	cmp	r0, #0
 8002084:	d038      	beq.n	80020f8 <_svfiprintf_r+0x1c8>
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <_svfiprintf_r+0x1e8>)
 8002088:	bb13      	cbnz	r3, 80020d0 <_svfiprintf_r+0x1a0>
 800208a:	9b03      	ldr	r3, [sp, #12]
 800208c:	3307      	adds	r3, #7
 800208e:	f023 0307 	bic.w	r3, r3, #7
 8002092:	3308      	adds	r3, #8
 8002094:	9303      	str	r3, [sp, #12]
 8002096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002098:	444b      	add	r3, r9
 800209a:	9309      	str	r3, [sp, #36]	; 0x24
 800209c:	e76d      	b.n	8001f7a <_svfiprintf_r+0x4a>
 800209e:	fb05 3202 	mla	r2, r5, r2, r3
 80020a2:	2001      	movs	r0, #1
 80020a4:	460f      	mov	r7, r1
 80020a6:	e7a6      	b.n	8001ff6 <_svfiprintf_r+0xc6>
 80020a8:	2300      	movs	r3, #0
 80020aa:	250a      	movs	r5, #10
 80020ac:	4619      	mov	r1, r3
 80020ae:	3701      	adds	r7, #1
 80020b0:	9305      	str	r3, [sp, #20]
 80020b2:	4638      	mov	r0, r7
 80020b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020b8:	3a30      	subs	r2, #48	; 0x30
 80020ba:	2a09      	cmp	r2, #9
 80020bc:	d903      	bls.n	80020c6 <_svfiprintf_r+0x196>
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0c8      	beq.n	8002054 <_svfiprintf_r+0x124>
 80020c2:	9105      	str	r1, [sp, #20]
 80020c4:	e7c6      	b.n	8002054 <_svfiprintf_r+0x124>
 80020c6:	fb05 2101 	mla	r1, r5, r1, r2
 80020ca:	2301      	movs	r3, #1
 80020cc:	4607      	mov	r7, r0
 80020ce:	e7f0      	b.n	80020b2 <_svfiprintf_r+0x182>
 80020d0:	ab03      	add	r3, sp, #12
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4622      	mov	r2, r4
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <_svfiprintf_r+0x1ec>)
 80020d8:	a904      	add	r1, sp, #16
 80020da:	4640      	mov	r0, r8
 80020dc:	f3af 8000 	nop.w
 80020e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020e4:	4681      	mov	r9, r0
 80020e6:	d1d6      	bne.n	8002096 <_svfiprintf_r+0x166>
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	065b      	lsls	r3, r3, #25
 80020ec:	f53f af35 	bmi.w	8001f5a <_svfiprintf_r+0x2a>
 80020f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020f2:	b01d      	add	sp, #116	; 0x74
 80020f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f8:	ab03      	add	r3, sp, #12
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4622      	mov	r2, r4
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_svfiprintf_r+0x1ec>)
 8002100:	a904      	add	r1, sp, #16
 8002102:	4640      	mov	r0, r8
 8002104:	f000 f882 	bl	800220c <_printf_i>
 8002108:	e7ea      	b.n	80020e0 <_svfiprintf_r+0x1b0>
 800210a:	bf00      	nop
 800210c:	080026b8 	.word	0x080026b8
 8002110:	080026be 	.word	0x080026be
 8002114:	080026c2 	.word	0x080026c2
 8002118:	00000000 	.word	0x00000000
 800211c:	08001e7d 	.word	0x08001e7d

08002120 <_printf_common>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	4691      	mov	r9, r2
 8002126:	461f      	mov	r7, r3
 8002128:	688a      	ldr	r2, [r1, #8]
 800212a:	690b      	ldr	r3, [r1, #16]
 800212c:	4606      	mov	r6, r0
 800212e:	4293      	cmp	r3, r2
 8002130:	bfb8      	it	lt
 8002132:	4613      	movlt	r3, r2
 8002134:	f8c9 3000 	str.w	r3, [r9]
 8002138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800213c:	460c      	mov	r4, r1
 800213e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002142:	b112      	cbz	r2, 800214a <_printf_common+0x2a>
 8002144:	3301      	adds	r3, #1
 8002146:	f8c9 3000 	str.w	r3, [r9]
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	0699      	lsls	r1, r3, #26
 800214e:	bf42      	ittt	mi
 8002150:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002154:	3302      	addmi	r3, #2
 8002156:	f8c9 3000 	strmi.w	r3, [r9]
 800215a:	6825      	ldr	r5, [r4, #0]
 800215c:	f015 0506 	ands.w	r5, r5, #6
 8002160:	d107      	bne.n	8002172 <_printf_common+0x52>
 8002162:	f104 0a19 	add.w	sl, r4, #25
 8002166:	68e3      	ldr	r3, [r4, #12]
 8002168:	f8d9 2000 	ldr.w	r2, [r9]
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	42ab      	cmp	r3, r5
 8002170:	dc29      	bgt.n	80021c6 <_printf_common+0xa6>
 8002172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	3300      	adds	r3, #0
 800217a:	bf18      	it	ne
 800217c:	2301      	movne	r3, #1
 800217e:	0692      	lsls	r2, r2, #26
 8002180:	d42e      	bmi.n	80021e0 <_printf_common+0xc0>
 8002182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002186:	4639      	mov	r1, r7
 8002188:	4630      	mov	r0, r6
 800218a:	47c0      	blx	r8
 800218c:	3001      	adds	r0, #1
 800218e:	d021      	beq.n	80021d4 <_printf_common+0xb4>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	68e5      	ldr	r5, [r4, #12]
 8002194:	f003 0306 	and.w	r3, r3, #6
 8002198:	2b04      	cmp	r3, #4
 800219a:	bf18      	it	ne
 800219c:	2500      	movne	r5, #0
 800219e:	f8d9 2000 	ldr.w	r2, [r9]
 80021a2:	f04f 0900 	mov.w	r9, #0
 80021a6:	bf08      	it	eq
 80021a8:	1aad      	subeq	r5, r5, r2
 80021aa:	68a3      	ldr	r3, [r4, #8]
 80021ac:	6922      	ldr	r2, [r4, #16]
 80021ae:	bf08      	it	eq
 80021b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bfc4      	itt	gt
 80021b8:	1a9b      	subgt	r3, r3, r2
 80021ba:	18ed      	addgt	r5, r5, r3
 80021bc:	341a      	adds	r4, #26
 80021be:	454d      	cmp	r5, r9
 80021c0:	d11a      	bne.n	80021f8 <_printf_common+0xd8>
 80021c2:	2000      	movs	r0, #0
 80021c4:	e008      	b.n	80021d8 <_printf_common+0xb8>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4652      	mov	r2, sl
 80021ca:	4639      	mov	r1, r7
 80021cc:	4630      	mov	r0, r6
 80021ce:	47c0      	blx	r8
 80021d0:	3001      	adds	r0, #1
 80021d2:	d103      	bne.n	80021dc <_printf_common+0xbc>
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021dc:	3501      	adds	r5, #1
 80021de:	e7c2      	b.n	8002166 <_printf_common+0x46>
 80021e0:	2030      	movs	r0, #48	; 0x30
 80021e2:	18e1      	adds	r1, r4, r3
 80021e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021ee:	4422      	add	r2, r4
 80021f0:	3302      	adds	r3, #2
 80021f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021f6:	e7c4      	b.n	8002182 <_printf_common+0x62>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4622      	mov	r2, r4
 80021fc:	4639      	mov	r1, r7
 80021fe:	4630      	mov	r0, r6
 8002200:	47c0      	blx	r8
 8002202:	3001      	adds	r0, #1
 8002204:	d0e6      	beq.n	80021d4 <_printf_common+0xb4>
 8002206:	f109 0901 	add.w	r9, r9, #1
 800220a:	e7d8      	b.n	80021be <_printf_common+0x9e>

0800220c <_printf_i>:
 800220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002210:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002214:	460c      	mov	r4, r1
 8002216:	7e09      	ldrb	r1, [r1, #24]
 8002218:	b085      	sub	sp, #20
 800221a:	296e      	cmp	r1, #110	; 0x6e
 800221c:	4617      	mov	r7, r2
 800221e:	4606      	mov	r6, r0
 8002220:	4698      	mov	r8, r3
 8002222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002224:	f000 80b3 	beq.w	800238e <_printf_i+0x182>
 8002228:	d822      	bhi.n	8002270 <_printf_i+0x64>
 800222a:	2963      	cmp	r1, #99	; 0x63
 800222c:	d036      	beq.n	800229c <_printf_i+0x90>
 800222e:	d80a      	bhi.n	8002246 <_printf_i+0x3a>
 8002230:	2900      	cmp	r1, #0
 8002232:	f000 80b9 	beq.w	80023a8 <_printf_i+0x19c>
 8002236:	2958      	cmp	r1, #88	; 0x58
 8002238:	f000 8083 	beq.w	8002342 <_printf_i+0x136>
 800223c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002244:	e032      	b.n	80022ac <_printf_i+0xa0>
 8002246:	2964      	cmp	r1, #100	; 0x64
 8002248:	d001      	beq.n	800224e <_printf_i+0x42>
 800224a:	2969      	cmp	r1, #105	; 0x69
 800224c:	d1f6      	bne.n	800223c <_printf_i+0x30>
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	0605      	lsls	r5, r0, #24
 8002254:	f103 0104 	add.w	r1, r3, #4
 8002258:	d52a      	bpl.n	80022b0 <_printf_i+0xa4>
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da03      	bge.n	800226a <_printf_i+0x5e>
 8002262:	222d      	movs	r2, #45	; 0x2d
 8002264:	425b      	negs	r3, r3
 8002266:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800226a:	486f      	ldr	r0, [pc, #444]	; (8002428 <_printf_i+0x21c>)
 800226c:	220a      	movs	r2, #10
 800226e:	e039      	b.n	80022e4 <_printf_i+0xd8>
 8002270:	2973      	cmp	r1, #115	; 0x73
 8002272:	f000 809d 	beq.w	80023b0 <_printf_i+0x1a4>
 8002276:	d808      	bhi.n	800228a <_printf_i+0x7e>
 8002278:	296f      	cmp	r1, #111	; 0x6f
 800227a:	d020      	beq.n	80022be <_printf_i+0xb2>
 800227c:	2970      	cmp	r1, #112	; 0x70
 800227e:	d1dd      	bne.n	800223c <_printf_i+0x30>
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	e003      	b.n	8002292 <_printf_i+0x86>
 800228a:	2975      	cmp	r1, #117	; 0x75
 800228c:	d017      	beq.n	80022be <_printf_i+0xb2>
 800228e:	2978      	cmp	r1, #120	; 0x78
 8002290:	d1d4      	bne.n	800223c <_printf_i+0x30>
 8002292:	2378      	movs	r3, #120	; 0x78
 8002294:	4865      	ldr	r0, [pc, #404]	; (800242c <_printf_i+0x220>)
 8002296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800229a:	e055      	b.n	8002348 <_printf_i+0x13c>
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022a2:	1d19      	adds	r1, r3, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6011      	str	r1, [r2, #0]
 80022a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022ac:	2301      	movs	r3, #1
 80022ae:	e08c      	b.n	80023ca <_printf_i+0x1be>
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022b6:	6011      	str	r1, [r2, #0]
 80022b8:	bf18      	it	ne
 80022ba:	b21b      	sxthne	r3, r3
 80022bc:	e7cf      	b.n	800225e <_printf_i+0x52>
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	6825      	ldr	r5, [r4, #0]
 80022c2:	1d18      	adds	r0, r3, #4
 80022c4:	6010      	str	r0, [r2, #0]
 80022c6:	0628      	lsls	r0, r5, #24
 80022c8:	d501      	bpl.n	80022ce <_printf_i+0xc2>
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	e002      	b.n	80022d4 <_printf_i+0xc8>
 80022ce:	0668      	lsls	r0, r5, #25
 80022d0:	d5fb      	bpl.n	80022ca <_printf_i+0xbe>
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	296f      	cmp	r1, #111	; 0x6f
 80022d6:	bf14      	ite	ne
 80022d8:	220a      	movne	r2, #10
 80022da:	2208      	moveq	r2, #8
 80022dc:	4852      	ldr	r0, [pc, #328]	; (8002428 <_printf_i+0x21c>)
 80022de:	2100      	movs	r1, #0
 80022e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022e4:	6865      	ldr	r5, [r4, #4]
 80022e6:	2d00      	cmp	r5, #0
 80022e8:	60a5      	str	r5, [r4, #8]
 80022ea:	f2c0 8095 	blt.w	8002418 <_printf_i+0x20c>
 80022ee:	6821      	ldr	r1, [r4, #0]
 80022f0:	f021 0104 	bic.w	r1, r1, #4
 80022f4:	6021      	str	r1, [r4, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13d      	bne.n	8002376 <_printf_i+0x16a>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	f040 808e 	bne.w	800241c <_printf_i+0x210>
 8002300:	4665      	mov	r5, ip
 8002302:	2a08      	cmp	r2, #8
 8002304:	d10b      	bne.n	800231e <_printf_i+0x112>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	07db      	lsls	r3, r3, #31
 800230a:	d508      	bpl.n	800231e <_printf_i+0x112>
 800230c:	6923      	ldr	r3, [r4, #16]
 800230e:	6862      	ldr	r2, [r4, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	bfde      	ittt	le
 8002314:	2330      	movle	r3, #48	; 0x30
 8002316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800231a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800231e:	ebac 0305 	sub.w	r3, ip, r5
 8002322:	6123      	str	r3, [r4, #16]
 8002324:	f8cd 8000 	str.w	r8, [sp]
 8002328:	463b      	mov	r3, r7
 800232a:	aa03      	add	r2, sp, #12
 800232c:	4621      	mov	r1, r4
 800232e:	4630      	mov	r0, r6
 8002330:	f7ff fef6 	bl	8002120 <_printf_common>
 8002334:	3001      	adds	r0, #1
 8002336:	d14d      	bne.n	80023d4 <_printf_i+0x1c8>
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	b005      	add	sp, #20
 800233e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002342:	4839      	ldr	r0, [pc, #228]	; (8002428 <_printf_i+0x21c>)
 8002344:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002348:	6813      	ldr	r3, [r2, #0]
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	1d1d      	adds	r5, r3, #4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6015      	str	r5, [r2, #0]
 8002352:	060a      	lsls	r2, r1, #24
 8002354:	d50b      	bpl.n	800236e <_printf_i+0x162>
 8002356:	07ca      	lsls	r2, r1, #31
 8002358:	bf44      	itt	mi
 800235a:	f041 0120 	orrmi.w	r1, r1, #32
 800235e:	6021      	strmi	r1, [r4, #0]
 8002360:	b91b      	cbnz	r3, 800236a <_printf_i+0x15e>
 8002362:	6822      	ldr	r2, [r4, #0]
 8002364:	f022 0220 	bic.w	r2, r2, #32
 8002368:	6022      	str	r2, [r4, #0]
 800236a:	2210      	movs	r2, #16
 800236c:	e7b7      	b.n	80022de <_printf_i+0xd2>
 800236e:	064d      	lsls	r5, r1, #25
 8002370:	bf48      	it	mi
 8002372:	b29b      	uxthmi	r3, r3
 8002374:	e7ef      	b.n	8002356 <_printf_i+0x14a>
 8002376:	4665      	mov	r5, ip
 8002378:	fbb3 f1f2 	udiv	r1, r3, r2
 800237c:	fb02 3311 	mls	r3, r2, r1, r3
 8002380:	5cc3      	ldrb	r3, [r0, r3]
 8002382:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002386:	460b      	mov	r3, r1
 8002388:	2900      	cmp	r1, #0
 800238a:	d1f5      	bne.n	8002378 <_printf_i+0x16c>
 800238c:	e7b9      	b.n	8002302 <_printf_i+0xf6>
 800238e:	6813      	ldr	r3, [r2, #0]
 8002390:	6825      	ldr	r5, [r4, #0]
 8002392:	1d18      	adds	r0, r3, #4
 8002394:	6961      	ldr	r1, [r4, #20]
 8002396:	6010      	str	r0, [r2, #0]
 8002398:	0628      	lsls	r0, r5, #24
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	d501      	bpl.n	80023a2 <_printf_i+0x196>
 800239e:	6019      	str	r1, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <_printf_i+0x19c>
 80023a2:	066a      	lsls	r2, r5, #25
 80023a4:	d5fb      	bpl.n	800239e <_printf_i+0x192>
 80023a6:	8019      	strh	r1, [r3, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	4665      	mov	r5, ip
 80023ac:	6123      	str	r3, [r4, #16]
 80023ae:	e7b9      	b.n	8002324 <_printf_i+0x118>
 80023b0:	6813      	ldr	r3, [r2, #0]
 80023b2:	1d19      	adds	r1, r3, #4
 80023b4:	6011      	str	r1, [r2, #0]
 80023b6:	681d      	ldr	r5, [r3, #0]
 80023b8:	6862      	ldr	r2, [r4, #4]
 80023ba:	2100      	movs	r1, #0
 80023bc:	4628      	mov	r0, r5
 80023be:	f000 f837 	bl	8002430 <memchr>
 80023c2:	b108      	cbz	r0, 80023c8 <_printf_i+0x1bc>
 80023c4:	1b40      	subs	r0, r0, r5
 80023c6:	6060      	str	r0, [r4, #4]
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	6123      	str	r3, [r4, #16]
 80023cc:	2300      	movs	r3, #0
 80023ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023d2:	e7a7      	b.n	8002324 <_printf_i+0x118>
 80023d4:	6923      	ldr	r3, [r4, #16]
 80023d6:	462a      	mov	r2, r5
 80023d8:	4639      	mov	r1, r7
 80023da:	4630      	mov	r0, r6
 80023dc:	47c0      	blx	r8
 80023de:	3001      	adds	r0, #1
 80023e0:	d0aa      	beq.n	8002338 <_printf_i+0x12c>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	079b      	lsls	r3, r3, #30
 80023e6:	d413      	bmi.n	8002410 <_printf_i+0x204>
 80023e8:	68e0      	ldr	r0, [r4, #12]
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	4298      	cmp	r0, r3
 80023ee:	bfb8      	it	lt
 80023f0:	4618      	movlt	r0, r3
 80023f2:	e7a3      	b.n	800233c <_printf_i+0x130>
 80023f4:	2301      	movs	r3, #1
 80023f6:	464a      	mov	r2, r9
 80023f8:	4639      	mov	r1, r7
 80023fa:	4630      	mov	r0, r6
 80023fc:	47c0      	blx	r8
 80023fe:	3001      	adds	r0, #1
 8002400:	d09a      	beq.n	8002338 <_printf_i+0x12c>
 8002402:	3501      	adds	r5, #1
 8002404:	68e3      	ldr	r3, [r4, #12]
 8002406:	9a03      	ldr	r2, [sp, #12]
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	42ab      	cmp	r3, r5
 800240c:	dcf2      	bgt.n	80023f4 <_printf_i+0x1e8>
 800240e:	e7eb      	b.n	80023e8 <_printf_i+0x1dc>
 8002410:	2500      	movs	r5, #0
 8002412:	f104 0919 	add.w	r9, r4, #25
 8002416:	e7f5      	b.n	8002404 <_printf_i+0x1f8>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ac      	bne.n	8002376 <_printf_i+0x16a>
 800241c:	7803      	ldrb	r3, [r0, #0]
 800241e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002426:	e76c      	b.n	8002302 <_printf_i+0xf6>
 8002428:	080026c9 	.word	0x080026c9
 800242c:	080026da 	.word	0x080026da

08002430 <memchr>:
 8002430:	b510      	push	{r4, lr}
 8002432:	b2c9      	uxtb	r1, r1
 8002434:	4402      	add	r2, r0
 8002436:	4290      	cmp	r0, r2
 8002438:	4603      	mov	r3, r0
 800243a:	d101      	bne.n	8002440 <memchr+0x10>
 800243c:	2300      	movs	r3, #0
 800243e:	e003      	b.n	8002448 <memchr+0x18>
 8002440:	781c      	ldrb	r4, [r3, #0]
 8002442:	3001      	adds	r0, #1
 8002444:	428c      	cmp	r4, r1
 8002446:	d1f6      	bne.n	8002436 <memchr+0x6>
 8002448:	4618      	mov	r0, r3
 800244a:	bd10      	pop	{r4, pc}

0800244c <memcpy>:
 800244c:	b510      	push	{r4, lr}
 800244e:	1e43      	subs	r3, r0, #1
 8002450:	440a      	add	r2, r1
 8002452:	4291      	cmp	r1, r2
 8002454:	d100      	bne.n	8002458 <memcpy+0xc>
 8002456:	bd10      	pop	{r4, pc}
 8002458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800245c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002460:	e7f7      	b.n	8002452 <memcpy+0x6>

08002462 <memmove>:
 8002462:	4288      	cmp	r0, r1
 8002464:	b510      	push	{r4, lr}
 8002466:	eb01 0302 	add.w	r3, r1, r2
 800246a:	d807      	bhi.n	800247c <memmove+0x1a>
 800246c:	1e42      	subs	r2, r0, #1
 800246e:	4299      	cmp	r1, r3
 8002470:	d00a      	beq.n	8002488 <memmove+0x26>
 8002472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002476:	f802 4f01 	strb.w	r4, [r2, #1]!
 800247a:	e7f8      	b.n	800246e <memmove+0xc>
 800247c:	4283      	cmp	r3, r0
 800247e:	d9f5      	bls.n	800246c <memmove+0xa>
 8002480:	1881      	adds	r1, r0, r2
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	42d3      	cmn	r3, r2
 8002486:	d100      	bne.n	800248a <memmove+0x28>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800248e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002492:	e7f7      	b.n	8002484 <memmove+0x22>

08002494 <_free_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4605      	mov	r5, r0
 8002498:	2900      	cmp	r1, #0
 800249a:	d043      	beq.n	8002524 <_free_r+0x90>
 800249c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024a0:	1f0c      	subs	r4, r1, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bfb8      	it	lt
 80024a6:	18e4      	addlt	r4, r4, r3
 80024a8:	f000 f8d0 	bl	800264c <__malloc_lock>
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <_free_r+0x94>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	4610      	mov	r0, r2
 80024b2:	b933      	cbnz	r3, 80024c2 <_free_r+0x2e>
 80024b4:	6063      	str	r3, [r4, #4]
 80024b6:	6014      	str	r4, [r2, #0]
 80024b8:	4628      	mov	r0, r5
 80024ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024be:	f000 b8c6 	b.w	800264e <__malloc_unlock>
 80024c2:	42a3      	cmp	r3, r4
 80024c4:	d90b      	bls.n	80024de <_free_r+0x4a>
 80024c6:	6821      	ldr	r1, [r4, #0]
 80024c8:	1862      	adds	r2, r4, r1
 80024ca:	4293      	cmp	r3, r2
 80024cc:	bf01      	itttt	eq
 80024ce:	681a      	ldreq	r2, [r3, #0]
 80024d0:	685b      	ldreq	r3, [r3, #4]
 80024d2:	1852      	addeq	r2, r2, r1
 80024d4:	6022      	streq	r2, [r4, #0]
 80024d6:	6063      	str	r3, [r4, #4]
 80024d8:	6004      	str	r4, [r0, #0]
 80024da:	e7ed      	b.n	80024b8 <_free_r+0x24>
 80024dc:	4613      	mov	r3, r2
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	b10a      	cbz	r2, 80024e6 <_free_r+0x52>
 80024e2:	42a2      	cmp	r2, r4
 80024e4:	d9fa      	bls.n	80024dc <_free_r+0x48>
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	1858      	adds	r0, r3, r1
 80024ea:	42a0      	cmp	r0, r4
 80024ec:	d10b      	bne.n	8002506 <_free_r+0x72>
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	4401      	add	r1, r0
 80024f2:	1858      	adds	r0, r3, r1
 80024f4:	4282      	cmp	r2, r0
 80024f6:	6019      	str	r1, [r3, #0]
 80024f8:	d1de      	bne.n	80024b8 <_free_r+0x24>
 80024fa:	6810      	ldr	r0, [r2, #0]
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	4401      	add	r1, r0
 8002500:	6019      	str	r1, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	e7d8      	b.n	80024b8 <_free_r+0x24>
 8002506:	d902      	bls.n	800250e <_free_r+0x7a>
 8002508:	230c      	movs	r3, #12
 800250a:	602b      	str	r3, [r5, #0]
 800250c:	e7d4      	b.n	80024b8 <_free_r+0x24>
 800250e:	6820      	ldr	r0, [r4, #0]
 8002510:	1821      	adds	r1, r4, r0
 8002512:	428a      	cmp	r2, r1
 8002514:	bf01      	itttt	eq
 8002516:	6811      	ldreq	r1, [r2, #0]
 8002518:	6852      	ldreq	r2, [r2, #4]
 800251a:	1809      	addeq	r1, r1, r0
 800251c:	6021      	streq	r1, [r4, #0]
 800251e:	6062      	str	r2, [r4, #4]
 8002520:	605c      	str	r4, [r3, #4]
 8002522:	e7c9      	b.n	80024b8 <_free_r+0x24>
 8002524:	bd38      	pop	{r3, r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	200000bc 	.word	0x200000bc

0800252c <_malloc_r>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	1ccd      	adds	r5, r1, #3
 8002530:	f025 0503 	bic.w	r5, r5, #3
 8002534:	3508      	adds	r5, #8
 8002536:	2d0c      	cmp	r5, #12
 8002538:	bf38      	it	cc
 800253a:	250c      	movcc	r5, #12
 800253c:	2d00      	cmp	r5, #0
 800253e:	4606      	mov	r6, r0
 8002540:	db01      	blt.n	8002546 <_malloc_r+0x1a>
 8002542:	42a9      	cmp	r1, r5
 8002544:	d903      	bls.n	800254e <_malloc_r+0x22>
 8002546:	230c      	movs	r3, #12
 8002548:	6033      	str	r3, [r6, #0]
 800254a:	2000      	movs	r0, #0
 800254c:	bd70      	pop	{r4, r5, r6, pc}
 800254e:	f000 f87d 	bl	800264c <__malloc_lock>
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <_malloc_r+0xac>)
 8002554:	6814      	ldr	r4, [r2, #0]
 8002556:	4621      	mov	r1, r4
 8002558:	b991      	cbnz	r1, 8002580 <_malloc_r+0x54>
 800255a:	4c20      	ldr	r4, [pc, #128]	; (80025dc <_malloc_r+0xb0>)
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	b91b      	cbnz	r3, 8002568 <_malloc_r+0x3c>
 8002560:	4630      	mov	r0, r6
 8002562:	f000 f863 	bl	800262c <_sbrk_r>
 8002566:	6020      	str	r0, [r4, #0]
 8002568:	4629      	mov	r1, r5
 800256a:	4630      	mov	r0, r6
 800256c:	f000 f85e 	bl	800262c <_sbrk_r>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d124      	bne.n	80025be <_malloc_r+0x92>
 8002574:	230c      	movs	r3, #12
 8002576:	4630      	mov	r0, r6
 8002578:	6033      	str	r3, [r6, #0]
 800257a:	f000 f868 	bl	800264e <__malloc_unlock>
 800257e:	e7e4      	b.n	800254a <_malloc_r+0x1e>
 8002580:	680b      	ldr	r3, [r1, #0]
 8002582:	1b5b      	subs	r3, r3, r5
 8002584:	d418      	bmi.n	80025b8 <_malloc_r+0x8c>
 8002586:	2b0b      	cmp	r3, #11
 8002588:	d90f      	bls.n	80025aa <_malloc_r+0x7e>
 800258a:	600b      	str	r3, [r1, #0]
 800258c:	18cc      	adds	r4, r1, r3
 800258e:	50cd      	str	r5, [r1, r3]
 8002590:	4630      	mov	r0, r6
 8002592:	f000 f85c 	bl	800264e <__malloc_unlock>
 8002596:	f104 000b 	add.w	r0, r4, #11
 800259a:	1d23      	adds	r3, r4, #4
 800259c:	f020 0007 	bic.w	r0, r0, #7
 80025a0:	1ac3      	subs	r3, r0, r3
 80025a2:	d0d3      	beq.n	800254c <_malloc_r+0x20>
 80025a4:	425a      	negs	r2, r3
 80025a6:	50e2      	str	r2, [r4, r3]
 80025a8:	e7d0      	b.n	800254c <_malloc_r+0x20>
 80025aa:	684b      	ldr	r3, [r1, #4]
 80025ac:	428c      	cmp	r4, r1
 80025ae:	bf16      	itet	ne
 80025b0:	6063      	strne	r3, [r4, #4]
 80025b2:	6013      	streq	r3, [r2, #0]
 80025b4:	460c      	movne	r4, r1
 80025b6:	e7eb      	b.n	8002590 <_malloc_r+0x64>
 80025b8:	460c      	mov	r4, r1
 80025ba:	6849      	ldr	r1, [r1, #4]
 80025bc:	e7cc      	b.n	8002558 <_malloc_r+0x2c>
 80025be:	1cc4      	adds	r4, r0, #3
 80025c0:	f024 0403 	bic.w	r4, r4, #3
 80025c4:	42a0      	cmp	r0, r4
 80025c6:	d005      	beq.n	80025d4 <_malloc_r+0xa8>
 80025c8:	1a21      	subs	r1, r4, r0
 80025ca:	4630      	mov	r0, r6
 80025cc:	f000 f82e 	bl	800262c <_sbrk_r>
 80025d0:	3001      	adds	r0, #1
 80025d2:	d0cf      	beq.n	8002574 <_malloc_r+0x48>
 80025d4:	6025      	str	r5, [r4, #0]
 80025d6:	e7db      	b.n	8002590 <_malloc_r+0x64>
 80025d8:	200000bc 	.word	0x200000bc
 80025dc:	200000c0 	.word	0x200000c0

080025e0 <_realloc_r>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	4607      	mov	r7, r0
 80025e4:	4614      	mov	r4, r2
 80025e6:	460e      	mov	r6, r1
 80025e8:	b921      	cbnz	r1, 80025f4 <_realloc_r+0x14>
 80025ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025ee:	4611      	mov	r1, r2
 80025f0:	f7ff bf9c 	b.w	800252c <_malloc_r>
 80025f4:	b922      	cbnz	r2, 8002600 <_realloc_r+0x20>
 80025f6:	f7ff ff4d 	bl	8002494 <_free_r>
 80025fa:	4625      	mov	r5, r4
 80025fc:	4628      	mov	r0, r5
 80025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002600:	f000 f826 	bl	8002650 <_malloc_usable_size_r>
 8002604:	42a0      	cmp	r0, r4
 8002606:	d20f      	bcs.n	8002628 <_realloc_r+0x48>
 8002608:	4621      	mov	r1, r4
 800260a:	4638      	mov	r0, r7
 800260c:	f7ff ff8e 	bl	800252c <_malloc_r>
 8002610:	4605      	mov	r5, r0
 8002612:	2800      	cmp	r0, #0
 8002614:	d0f2      	beq.n	80025fc <_realloc_r+0x1c>
 8002616:	4631      	mov	r1, r6
 8002618:	4622      	mov	r2, r4
 800261a:	f7ff ff17 	bl	800244c <memcpy>
 800261e:	4631      	mov	r1, r6
 8002620:	4638      	mov	r0, r7
 8002622:	f7ff ff37 	bl	8002494 <_free_r>
 8002626:	e7e9      	b.n	80025fc <_realloc_r+0x1c>
 8002628:	4635      	mov	r5, r6
 800262a:	e7e7      	b.n	80025fc <_realloc_r+0x1c>

0800262c <_sbrk_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	2300      	movs	r3, #0
 8002630:	4c05      	ldr	r4, [pc, #20]	; (8002648 <_sbrk_r+0x1c>)
 8002632:	4605      	mov	r5, r0
 8002634:	4608      	mov	r0, r1
 8002636:	6023      	str	r3, [r4, #0]
 8002638:	f7fe f864 	bl	8000704 <_sbrk>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_sbrk_r+0x1a>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	b103      	cbz	r3, 8002646 <_sbrk_r+0x1a>
 8002644:	602b      	str	r3, [r5, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	2000011c 	.word	0x2000011c

0800264c <__malloc_lock>:
 800264c:	4770      	bx	lr

0800264e <__malloc_unlock>:
 800264e:	4770      	bx	lr

08002650 <_malloc_usable_size_r>:
 8002650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002654:	1f18      	subs	r0, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfbc      	itt	lt
 800265a:	580b      	ldrlt	r3, [r1, r0]
 800265c:	18c0      	addlt	r0, r0, r3
 800265e:	4770      	bx	lr

08002660 <_init>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr

0800266c <_fini>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	bf00      	nop
 8002670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002672:	bc08      	pop	{r3}
 8002674:	469e      	mov	lr, r3
 8002676:	4770      	bx	lr
